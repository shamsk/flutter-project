// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const collection = dart_sdk.collection;
  const html = dart_sdk.html;
  const math = dart_sdk.math;
  const developer = dart_sdk.developer;
  const _internal = dart_sdk._internal;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const tab_controller = flutter_sdk.src__material__tab_controller;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const tabs = flutter_sdk.src__material__tabs;
  const basic = flutter_sdk.src__widgets__basic;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const list_tile = flutter_sdk.src__material__list_tile;
  const floating_action_button = flutter_sdk.src__material__floating_action_button;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  const binding = flutter_sdk.src__widgets__binding;
  const router = flutter_sdk.src__widgets__router;
  const bottom_sheet = flutter_sdk.src__material__bottom_sheet;
  const theme$ = flutter_sdk.src__material__theme;
  const media_query = flutter_sdk.src__widgets__media_query;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const routes = flutter_sdk.src__widgets__routes;
  const animation = flutter_sdk.src__animation__animation;
  const borders = flutter_sdk.src__painting__borders;
  const animation_controller = flutter_sdk.src__animation__animation_controller;
  const platform = flutter_sdk.src__foundation__platform;
  const debug = flutter_sdk.src__widgets__debug;
  const debug$ = flutter_sdk.src__material__debug;
  const material_localizations = flutter_sdk.src__material__material_localizations;
  const transitions = flutter_sdk.src__widgets__transitions;
  const navigator = flutter_sdk.src__widgets__navigator;
  const box$ = flutter_sdk.src__rendering__box;
  const shifted_box = flutter_sdk.src__rendering__shifted_box;
  const safe_area = flutter_sdk.src__widgets__safe_area;
  const animations = flutter_sdk.src__animation__animations;
  const curves = flutter_sdk.src__animation__curves;
  const text_button = flutter_sdk.src__material__text_button;
  const rounded_rectangle_border = flutter_sdk.src__painting__rounded_rectangle_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const text_style = flutter_sdk.src__painting__text_style;
  const dialog = flutter_sdk.src__material__dialog;
  const flex = flutter_sdk.src__rendering__flex;
  const button_theme = flutter_sdk.src__material__button_theme;
  const wrap = flutter_sdk.src__rendering__wrap;
  const will_pop_scope = flutter_sdk.src__widgets__will_pop_scope;
  const binding$ = flutter_sdk.src__scheduler__binding;
  const gradient = flutter_sdk.src__painting__gradient;
  const box_shadow = flutter_sdk.src__painting__box_shadow;
  const dismissible = flutter_sdk.src__widgets__dismissible;
  const form = flutter_sdk.src__widgets__form;
  const app = flutter_sdk.src__material__app;
  const focus_manager = flutter_sdk.src__widgets__focus_manager;
  const overlay = flutter_sdk.src__widgets__overlay;
  const container = flutter_sdk.src__widgets__container;
  const alignment$ = flutter_sdk.src__painting__alignment;
  const synchronous_future = flutter_sdk.src__foundation__synchronous_future;
  const recognizer = flutter_sdk.src__gestures__recognizer;
  const change_notifier = flutter_sdk.src__foundation__change_notifier;
  const assertions = flutter_sdk.src__foundation__assertions;
  const app$ = flutter_sdk.src__cupertino__app;
  const material = flutter_sdk.src__material__material;
  const localizations = flutter_sdk.src__widgets__localizations;
  const shortcuts = flutter_sdk.src__widgets__shortcuts;
  const actions = flutter_sdk.src__widgets__actions;
  const theme = flutter_sdk.src__cupertino__theme;
  const scroll_configuration = flutter_sdk.src__widgets__scroll_configuration;
  const key = flutter_sdk.src__foundation__key;
  const pages = flutter_sdk.src__widgets__pages;
  const route$ = flutter_sdk.src__cupertino__route;
  const page_transitions_theme = flutter_sdk.src__material__page_transitions_theme;
  const async$ = flutter_sdk.src__widgets__async;
  const box_decoration = flutter_sdk.src__painting__box_decoration;
  const tween = flutter_sdk.src__animation__tween;
  const box_border = flutter_sdk.src__painting__box_border;
  const focus_scope = flutter_sdk.src__widgets__focus_scope;
  const progress_indicator = flutter_sdk.src__material__progress_indicator;
  const ticker_provider = flutter_sdk.src__widgets__ticker_provider;
  const tweens = flutter_sdk.src__rendering__tweens;
  const gesture_detector = flutter_sdk.src__widgets__gesture_detector;
  const diagnostics = flutter_sdk.src__foundation__diagnostics;
  const ticker = flutter_sdk.src__scheduler__ticker;
  const scroll_controller = flutter_sdk.src__widgets__scroll_controller;
  const stack = flutter_sdk.src__rendering__stack;
  const proxy_box = flutter_sdk.src__rendering__proxy_box;
  const monodrag = flutter_sdk.src__gestures__monodrag;
  const drag_details = flutter_sdk.src__gestures__drag_details;
  const events = flutter_sdk.src__gestures__events;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var get = Object.create(dart.library);
  var get_reset = Object.create(dart.library);
  var connect = Object.create(dart.library);
  var get_core = Object.create(dart.library);
  var get_instance = Object.create(dart.library);
  var get_navigation = Object.create(dart.library);
  var get_rx = Object.create(dart.library);
  var get_state_manager = Object.create(dart.library);
  var get_utils = Object.create(dart.library);
  var route_manager = Object.create(dart.library);
  var lifecycle = Object.create(dart.library);
  var certificates = Object.create(dart.library);
  var exceptions = Object.create(dart.library);
  var http = Object.create(dart.library);
  var response$ = Object.create(dart.library);
  var sockets = Object.create(dart.library);
  var form_data = Object.create(dart.library);
  var multipart_file = Object.create(dart.library);
  var get_interface = Object.create(dart.library);
  var get_main = Object.create(dart.library);
  var log = Object.create(dart.library);
  var smart_management = Object.create(dart.library);
  var typedefs = Object.create(dart.library);
  var bindings_interface = Object.create(dart.library);
  var extension_instance = Object.create(dart.library);
  var get_instance$ = Object.create(dart.library);
  var bottomsheet$ = Object.create(dart.library);
  var extension_navigation = Object.create(dart.library);
  var get_information_parser = Object.create(dart.library);
  var get_nav_config = Object.create(dart.library);
  var get_router_delegate = Object.create(dart.library);
  var router_outlet = Object.create(dart.library);
  var get_cupertino_app = Object.create(dart.library);
  var get_material_app = Object.create(dart.library);
  var internacionalization = Object.create(dart.library);
  var root_controller = Object.create(dart.library);
  var custom_transition = Object.create(dart.library);
  var default_route = Object.create(dart.library);
  var get_route = Object.create(dart.library);
  var route_observer = Object.create(dart.library);
  var route_middleware = Object.create(dart.library);
  var transitions_type = Object.create(dart.library);
  var snackbar = Object.create(dart.library);
  var snackbar_controller = Object.create(dart.library);
  var rx_stream = Object.create(dart.library);
  var rx_types = Object.create(dart.library);
  var rx_workers = Object.create(dart.library);
  var rx_disposable = Object.create(dart.library);
  var rx_getx_widget = Object.create(dart.library);
  var rx_notifier = Object.create(dart.library);
  var rx_obx_widget = Object.create(dart.library);
  var rx_ticket_provider_mixin = Object.create(dart.library);
  var get_controllers = Object.create(dart.library);
  var get_responsive = Object.create(dart.library);
  var get_state = Object.create(dart.library);
  var get_view = Object.create(dart.library);
  var mixin_state = Object.create(dart.library);
  var simple_builder = Object.create(dart.library);
  var $export = Object.create(dart.library);
  var get_utils$ = Object.create(dart.library);
  var platform$ = Object.create(dart.library);
  var get_queue = Object.create(dart.library);
  var request$ = Object.create(dart.library);
  var http_status = Object.create(dart.library);
  var _http_request_html = Object.create(dart.library);
  var request_base = Object.create(dart.library);
  var get_modifiers = Object.create(dart.library);
  var sockets_html = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var _file_decoder_html = Object.create(dart.library);
  var router_report = Object.create(dart.library);
  var dialog_route = Object.create(dart.library);
  var parse_route = Object.create(dart.library);
  var list_notifier = Object.create(dart.library);
  var get_transition_mixin = Object.create(dart.library);
  var instance_manager = Object.create(dart.library);
  var rx_typedefs = Object.create(dart.library);
  var debouncer = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var get_widget_cache = Object.create(dart.library);
  var context_extensions = Object.create(dart.library);
  var double_extensions = Object.create(dart.library);
  var duration_extensions = Object.create(dart.library);
  var dynamic_extensions = Object.create(dart.library);
  var event_loop_extensions = Object.create(dart.library);
  var internacionalization$ = Object.create(dart.library);
  var iterable_extensions = Object.create(dart.library);
  var num_extensions = Object.create(dart.library);
  var string_extensions = Object.create(dart.library);
  var widget_extensions = Object.create(dart.library);
  var platform_web = Object.create(dart.library);
  var body_decoder = Object.create(dart.library);
  var socket_notifier = Object.create(dart.library);
  var default_transitions = Object.create(dart.library);
  var circular_reveal_clipper = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T$ = {
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T$.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ListOfString()])))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    BuildContextAndintToListTile: () => (T$.BuildContextAndintToListTile = dart.constFn(dart.fnType(list_tile.ListTile, [framework.BuildContext, core.int])))(),
    __Tovoid: () => (T$.__Tovoid = dart.constFn(dart.fnType(dart.void, [], {clearFactory: core.bool, clearRouteBindings: core.bool}, {})))(),
    InternalFinalCallbackOfvoid: () => (T$.InternalFinalCallbackOfvoid = dart.constFn(lifecycle.InternalFinalCallback$(dart.void)))(),
    JSArrayOfGetSocket: () => (T$.JSArrayOfGetSocket = dart.constFn(_interceptors.JSArray$(sockets.GetSocket)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    dynamicToGraphQLError: () => (T$.dynamicToGraphQLError = dart.constFn(dart.fnType(exceptions.GraphQLError, [dart.dynamic])))(),
    JSArrayOfGraphQLError: () => (T$.JSArrayOfGraphQLError = dart.constFn(_interceptors.JSArray$(exceptions.GraphQLError)))(),
    FutureOrOfRequest: () => (T$.FutureOrOfRequest = dart.constFn(async.FutureOr$(request$.Request)))(),
    RequestToFutureOrOfRequest: () => (T$.RequestToFutureOrOfRequest = dart.constFn(dart.fnType(T$.FutureOrOfRequest(), [request$.Request])))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    StringAnddynamicTovoid: () => (T$.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    intToListOfint: () => (T$.intToListOfint = dart.constFn(dart.fnType(T$.ListOfint(), [core.int])))(),
    _StreamHandlerTransformerOfListOfint$ListOfint: () => (T$._StreamHandlerTransformerOfListOfint$ListOfint = dart.constFn(async._StreamHandlerTransformer$(T$.ListOfint(), T$.ListOfint())))(),
    EventSinkOfListOfint: () => (T$.EventSinkOfListOfint = dart.constFn(async.EventSink$(T$.ListOfint())))(),
    ListOfintAndEventSinkOfListOfintTovoid: () => (T$.ListOfintAndEventSinkOfListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint(), T$.EventSinkOfListOfint()])))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    HashMapOfString$String: () => (T$.HashMapOfString$String = dart.constFn(collection.HashMap$(core.String, core.String)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    UnmodifiableMapViewOfString$StringN: () => (T$.UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, T$.StringN())))(),
    StringAndStringNTovoid: () => (T$.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.StringN()])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    IdentityMapOfString$StringN: () => (T$.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    VoidToStringN: () => (T$.VoidToStringN = dart.constFn(dart.fnType(T$.StringN(), [])))(),
    TimerTovoid: () => (T$.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    EventTovoid: () => (T$.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    MessageEventTovoid: () => (T$.MessageEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MessageEvent])))(),
    CloseEventTovoid: () => (T$.CloseEventTovoid = dart.constFn(dart.fnType(dart.void, [html.CloseEvent])))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    MapEntryOfString$String: () => (T$.MapEntryOfString$String = dart.constFn(core.MapEntry$(core.String, core.String)))(),
    JSArrayOfMapEntryOfString$String: () => (T$.JSArrayOfMapEntryOfString$String = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$String())))(),
    MapEntryOfString$MultipartFile: () => (T$.MapEntryOfString$MultipartFile = dart.constFn(core.MapEntry$(core.String, multipart_file.MultipartFile)))(),
    JSArrayOfMapEntryOfString$MultipartFile: () => (T$.JSArrayOfMapEntryOfString$MultipartFile = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$MultipartFile())))(),
    ListOfMultipartFile: () => (T$.ListOfMultipartFile = dart.constFn(core.List$(multipart_file.MultipartFile)))(),
    MultipartFileToMapEntryOfString$MultipartFile: () => (T$.MultipartFileToMapEntryOfString$MultipartFile = dart.constFn(dart.fnType(T$.MapEntryOfString$MultipartFile(), [multipart_file.MultipartFile])))(),
    dynamicToMapEntryOfString$String: () => (T$.dynamicToMapEntryOfString$String = dart.constFn(dart.fnType(T$.MapEntryOfString$String(), [dart.dynamic])))(),
    intToint: () => (T$.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    _AsyncStarImplOfListOfint: () => (T$._AsyncStarImplOfListOfint = dart.constFn(async._AsyncStarImpl$(T$.ListOfint())))(),
    String__Tovoid: () => (T$.String__Tovoid = dart.constFn(dart.fnType(dart.void, [core.String], {isError: core.bool}, {})))(),
    Fn__Tovoid: () => (T$.Fn__Tovoid = dart.constFn(dart.gFnType(S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      return [dart.void, [__t$VoidToS()], {fenix: core.bool, tag: T$.StringN()}, {}];
    }, S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      return [T$.ObjectN()];
    })))(),
    Fn__ToFutureOfS: () => (T$.Fn__ToFutureOfS = dart.constFn(dart.gFnType(S => {
      var __t$FutureOfS = () => (__t$FutureOfS = dart.constFn(async.Future$(S)))();
      var __t$VoidToFutureOfS = () => (__t$VoidToFutureOfS = dart.constFn(dart.fnType(__t$FutureOfS(), [])))();
      return [__t$FutureOfS(), [__t$VoidToFutureOfS()], {permanent: core.bool, tag: T$.StringN()}, {}];
    }, S => {
      var __t$FutureOfS = () => (__t$FutureOfS = dart.constFn(async.Future$(S)))();
      var __t$VoidToFutureOfS = () => (__t$VoidToFutureOfS = dart.constFn(dart.fnType(__t$FutureOfS(), [])))();
      return [T$.ObjectN()];
    })))(),
    Fn__Tovoid$1: () => (T$.Fn__Tovoid$1 = dart.constFn(dart.gFnType(S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      return [dart.void, [__t$VoidToS()], {permanent: core.bool, tag: T$.StringN()}, {}];
    }, S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      return [T$.ObjectN()];
    })))(),
    __ToS: () => (T$.__ToS = dart.constFn(dart.gFnType(S => [S, [], {tag: T$.StringN()}, {}], S => [T$.ObjectN()])))(),
    S__ToS: () => (T$.S__ToS = dart.constFn(dart.gFnType(S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      var __t$VoidToNS = () => (__t$VoidToNS = dart.constFn(dart.nullable(__t$VoidToS())))();
      return [S, [S], {builder: __t$VoidToNS(), permanent: core.bool, tag: T$.StringN()}, {}];
    }, S => {
      var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
      var __t$VoidToNS = () => (__t$VoidToNS = dart.constFn(dart.nullable(__t$VoidToS())))();
      return [T$.ObjectN()];
    })))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    __ToFutureOfbool: () => (T$.__ToFutureOfbool = dart.constFn(dart.gFnType(S => [T$.FutureOfbool(), [], {force: core.bool, tag: T$.StringN()}, {}], S => [T$.ObjectN()])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    __ToFutureOfvoid: () => (T$.__ToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [], {force: core.bool}, {})))(),
    __Tovoid$1: () => (T$.__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [], {force: core.bool}, {})))(),
    __Tovoid$2: () => (T$.__Tovoid$2 = dart.constFn(dart.gFnType(S => [dart.void, [], {force: core.bool, key: T$.StringN(), tag: T$.StringN()}, {}], S => [T$.ObjectN()])))(),
    __Tobool: () => (T$.__Tobool = dart.constFn(dart.gFnType(S => [core.bool, [], {tag: T$.StringN()}, {}], S => [T$.ObjectN()])))(),
    P__Tovoid: () => (T$.P__Tovoid = dart.constFn(dart.gFnType(P => [dart.void, [P], {tag: T$.StringN()}, {}], P => [T$.ObjectN()])))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    Fn__Tovoid$2: () => (T$.Fn__Tovoid$2 = dart.constFn(dart.gFnType(P => {
      var __t$VoidToP = () => (__t$VoidToP = dart.constFn(dart.fnType(P, [])))();
      return [dart.void, [__t$VoidToP()], {fenix: T$.boolN(), tag: T$.StringN()}, {}];
    }, P => {
      var __t$VoidToP = () => (__t$VoidToP = dart.constFn(dart.fnType(P, [])))();
      return [T$.ObjectN()];
    })))(),
    StringAnd_InstanceBuilderFactoryTovoid: () => (T$.StringAnd_InstanceBuilderFactoryTovoid = dart.constFn(dart.fnType(dart.void, [core.String, get_instance$._InstanceBuilderFactory])))(),
    IdentityMapOfString$_InstanceBuilderFactory: () => (T$.IdentityMapOfString$_InstanceBuilderFactory = dart.constFn(_js_helper.IdentityMap$(core.String, get_instance$._InstanceBuilderFactory)))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToSemantics: () => (T$.BuildContextAndWidgetNToSemantics = dart.constFn(dart.fnType(basic.Semantics, [framework.BuildContext, T$.WidgetN()])))(),
    BuildContextToWidget: () => (T$.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    ClipN: () => (T$.ClipN = dart.constFn(dart.nullable(ui.Clip)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    DurationN: () => (T$.DurationN = dart.constFn(dart.nullable(core.Duration)))(),
    RouteSettingsN: () => (T$.RouteSettingsN = dart.constFn(dart.nullable(navigator.RouteSettings)))(),
    ShapeBorderN: () => (T$.ShapeBorderN = dart.constFn(dart.nullable(borders.ShapeBorder)))(),
    Widget__ToFutureOfTN: () => (T$.Widget__ToFutureOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [__t$FutureOfTN(), [framework.Widget], {backgroundColor: T$.ColorN(), barrierColor: T$.ColorN(), clipBehavior: T$.ClipN(), elevation: T$.doubleN(), enableDrag: core.bool, enterBottomSheetDuration: T$.DurationN(), exitBottomSheetDuration: T$.DurationN(), ignoreSafeArea: T$.boolN(), isDismissible: core.bool, isScrollControlled: core.bool, persistent: core.bool, settings: T$.RouteSettingsN(), shape: T$.ShapeBorderN(), useRootNavigator: core.bool}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [T$.ObjectN()];
    })))(),
    BuildContextToTheme: () => (T$.BuildContextToTheme = dart.constFn(dart.fnType(theme$.Theme, [framework.BuildContext])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation.Animation$(core.double)))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble()])))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToFadeTransition: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToFadeTransition = dart.constFn(dart.fnType(transitions.FadeTransition, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble(), framework.Widget])))(),
    GlobalKeyOfNavigatorState: () => (T$.GlobalKeyOfNavigatorState = dart.constFn(framework.GlobalKey$(navigator.NavigatorState)))(),
    GlobalKeyNOfNavigatorState: () => (T$.GlobalKeyNOfNavigatorState = dart.constFn(dart.nullable(T$.GlobalKeyOfNavigatorState())))(),
    CurveN: () => (T$.CurveN = dart.constFn(dart.nullable(curves.Curve)))(),
    Widget__ToFutureOfTN$1: () => (T$.Widget__ToFutureOfTN$1 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [__t$FutureOfTN(), [framework.Widget], {arguments: T$.ObjectN(), barrierColor: T$.ColorN(), barrierDismissible: core.bool, name: T$.StringN(), navigatorKey: T$.GlobalKeyNOfNavigatorState(), routeSettings: T$.RouteSettingsN(), transitionCurve: T$.CurveN(), transitionDuration: T$.DurationN(), useSafeArea: core.bool}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [T$.ObjectN()];
    })))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AnimationOfdouble(), T$.AnimationOfdouble(), framework.Widget])))(),
    BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToNWidget: () => (T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToNWidget = dart.constFn(dart.nullable(T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToWidget())))(),
    __ToFutureOfTN: () => (T$.__ToFutureOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [__t$FutureOfTN(), [], {barrierColor: ui.Color, barrierDismissible: core.bool, barrierLabel: T$.StringN(), navigatorKey: T$.GlobalKeyNOfNavigatorState(), pageBuilder: T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget(), routeSettings: T$.RouteSettingsN(), transitionBuilder: T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToNWidget(), transitionDuration: core.Duration}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [T$.ObjectN()];
    })))(),
    ListOfWidget: () => (T$.ListOfWidget = dart.constFn(core.List$(framework.Widget)))(),
    ListNOfWidget: () => (T$.ListNOfWidget = dart.constFn(dart.nullable(T$.ListOfWidget())))(),
    EdgeInsetsGeometryN: () => (T$.EdgeInsetsGeometryN = dart.constFn(dart.nullable(edge_insets.EdgeInsetsGeometry)))(),
    TextStyleN: () => (T$.TextStyleN = dart.constFn(dart.nullable(text_style.TextStyle)))(),
    VoidToNvoid: () => (T$.VoidToNvoid = dart.constFn(dart.nullable(T$.VoidTovoid())))(),
    VoidToFutureOfbool: () => (T$.VoidToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [])))(),
    VoidToNFutureOfbool: () => (T$.VoidToNFutureOfbool = dart.constFn(dart.nullable(T$.VoidToFutureOfbool())))(),
    __ToFutureOfTN$1: () => (T$.__ToFutureOfTN$1 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [__t$FutureOfTN(), [], {actions: T$.ListNOfWidget(), backgroundColor: T$.ColorN(), barrierDismissible: core.bool, buttonColor: T$.ColorN(), cancel: T$.WidgetN(), cancelTextColor: T$.ColorN(), confirm: T$.WidgetN(), confirmTextColor: T$.ColorN(), content: T$.WidgetN(), contentPadding: T$.EdgeInsetsGeometryN(), custom: T$.WidgetN(), middleText: core.String, middleTextStyle: T$.TextStyleN(), navigatorKey: T$.GlobalKeyNOfNavigatorState(), onCancel: T$.VoidToNvoid(), onConfirm: T$.VoidToNvoid(), onCustom: T$.VoidToNvoid(), onWillPop: T$.VoidToNFutureOfbool(), radius: core.double, textCancel: T$.StringN(), textConfirm: T$.StringN(), textCustom: T$.StringN(), title: core.String, titlePadding: T$.EdgeInsetsGeometryN(), titleStyle: T$.TextStyleN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      return [T$.ObjectN()];
    })))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    GradientN: () => (T$.GradientN = dart.constFn(dart.nullable(gradient.Gradient)))(),
    ListOfBoxShadow: () => (T$.ListOfBoxShadow = dart.constFn(core.List$(box_shadow.BoxShadow)))(),
    ListNOfBoxShadow: () => (T$.ListNOfBoxShadow = dart.constFn(dart.nullable(T$.ListOfBoxShadow())))(),
    DismissDirectionN: () => (T$.DismissDirectionN = dart.constFn(dart.nullable(dismissible.DismissDirection)))(),
    GetSnackBarTovoid: () => (T$.GetSnackBarTovoid = dart.constFn(dart.fnType(dart.void, [snackbar.GetSnackBar])))(),
    GetSnackBarToNvoid: () => (T$.GetSnackBarToNvoid = dart.constFn(dart.nullable(T$.GetSnackBarTovoid())))(),
    AnimationControllerN: () => (T$.AnimationControllerN = dart.constFn(dart.nullable(animation_controller.AnimationController)))(),
    AnimationOfColor: () => (T$.AnimationOfColor = dart.constFn(animation.Animation$(ui.Color)))(),
    AnimationNOfColor: () => (T$.AnimationNOfColor = dart.constFn(dart.nullable(T$.AnimationOfColor())))(),
    SnackbarStatusN: () => (T$.SnackbarStatusN = dart.constFn(dart.nullable(snackbar.SnackbarStatus)))(),
    SnackbarStatusNTovoid: () => (T$.SnackbarStatusNTovoid = dart.constFn(dart.fnType(dart.void, [T$.SnackbarStatusN()])))(),
    SnackbarStatusNToNvoid: () => (T$.SnackbarStatusNToNvoid = dart.constFn(dart.nullable(T$.SnackbarStatusNTovoid())))(),
    FormN: () => (T$.FormN = dart.constFn(dart.nullable(form.Form)))(),
    __ToSnackbarController: () => (T$.__ToSnackbarController = dart.constFn(dart.fnType(snackbar_controller.SnackbarController, [], {animationDuration: core.Duration, backgroundColor: ui.Color, backgroundGradient: T$.GradientN(), barBlur: core.double, borderColor: T$.ColorN(), borderRadius: core.double, borderWidth: core.double, boxShadows: T$.ListNOfBoxShadow(), dismissDirection: T$.DismissDirectionN(), duration: T$.DurationN(), forwardAnimationCurve: curves.Curve, icon: T$.WidgetN(), instantInit: core.bool, isDismissible: core.bool, leftBarIndicatorColor: T$.ColorN(), mainButton: T$.WidgetN(), margin: edge_insets.EdgeInsets, maxWidth: T$.doubleN(), message: T$.StringN(), messageText: T$.WidgetN(), onTap: T$.GetSnackBarToNvoid(), overlayBlur: core.double, overlayColor: T$.ColorN(), padding: edge_insets.EdgeInsets, progressIndicatorBackgroundColor: T$.ColorN(), progressIndicatorController: T$.AnimationControllerN(), progressIndicatorValueColor: T$.AnimationNOfColor(), reverseAnimationCurve: curves.Curve, shouldIconPulse: core.bool, showProgressIndicator: core.bool, snackPosition: snackbar.SnackPosition, snackStyle: snackbar.SnackStyle, snackbarStatus: T$.SnackbarStatusNToNvoid(), title: T$.StringN(), titleText: T$.WidgetN(), userInputForm: T$.FormN()}, {})))(),
    GetSnackBarToSnackbarController: () => (T$.GetSnackBarToSnackbarController = dart.constFn(dart.fnType(snackbar_controller.SnackbarController, [snackbar.GetSnackBar])))(),
    TextButtonN: () => (T$.TextButtonN = dart.constFn(dart.nullable(text_button.TextButton)))(),
    EdgeInsetsN: () => (T$.EdgeInsetsN = dart.constFn(dart.nullable(edge_insets.EdgeInsets)))(),
    SnackPositionN: () => (T$.SnackPositionN = dart.constFn(dart.nullable(snackbar.SnackPosition)))(),
    SnackStyleN: () => (T$.SnackStyleN = dart.constFn(dart.nullable(snackbar.SnackStyle)))(),
    StringAndString__ToSnackbarController: () => (T$.StringAndString__ToSnackbarController = dart.constFn(dart.fnType(snackbar_controller.SnackbarController, [core.String, core.String], {animationDuration: T$.DurationN(), backgroundColor: T$.ColorN(), backgroundGradient: T$.GradientN(), barBlur: T$.doubleN(), borderColor: T$.ColorN(), borderRadius: T$.doubleN(), borderWidth: T$.doubleN(), boxShadows: T$.ListNOfBoxShadow(), colorText: T$.ColorN(), dismissDirection: T$.DismissDirectionN(), duration: T$.DurationN(), forwardAnimationCurve: T$.CurveN(), icon: T$.WidgetN(), instantInit: core.bool, isDismissible: T$.boolN(), leftBarIndicatorColor: T$.ColorN(), mainButton: T$.TextButtonN(), margin: T$.EdgeInsetsN(), maxWidth: T$.doubleN(), messageText: T$.WidgetN(), onTap: T$.GetSnackBarToNvoid(), overlayBlur: T$.doubleN(), overlayColor: T$.ColorN(), padding: T$.EdgeInsetsN(), progressIndicatorBackgroundColor: T$.ColorN(), progressIndicatorController: T$.AnimationControllerN(), progressIndicatorValueColor: T$.AnimationNOfColor(), reverseAnimationCurve: T$.CurveN(), shouldIconPulse: T$.boolN(), showProgressIndicator: T$.boolN(), snackPosition: T$.SnackPositionN(), snackStyle: T$.SnackStyleN(), snackbarStatus: T$.SnackbarStatusNToNvoid(), titleText: T$.WidgetN(), userInputForm: T$.FormN()}, {})))(),
    BindingsN: () => (T$.BindingsN = dart.constFn(dart.nullable(bindings_interface.Bindings)))(),
    BuildContextTodouble: () => (T$.BuildContextTodouble = dart.constFn(dart.fnType(core.double, [framework.BuildContext])))(),
    BuildContextToNdouble: () => (T$.BuildContextToNdouble = dart.constFn(dart.nullable(T$.BuildContextTodouble())))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    TransitionN: () => (T$.TransitionN = dart.constFn(dart.nullable(transitions_type.Transition)))(),
    dynamic__ToFutureNOfTN: () => (T$.dynamic__ToFutureNOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [dart.dynamic], {arguments: dart.dynamic, binding: T$.BindingsN(), curve: T$.CurveN(), duration: T$.DurationN(), fullscreenDialog: core.bool, gestureWidth: T$.BuildContextToNdouble(), id: T$.intN(), opaque: T$.boolN(), popGesture: T$.boolN(), preventDuplicates: core.bool, routeName: T$.StringN(), transition: T$.TransitionN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    VoidToWidget: () => (T$.VoidToWidget = dart.constFn(dart.fnType(framework.Widget, [])))(),
    dynamicAndStringToFn: () => (T$.dynamicAndStringToFn = dart.constFn(dart.fnType(T$.VoidToWidget(), [dart.dynamic, core.String])))(),
    MapOfString$String: () => (T$.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    MapNOfString$String: () => (T$.MapNOfString$String = dart.constFn(dart.nullable(T$.MapOfString$String())))(),
    String__ToFutureNOfTN: () => (T$.String__ToFutureNOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [core.String], {arguments: dart.dynamic, id: T$.intN(), parameters: T$.MapNOfString$String(), preventDuplicates: core.bool}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    RouteTobool: () => (T$.RouteTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route])))(),
    Fn__Tovoid$3: () => (T$.Fn__Tovoid$3 = dart.constFn(dart.fnType(dart.void, [T$.RouteTobool()], {id: T$.intN()}, {})))(),
    RouteOfTAndFn__ToFutureNOfTN: () => (T$.RouteOfTAndFn__ToFutureNOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      var __t$RouteOfT = () => (__t$RouteOfT = dart.constFn(navigator.Route$(T)))();
      return [__t$FutureNOfTN(), [__t$RouteOfT(), T$.RouteTobool()], {id: T$.intN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      var __t$RouteOfT = () => (__t$RouteOfT = dart.constFn(navigator.Route$(T)))();
      return [T$.ObjectN()];
    })))(),
    StringAndFn__ToFutureNOfTN: () => (T$.StringAndFn__ToFutureNOfTN = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [core.String, T$.RouteTobool()], {arguments: dart.dynamic, id: T$.intN(), parameters: T$.MapNOfString$String()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    String__ToFutureNOfTN$1: () => (T$.String__ToFutureNOfTN$1 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [core.String], {arguments: dart.dynamic, id: T$.intN(), parameters: T$.MapNOfString$String(), result: dart.dynamic}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    Route__Tovoid: () => (T$.Route__Tovoid = dart.constFn(dart.fnType(dart.void, [navigator.Route], {id: T$.intN()}, {})))(),
    RouteToNbool: () => (T$.RouteToNbool = dart.constFn(dart.nullable(T$.RouteTobool())))(),
    String__ToFutureNOfTN$2: () => (T$.String__ToFutureNOfTN$2 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [core.String], {arguments: dart.dynamic, id: T$.intN(), parameters: T$.MapNOfString$String(), predicate: T$.RouteToNbool()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    __Tovoid$3: () => (T$.__Tovoid$3 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [dart.void, [], {canPop: core.bool, closeOverlays: core.bool, id: T$.intN(), result: __t$TN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [T$.ObjectN()];
    })))(),
    intAndintNTovoid: () => (T$.intAndintNTovoid = dart.constFn(dart.fnType(dart.void, [core.int], [T$.intN()])))(),
    dynamic__ToFutureNOfTN$1: () => (T$.dynamic__ToFutureNOfTN$1 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [dart.dynamic], {arguments: dart.dynamic, binding: T$.BindingsN(), curve: T$.CurveN(), duration: T$.DurationN(), fullscreenDialog: core.bool, gestureWidth: T$.BuildContextToNdouble(), id: T$.intN(), opaque: core.bool, popGesture: T$.boolN(), preventDuplicates: core.bool, routeName: T$.StringN(), transition: T$.TransitionN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    dynamic__ToFutureNOfTN$2: () => (T$.dynamic__ToFutureNOfTN$2 = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [__t$FutureNOfTN(), [dart.dynamic], {arguments: dart.dynamic, binding: T$.BindingsN(), curve: T$.CurveN(), duration: T$.DurationN(), fullscreenDialog: core.bool, gestureWidth: T$.BuildContextToNdouble(), id: T$.intN(), opaque: core.bool, popGesture: T$.boolN(), predicate: T$.RouteToNbool(), routeName: T$.StringN(), transition: T$.TransitionN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      var __t$FutureOfTN = () => (__t$FutureOfTN = dart.constFn(async.Future$(__t$TN())))();
      var __t$FutureNOfTN = () => (__t$FutureNOfTN = dart.constFn(dart.nullable(__t$FutureOfTN())))();
      return [T$.ObjectN()];
    })))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    String__ToNvoid: () => (T$.String__ToNvoid = dart.constFn(dart.nullable(T$.String__Tovoid())))(),
    __Tovoid$4: () => (T$.__Tovoid$4 = dart.constFn(dart.fnType(dart.void, [], {defaultDurationTransition: T$.DurationN(), defaultGlobalState: T$.boolN(), defaultOpaqueRoute: T$.boolN(), defaultPopGesture: T$.boolN(), defaultTransition: T$.TransitionN(), enableLog: T$.boolN(), logWriterCallback: T$.String__ToNvoid()}, {})))(),
    LocaleToFutureOfvoid: () => (T$.LocaleToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [ui.Locale])))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ThemeDataTovoid: () => (T$.ThemeDataTovoid = dart.constFn(dart.fnType(dart.void, [theme_data.ThemeData])))(),
    ThemeModeTovoid: () => (T$.ThemeModeTovoid = dart.constFn(dart.fnType(dart.void, [app.ThemeMode])))(),
    GlobalKeyOfNavigatorStateToGlobalKeyNOfNavigatorState: () => (T$.GlobalKeyOfNavigatorStateToGlobalKeyNOfNavigatorState = dart.constFn(dart.fnType(T$.GlobalKeyNOfNavigatorState(), [T$.GlobalKeyOfNavigatorState()])))(),
    VoidToGlobalKeyOfNavigatorState: () => (T$.VoidToGlobalKeyOfNavigatorState = dart.constFn(dart.fnType(T$.GlobalKeyOfNavigatorState(), [])))(),
    dynamicToGlobalKeyNOfNavigatorState: () => (T$.dynamicToGlobalKeyNOfNavigatorState = dart.constFn(dart.fnType(T$.GlobalKeyNOfNavigatorState(), [dart.dynamic])))(),
    intNToGlobalKeyOfNavigatorState: () => (T$.intNToGlobalKeyOfNavigatorState = dart.constFn(dart.fnType(T$.GlobalKeyOfNavigatorState(), [T$.intN()])))(),
    ElementTovoid: () => (T$.ElementTovoid = dart.constFn(dart.fnType(dart.void, [framework.Element])))(),
    ListOfGetPage: () => (T$.ListOfGetPage = dart.constFn(core.List$(get_route.GetPage)))(),
    ListOfGetPageTovoid: () => (T$.ListOfGetPageTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfGetPage()])))(),
    GetPageTovoid: () => (T$.GetPageTovoid = dart.constFn(dart.fnType(dart.void, [get_route.GetPage])))(),
    VoidToTDelegateN: () => (T$.VoidToTDelegateN = dart.constFn(dart.gFnType((TDelegate, TPage) => {
      var __t$TDelegateN = () => (__t$TDelegateN = dart.constFn(dart.nullable(TDelegate)))();
      return [__t$TDelegateN(), []];
    }, (TDelegate, TPage) => {
      var __t$TDelegateN = () => (__t$TDelegateN = dart.constFn(dart.nullable(TDelegate)))();
      var __t$RouterDelegateOfTPage = () => (__t$RouterDelegateOfTPage = dart.constFn(router.RouterDelegate$(TPage)))();
      return [__t$RouterDelegateOfTPage(), T$.ObjectN()];
    })))(),
    __ToGetInformationParser: () => (T$.__ToGetInformationParser = dart.constFn(dart.fnType(get_information_parser.GetInformationParser, [], {initialRoute: core.String}, {})))(),
    ListOfNavigatorObserver: () => (T$.ListOfNavigatorObserver = dart.constFn(core.List$(navigator.NavigatorObserver)))(),
    ListNOfNavigatorObserver: () => (T$.ListNOfNavigatorObserver = dart.constFn(dart.nullable(T$.ListOfNavigatorObserver())))(),
    GetPageN: () => (T$.GetPageN = dart.constFn(dart.nullable(get_route.GetPage)))(),
    TransitionDelegateN: () => (T$.TransitionDelegateN = dart.constFn(dart.nullable(navigator.TransitionDelegate)))(),
    __ToGetDelegate: () => (T$.__ToGetDelegate = dart.constFn(dart.fnType(get_router_delegate.GetDelegate, [], {backButtonPopMode: get_router_delegate.PopMode, navigatorObservers: T$.ListNOfNavigatorObserver(), notFoundRoute: T$.GetPageN(), preventDuplicateHandlingMode: get_router_delegate.PreventDuplicateHandlingMode, transitionDelegate: T$.TransitionDelegateN()}, {})))(),
    BuildContextToOpacity: () => (T$.BuildContextToOpacity = dart.constFn(dart.fnType(basic.Opacity, [framework.BuildContext])))(),
    __ToFutureOfT: () => (T$.__ToFutureOfT = dart.constFn(dart.gFnType(T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$VoidToFutureOfT = () => (__t$VoidToFutureOfT = dart.constFn(dart.fnType(__t$FutureOfT(), [])))();
      return [__t$FutureOfT(), [], {asyncFunction: __t$VoidToFutureOfT(), loadingWidget: T$.WidgetN(), opacity: core.double, opacityColor: ui.Color}, {}];
    }, T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$VoidToFutureOfT = () => (__t$VoidToFutureOfT = dart.constFn(dart.fnType(__t$FutureOfT(), [])))();
      return [T$.ObjectN()];
    })))(),
    JSArrayOfGetPage: () => (T$.JSArrayOfGetPage = dart.constFn(_interceptors.JSArray$(get_route.GetPage)))(),
    GetPageTobool: () => (T$.GetPageTobool = dart.constFn(dart.fnType(core.bool, [get_route.GetPage])))(),
    SynchronousFutureOfGetNavConfig: () => (T$.SynchronousFutureOfGetNavConfig = dart.constFn(synchronous_future.SynchronousFuture$(get_nav_config.GetNavConfig)))(),
    JSArrayOfGetNavConfig: () => (T$.JSArrayOfGetNavConfig = dart.constFn(_interceptors.JSArray$(get_nav_config.GetNavConfig)))(),
    LinkedMapOfGetPage$Completer: () => (T$.LinkedMapOfGetPage$Completer = dart.constFn(_js_helper.LinkedMap$(get_route.GetPage, async.Completer)))(),
    VoidToScaffold: () => (T$.VoidToScaffold = dart.constFn(dart.fnType(scaffold.Scaffold, [])))(),
    JSArrayOfNavigatorObserver: () => (T$.JSArrayOfNavigatorObserver = dart.constFn(_interceptors.JSArray$(navigator.NavigatorObserver)))(),
    SynchronousFutureOfbool: () => (T$.SynchronousFutureOfbool = dart.constFn(synchronous_future.SynchronousFuture$(core.bool)))(),
    GetNavConfigToGetPage: () => (T$.GetNavConfigToGetPage = dart.constFn(dart.fnType(get_route.GetPage, [get_nav_config.GetNavConfig])))(),
    GetNavConfigN: () => (T$.GetNavConfigN = dart.constFn(dart.nullable(get_nav_config.GetNavConfig)))(),
    GetNavConfigNTobool: () => (T$.GetNavConfigNTobool = dart.constFn(dart.fnType(core.bool, [T$.GetNavConfigN()])))(),
    GetNavConfigTobool: () => (T$.GetNavConfigTobool = dart.constFn(dart.fnType(core.bool, [get_nav_config.GetNavConfig])))(),
    JSArrayOfVoidToNvoid: () => (T$.JSArrayOfVoidToNvoid = dart.constFn(_interceptors.JSArray$(T$.VoidToNvoid())))(),
    ListOfVoidTovoid: () => (T$.ListOfVoidTovoid = dart.constFn(core.List$(T$.VoidTovoid())))(),
    LinkedMapOfObjectN$ListOfVoidTovoid: () => (T$.LinkedMapOfObjectN$ListOfVoidTovoid = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ListOfVoidTovoid())))(),
    JSArrayOfVoidTovoid: () => (T$.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    RouteAnddynamicTobool: () => (T$.RouteAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [navigator.Route, dart.dynamic])))(),
    IterableOfGetPage: () => (T$.IterableOfGetPage = dart.constFn(core.Iterable$(get_route.GetPage)))(),
    GetNavConfigToIterableOfGetPage: () => (T$.GetNavConfigToIterableOfGetPage = dart.constFn(dart.fnType(T$.IterableOfGetPage(), [get_nav_config.GetNavConfig])))(),
    GetDelegateToGetPage: () => (T$.GetDelegateToGetPage = dart.constFn(dart.fnType(get_route.GetPage, [get_router_delegate.GetDelegate])))(),
    JSArrayOfGetPageN: () => (T$.JSArrayOfGetPageN = dart.constFn(_interceptors.JSArray$(T$.GetPageN())))(),
    IterableNOfGetPage: () => (T$.IterableNOfGetPage = dart.constFn(dart.nullable(T$.IterableOfGetPage())))(),
    BuildContextAndGetDelegateAndIterableNOfGetPageToWidget: () => (T$.BuildContextAndGetDelegateAndIterableNOfGetPageToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, get_router_delegate.GetDelegate, T$.IterableNOfGetPage()])))(),
    StringToIterableOfGetPage: () => (T$.StringToIterableOfGetPage = dart.constFn(dart.fnType(T$.IterableOfGetPage(), [core.String])))(),
    GetBuilderOfGetMaterialController: () => (T$.GetBuilderOfGetMaterialController = dart.constFn(get_state.GetBuilder$(root_controller.GetMaterialController)))(),
    GetBuilderStateOfGetMaterialController: () => (T$.GetBuilderStateOfGetMaterialController = dart.constFn(get_state.GetBuilderState$(root_controller.GetMaterialController)))(),
    GetBuilderStateOfGetMaterialControllerTovoid: () => (T$.GetBuilderStateOfGetMaterialControllerTovoid = dart.constFn(dart.fnType(dart.void, [T$.GetBuilderStateOfGetMaterialController()])))(),
    GetMaterialControllerToCupertinoApp: () => (T$.GetMaterialControllerToCupertinoApp = dart.constFn(dart.fnType(app$.CupertinoApp, [root_controller.GetMaterialController])))(),
    JSArrayOfRoute: () => (T$.JSArrayOfRoute = dart.constFn(_interceptors.JSArray$(navigator.Route)))(),
    GetMaterialControllerToMaterialApp: () => (T$.GetMaterialControllerToMaterialApp = dart.constFn(dart.fnType(app.MaterialApp, [root_controller.GetMaterialController])))(),
    GlobalKeyOfScaffoldMessengerState: () => (T$.GlobalKeyOfScaffoldMessengerState = dart.constFn(framework.GlobalKey$(scaffold.ScaffoldMessengerState)))(),
    LinkedMapOfdynamic$GlobalKeyOfNavigatorState: () => (T$.LinkedMapOfdynamic$GlobalKeyOfNavigatorState = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, T$.GlobalKeyOfNavigatorState())))(),
    JSArrayOfBindings: () => (T$.JSArrayOfBindings = dart.constFn(_interceptors.JSArray$(bindings_interface.Bindings)))(),
    ValueNotifierOfStringN: () => (T$.ValueNotifierOfStringN = dart.constFn(change_notifier.ValueNotifier$(T$.StringN())))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    JSArrayOfStringN: () => (T$.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T$.StringN())))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    RoutingTovoid: () => (T$.RoutingTovoid = dart.constFn(dart.fnType(dart.void, [route_observer.Routing])))(),
    SynchronousFutureOfGetNavConfigN: () => (T$.SynchronousFutureOfGetNavConfigN = dart.constFn(synchronous_future.SynchronousFuture$(T$.GetNavConfigN())))(),
    JSArrayOfGetMiddleware: () => (T$.JSArrayOfGetMiddleware = dart.constFn(_interceptors.JSArray$(route_middleware.GetMiddleware)))(),
    GetMiddlewareAndGetMiddlewareToint: () => (T$.GetMiddlewareAndGetMiddlewareToint = dart.constFn(dart.fnType(core.int, [route_middleware.GetMiddleware, route_middleware.GetMiddleware])))(),
    GetMiddlewareTovoid: () => (T$.GetMiddlewareTovoid = dart.constFn(dart.fnType(dart.void, [route_middleware.GetMiddleware])))(),
    CompleterOfSize: () => (T$.CompleterOfSize = dart.constFn(async.Completer$(ui.Size)))(),
    StateOfStatefulWidget: () => (T$.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T$.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T$.StateOfStatefulWidget())))(),
    FutureBuilderOfSize: () => (T$.FutureBuilderOfSize = dart.constFn(async$.FutureBuilder$(ui.Size)))(),
    AsyncSnapshotOfSize: () => (T$.AsyncSnapshotOfSize = dart.constFn(async$.AsyncSnapshot$(ui.Size)))(),
    BuildContextAndAsyncSnapshotOfSizeToWidget: () => (T$.BuildContextAndAsyncSnapshotOfSizeToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.AsyncSnapshotOfSize()])))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    AnimationStatusTovoid: () => (T$.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation.AnimationStatus])))(),
    GlobalKeyOfGetSnackBarState: () => (T$.GlobalKeyOfGetSnackBarState = dart.constFn(framework.GlobalKey$(snackbar.GetSnackBarState)))(),
    JSArrayOfOverlayEntry: () => (T$.JSArrayOfOverlayEntry = dart.constFn(_interceptors.JSArray$(overlay.OverlayEntry)))(),
    BuildContextAndWidgetNToBackdropFilter: () => (T$.BuildContextAndWidgetNToBackdropFilter = dart.constFn(dart.fnType(basic.BackdropFilter, [framework.BuildContext, T$.WidgetN()])))(),
    BuildContextToGestureDetector: () => (T$.BuildContextToGestureDetector = dart.constFn(dart.fnType(gesture_detector.GestureDetector, [framework.BuildContext])))(),
    BuildContextToSemantics: () => (T$.BuildContextToSemantics = dart.constFn(dart.fnType(basic.Semantics, [framework.BuildContext])))(),
    FutureOfboolN: () => (T$.FutureOfboolN = dart.constFn(async.Future$(T$.boolN())))(),
    DismissDirectionToFutureOfboolN: () => (T$.DismissDirectionToFutureOfboolN = dart.constFn(dart.fnType(T$.FutureOfboolN(), [dismissible.DismissDirection])))(),
    DismissDirectionTovoid: () => (T$.DismissDirectionTovoid = dart.constFn(dart.fnType(dart.void, [dismissible.DismissDirection])))(),
    JSArrayOfSnackbarController: () => (T$.JSArrayOfSnackbarController = dart.constFn(_interceptors.JSArray$(snackbar_controller.SnackbarController)))(),
    JSArrayOfStreamSubscription: () => (T$.JSArrayOfStreamSubscription = dart.constFn(_interceptors.JSArray$(async.StreamSubscription)))(),
    ListOfStreamSubscription: () => (T$.ListOfStreamSubscription = dart.constFn(core.List$(async.StreamSubscription)))(),
    LinkedMapOfGetStream$ListOfStreamSubscription: () => (T$.LinkedMapOfGetStream$ListOfStreamSubscription = dart.constFn(_js_helper.LinkedMap$(rx_stream.GetStream, T$.ListOfStreamSubscription())))(),
    GetStreamAndListOfStreamSubscriptionTovoid: () => (T$.GetStreamAndListOfStreamSubscriptionTovoid = dart.constFn(dart.fnType(dart.void, [rx_stream.GetStream, T$.ListOfStreamSubscription()])))(),
    RxOfbool: () => (T$.RxOfbool = dart.constFn(rx_types.Rx$(core.bool)))(),
    VoidToRxOfbool: () => (T$.VoidToRxOfbool = dart.constFn(dart.fnType(T$.RxOfbool(), [])))(),
    RxOfboolN: () => (T$.RxOfboolN = dart.constFn(rx_types.Rx$(T$.boolN())))(),
    RxNOfboolN: () => (T$.RxNOfboolN = dart.constFn(dart.nullable(T$.RxOfboolN())))(),
    VoidToRxNOfboolN: () => (T$.VoidToRxNOfboolN = dart.constFn(dart.fnType(T$.RxNOfboolN(), [])))(),
    numTonum: () => (T$.numTonum = dart.constFn(dart.fnType(core.num, [core.num])))(),
    VoidTonum: () => (T$.VoidTonum = dart.constFn(dart.fnType(core.num, [])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    VoidTodouble: () => (T$.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    numAndnumTonum: () => (T$.numAndnumTonum = dart.constFn(dart.fnType(core.num, [core.num, core.num])))(),
    intToString: () => (T$.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    intNToString: () => (T$.intNToString = dart.constFn(dart.fnType(core.String, [], [T$.intN()])))(),
    numN: () => (T$.numN = dart.constFn(dart.nullable(core.num)))(),
    numTonumN: () => (T$.numTonumN = dart.constFn(dart.fnType(T$.numN(), [core.num])))(),
    VoidTonumN: () => (T$.VoidTonumN = dart.constFn(dart.fnType(T$.numN(), [])))(),
    VoidTointN: () => (T$.VoidTointN = dart.constFn(dart.fnType(T$.intN(), [])))(),
    VoidTodoubleN: () => (T$.VoidTodoubleN = dart.constFn(dart.fnType(T$.doubleN(), [])))(),
    numAndnumTonumN: () => (T$.numAndnumTonumN = dart.constFn(dart.fnType(T$.numN(), [core.num, core.num])))(),
    intToStringN: () => (T$.intToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.int])))(),
    intNToStringN: () => (T$.intNToStringN = dart.constFn(dart.fnType(T$.StringN(), [], [T$.intN()])))(),
    intAndintToint: () => (T$.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    intAndintTointN: () => (T$.intAndintTointN = dart.constFn(dart.fnType(T$.intN(), [core.int, core.int])))(),
    intTointN: () => (T$.intTointN = dart.constFn(dart.fnType(T$.intN(), [core.int])))(),
    StringToint: () => (T$.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    PatternAndintTobool: () => (T$.PatternAndintTobool = dart.constFn(dart.fnType(core.bool, [core.Pattern], [core.int])))(),
    PatternAndintToint: () => (T$.PatternAndintToint = dart.constFn(dart.fnType(core.int, [core.Pattern], [core.int])))(),
    PatternAndintNToint: () => (T$.PatternAndintNToint = dart.constFn(dart.fnType(core.int, [core.Pattern], [T$.intN()])))(),
    intAndintNToString: () => (T$.intAndintNToString = dart.constFn(dart.fnType(core.String, [core.int], [T$.intN()])))(),
    intAndStringToString: () => (T$.intAndStringToString = dart.constFn(dart.fnType(core.String, [core.int], [core.String])))(),
    PatternAndStringToString: () => (T$.PatternAndStringToString = dart.constFn(dart.fnType(core.String, [core.Pattern, core.String])))(),
    PatternToListOfString: () => (T$.PatternToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.Pattern])))(),
    IterableOfMatch: () => (T$.IterableOfMatch = dart.constFn(core.Iterable$(core.Match)))(),
    StringAndintToIterableOfMatch: () => (T$.StringAndintToIterableOfMatch = dart.constFn(dart.fnType(T$.IterableOfMatch(), [core.String], [core.int])))(),
    MatchN: () => (T$.MatchN = dart.constFn(dart.nullable(core.Match)))(),
    StringAndintToMatchN: () => (T$.StringAndintToMatchN = dart.constFn(dart.fnType(T$.MatchN(), [core.String], [core.int])))(),
    StringTointN: () => (T$.StringTointN = dart.constFn(dart.fnType(T$.intN(), [core.String])))(),
    StringToboolN: () => (T$.StringToboolN = dart.constFn(dart.fnType(T$.boolN(), [core.String])))(),
    PatternAndintToboolN: () => (T$.PatternAndintToboolN = dart.constFn(dart.fnType(T$.boolN(), [core.Pattern], [core.int])))(),
    PatternAndintTointN: () => (T$.PatternAndintTointN = dart.constFn(dart.fnType(T$.intN(), [core.Pattern], [core.int])))(),
    PatternAndintNTointN: () => (T$.PatternAndintNTointN = dart.constFn(dart.fnType(T$.intN(), [core.Pattern], [T$.intN()])))(),
    intAndintNToStringN: () => (T$.intAndintNToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.int], [T$.intN()])))(),
    intAndStringToStringN: () => (T$.intAndStringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.int], [core.String])))(),
    PatternAndStringToStringN: () => (T$.PatternAndStringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.Pattern, core.String])))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    PatternToListNOfString: () => (T$.PatternToListNOfString = dart.constFn(dart.fnType(T$.ListNOfString(), [core.Pattern])))(),
    IterableNOfMatch: () => (T$.IterableNOfMatch = dart.constFn(dart.nullable(T$.IterableOfMatch())))(),
    StringAndintToIterableNOfMatch: () => (T$.StringAndintToIterableNOfMatch = dart.constFn(dart.fnType(T$.IterableNOfMatch(), [core.String], [core.int])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    DiagnosticsPropertyOfString: () => (T$.DiagnosticsPropertyOfString = dart.constFn(diagnostics.DiagnosticsProperty$(core.String)))(),
    GetXOfDisposableInterface: () => (T$.GetXOfDisposableInterface = dart.constFn(rx_getx_widget.GetX$(rx_disposable.DisposableInterface)))(),
    StringNToWidget: () => (T$.StringNToWidget = dart.constFn(dart.fnType(framework.Widget, [T$.StringN()])))(),
    StringNToNWidget: () => (T$.StringNToNWidget = dart.constFn(dart.nullable(T$.StringNToWidget())))(),
    ObjectFlagPropertyOfFunction: () => (T$.ObjectFlagPropertyOfFunction = dart.constFn(diagnostics.ObjectFlagProperty$(core.Function)))(),
    JSArrayOfDiagnosticsNode: () => (T$.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    LinkedHashSetOf_WidgetTicker: () => (T$.LinkedHashSetOf_WidgetTicker = dart.constFn(collection.LinkedHashSet$(rx_ticket_provider_mixin._WidgetTicker)))(),
    ExpandoOfGetLifeCycleBase: () => (T$.ExpandoOfGetLifeCycleBase = dart.constFn(core.Expando$(lifecycle.GetLifeCycleBase)))(),
    GetBuilderOfGetxController: () => (T$.GetBuilderOfGetxController = dart.constFn(get_state.GetBuilder$(get_controllers.GetxController)))(),
    ChangeNotifierN: () => (T$.ChangeNotifierN = dart.constFn(dart.nullable(change_notifier.ChangeNotifier)))(),
    StreamControllerN: () => (T$.StreamControllerN = dart.constFn(dart.nullable(async.StreamController)))(),
    StringToNint: () => (T$.StringToNint = dart.constFn(dart.nullable(T$.StringToint())))(),
    String__Toint: () => (T$.String__Toint = dart.constFn(dart.fnType(core.int, [core.String], {onError: T$.StringToNint(), radix: T$.intN()}, {})))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    StringToStringN: () => (T$.StringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.String])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    LinkedHashSetOfString: () => (T$.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    JSArrayOf_Item: () => (T$.JSArrayOf_Item = dart.constFn(_interceptors.JSArray$(get_queue._Item)))(),
    LinkedHashMapOfString$String: () => (T$.LinkedHashMapOfString$String = dart.constFn(collection.LinkedHashMap$(core.String, core.String)))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    CompleterOfUint8List: () => (T$.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    ListOfintTovoid: () => (T$.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint()])))(),
    FutureOfUint8List: () => (T$.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    VoidToFutureOfUint8List: () => (T$.VoidToFutureOfUint8List = dart.constFn(dart.fnType(T$.FutureOfUint8List(), [])))(),
    FutureOfString: () => (T$.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    EncodingToFutureOfString: () => (T$.EncodingToFutureOfString = dart.constFn(dart.fnType(T$.FutureOfString(), [], [convert.Encoding])))(),
    LinkedHashSetOfHttpRequest: () => (T$.LinkedHashSetOfHttpRequest = dart.constFn(collection.LinkedHashSet$(html.HttpRequest)))(),
    BlobN: () => (T$.BlobN = dart.constFn(dart.nullable(html.Blob)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    ProgressEventToFutureOfNull: () => (T$.ProgressEventToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [html.ProgressEvent])))(),
    ProgressEventToNull: () => (T$.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    JSArrayOfRequestToFutureOrOfRequest: () => (T$.JSArrayOfRequestToFutureOrOfRequest = dart.constFn(_interceptors.JSArray$(T$.RequestToFutureOrOfRequest())))(),
    RequestAndResponseToFutureOr: () => (T$.RequestAndResponseToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [request$.Request, response$.Response])))(),
    JSArrayOfRequestAndResponseToFutureOr: () => (T$.JSArrayOfRequestAndResponseToFutureOr = dart.constFn(_interceptors.JSArray$(T$.RequestAndResponseToFutureOr())))(),
    _HashSetOfFunction: () => (T$._HashSetOfFunction = dart.constFn(collection._HashSet$(core.Function)))(),
    RouteN: () => (T$.RouteN = dart.constFn(dart.nullable(navigator.Route)))(),
    LinkedMapOfRouteN$ListOfString: () => (T$.LinkedMapOfRouteN$ListOfString = dart.constFn(_js_helper.LinkedMap$(T$.RouteN(), T$.ListOfString())))(),
    HashSetOfFunction: () => (T$.HashSetOfFunction = dart.constFn(collection.HashSet$(core.Function)))(),
    LinkedMapOfRouteN$HashSetOfFunction: () => (T$.LinkedMapOfRouteN$HashSetOfFunction = dart.constFn(_js_helper.LinkedMap$(T$.RouteN(), T$.HashSetOfFunction())))(),
    MapEntryOfString$GetPageN: () => (T$.MapEntryOfString$GetPageN = dart.constFn(core.MapEntry$(core.String, T$.GetPageN())))(),
    StringToMapEntryOfString$GetPageN: () => (T$.StringToMapEntryOfString$GetPageN = dart.constFn(dart.fnType(T$.MapEntryOfString$GetPageN(), [core.String])))(),
    MapEntryOfString$GetPageNTobool: () => (T$.MapEntryOfString$GetPageNTobool = dart.constFn(dart.fnType(core.bool, [T$.MapEntryOfString$GetPageN()])))(),
    MapEntryOfString$GetPage: () => (T$.MapEntryOfString$GetPage = dart.constFn(core.MapEntry$(core.String, get_route.GetPage)))(),
    MapEntryOfString$GetPageNToMapEntryOfString$GetPage: () => (T$.MapEntryOfString$GetPageNToMapEntryOfString$GetPage = dart.constFn(dart.fnType(T$.MapEntryOfString$GetPage(), [T$.MapEntryOfString$GetPageN()])))(),
    MapEntryOfString$GetPageToGetPage: () => (T$.MapEntryOfString$GetPageToGetPage = dart.constFn(dart.fnType(get_route.GetPage, [T$.MapEntryOfString$GetPage()])))(),
    ListOfGetMiddleware: () => (T$.ListOfGetMiddleware = dart.constFn(core.List$(route_middleware.GetMiddleware)))(),
    __Todouble: () => (T$.__Todouble = dart.constFn(dart.fnType(core.double, [], {dividedBy: core.double, reducedBy: core.double}, {})))(),
    __Todouble$1: () => (T$.__Todouble$1 = dart.constFn(dart.fnType(core.double, [], {dividedBy: core.double, reducedByH: core.double, reducedByW: core.double}, {})))(),
    __ToT: () => (T$.__ToT = dart.constFn(dart.gFnType(T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [T, [], {desktop: __t$TN(), mobile: __t$TN(), tablet: __t$TN(), watch: __t$TN()}, {}];
    }, T => {
      var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
      return [T$.ObjectN()];
    })))(),
    intTodouble: () => (T$.intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))(),
    VoidToFutureOr: () => (T$.VoidToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    VoidToNFutureOr: () => (T$.VoidToNFutureOr = dart.constFn(dart.nullable(T$.VoidToFutureOr())))(),
    FnToFuture: () => (T$.FnToFuture = dart.constFn(dart.fnType(async.Future, [], [T$.VoidToNFutureOr()])))(),
    StringAnddynamicAndString__Tovoid: () => (T$.StringAnddynamicAndString__Tovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic, core.String], {isError: core.bool}, {})))(),
    __Tovoid$5: () => (T$.__Tovoid$5 = dart.constFn(dart.fnType(dart.void, [], {info: core.String, logFunction: core.Function}, {})))(),
    __Tovoid$6: () => (T$.__Tovoid$6 = dart.constFn(dart.fnType(dart.void, [], {info: core.String, printFunction: core.Function}, {})))(),
    FnToFutureOfT: () => (T$.FnToFutureOfT = dart.constFn(dart.gFnType(T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$FutureOrOfT = () => (__t$FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
      var __t$VoidToFutureOrOfT = () => (__t$VoidToFutureOrOfT = dart.constFn(dart.fnType(__t$FutureOrOfT(), [])))();
      return [__t$FutureOfT(), [__t$VoidToFutureOrOfT()]];
    }, T => {
      var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
      var __t$FutureOrOfT = () => (__t$FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
      var __t$VoidToFutureOrOfT = () => (__t$VoidToFutureOrOfT = dart.constFn(dart.fnType(__t$FutureOrOfT(), [])))();
      return [T$.ObjectN()];
    })))(),
    VoidToNbool: () => (T$.VoidToNbool = dart.constFn(dart.nullable(T$.VoidTobool())))(),
    Fn__ToFutureOrOfT: () => (T$.Fn__ToFutureOrOfT = dart.constFn(dart.gFnType(T => {
      var __t$FutureOrOfT = () => (__t$FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
      var __t$VoidToT = () => (__t$VoidToT = dart.constFn(dart.fnType(T, [])))();
      return [__t$FutureOrOfT(), [__t$VoidToT()], {condition: T$.VoidToNbool()}, {}];
    }, T => {
      var __t$FutureOrOfT = () => (__t$FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
      var __t$VoidToT = () => (__t$VoidToT = dart.constFn(dart.fnType(T, [])))();
      return [T$.ObjectN()];
    })))(),
    IdentityMapOfString$MapOfString$String: () => (T$.IdentityMapOfString$MapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, T$.MapOfString$String())))(),
    MapOfString$MapOfString$String: () => (T$.MapOfString$MapOfString$String = dart.constFn(core.Map$(core.String, T$.MapOfString$String())))(),
    MapOfString$MapOfString$StringTovoid: () => (T$.MapOfString$MapOfString$StringTovoid = dart.constFn(dart.fnType(dart.void, [T$.MapOfString$MapOfString$String()])))(),
    StringAndMapOfString$StringTovoid: () => (T$.StringAndMapOfString$StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.MapOfString$String()])))(),
    MapEntryOfString$MapOfString$String: () => (T$.MapEntryOfString$MapOfString$String = dart.constFn(core.MapEntry$(core.String, T$.MapOfString$String())))(),
    StringAndMapOfString$StringToMapEntryOfString$MapOfString$String: () => (T$.StringAndMapOfString$StringToMapEntryOfString$MapOfString$String = dart.constFn(dart.fnType(T$.MapEntryOfString$MapOfString$String(), [core.String, T$.MapOfString$String()])))(),
    ListOfStringToString: () => (T$.ListOfStringToString = dart.constFn(dart.fnType(core.String, [], [T$.ListOfString()])))(),
    StringNAndintNAndListOfStringToString: () => (T$.StringNAndintNAndListOfStringToString = dart.constFn(dart.fnType(core.String, [], [T$.StringN(), T$.intN(), T$.ListOfString()])))(),
    MapOfString$StringToString: () => (T$.MapOfString$StringToString = dart.constFn(dart.fnType(core.String, [], [T$.MapOfString$String()])))(),
    StringNAndintNAndMapOfString$StringToString: () => (T$.StringNAndintNAndMapOfString$StringToString = dart.constFn(dart.fnType(core.String, [], [T$.StringN(), T$.intN(), T$.MapOfString$String()])))(),
    numTobool: () => (T$.numTobool = dart.constFn(dart.fnType(core.bool, [core.num])))(),
    __ToString: () => (T$.__ToString = dart.constFn(dart.fnType(core.String, [], {firstWordOnly: core.bool}, {})))(),
    IterableN: () => (T$.IterableN = dart.constFn(dart.nullable(core.Iterable)))(),
    IterableNToString: () => (T$.IterableNToString = dart.constFn(dart.fnType(core.String, [], [T$.IterableN()])))(),
    doubleToWidget: () => (T$.doubleToWidget = dart.constFn(dart.fnType(framework.Widget, [core.double])))(),
    __ToWidget: () => (T$.__ToWidget = dart.constFn(dart.fnType(framework.Widget, [], {horizontal: core.double, vertical: core.double}, {})))(),
    __ToWidget$1: () => (T$.__ToWidget$1 = dart.constFn(dart.fnType(framework.Widget, [], {bottom: core.double, left: core.double, right: core.double, top: core.double}, {})))(),
    JSArrayOfdynamicTovoid: () => (T$.JSArrayOfdynamicTovoid = dart.constFn(_interceptors.JSArray$(T$.dynamicTovoid())))(),
    IdentityMapOfString$dynamicTovoid: () => (T$.IdentityMapOfString$dynamicTovoid = dart.constFn(_js_helper.IdentityMap$(core.String, T$.dynamicTovoid())))()
  };
  var T = {
    CloseTovoid: () => (T.CloseTovoid = dart.constFn(dart.fnType(dart.void, [socket_notifier.Close])))(),
    JSArrayOfCloseTovoid: () => (T.JSArrayOfCloseTovoid = dart.constFn(_interceptors.JSArray$(T.CloseTovoid())))(),
    TweenOfOffset: () => (T.TweenOfOffset = dart.constFn(tween.Tween$(ui.Offset)))(),
    CustomClipperOfPath: () => (T.CustomClipperOfPath = dart.constFn(proxy_box.CustomClipper$(ui.Path)))()
  };
  var S$ = {
    $toString: dartx.toString,
    items: dart.privateName(main, "Page3.items"),
    $length: dartx.length,
    $_get: dartx._get,
    sockets: dart.privateName(connect, "GetConnectInterface.sockets"),
    onStart: dart.privateName(lifecycle, "GetLifeCycleBase.onStart"),
    onDelete: dart.privateName(lifecycle, "GetLifeCycleBase.onDelete"),
    _initialized: dart.privateName(lifecycle, "GetLifeCycleBase._initialized"),
    _isClosed: dart.privateName(lifecycle, "GetLifeCycleBase._isClosed"),
    _initialized$1: dart.privateName(lifecycle, "_initialized"),
    _isClosed$1: dart.privateName(lifecycle, "_isClosed"),
    _onStart: dart.privateName(lifecycle, "_onStart"),
    _onDelete: dart.privateName(lifecycle, "_onDelete"),
    _checkIfAlreadyConfigured: dart.privateName(lifecycle, "_checkIfAlreadyConfigured"),
    _callback: dart.privateName(lifecycle, "_callback"),
    allowAutoSignedCert: dart.privateName(connect, "GetConnect.allowAutoSignedCert"),
    userAgent: dart.privateName(connect, "GetConnect.userAgent"),
    sendUserAgent: dart.privateName(connect, "GetConnect.sendUserAgent"),
    baseUrl: dart.privateName(connect, "GetConnect.baseUrl"),
    defaultContentType: dart.privateName(connect, "GetConnect.defaultContentType"),
    followRedirects: dart.privateName(connect, "GetConnect.followRedirects"),
    maxRedirects: dart.privateName(connect, "GetConnect.maxRedirects"),
    maxAuthRetries: dart.privateName(connect, "GetConnect.maxAuthRetries"),
    defaultDecoder: dart.privateName(connect, "GetConnect.defaultDecoder"),
    timeout: dart.privateName(connect, "GetConnect.timeout"),
    trustedCertificates: dart.privateName(connect, "GetConnect.trustedCertificates"),
    findProxy: dart.privateName(connect, "GetConnect.findProxy"),
    withCredentials: dart.privateName(connect, "GetConnect.withCredentials"),
    Duration__duration: dart.privateName(core, "Duration._duration"),
    _httpClient: dart.privateName(connect, "_httpClient"),
    _sockets: dart.privateName(connect, "_sockets"),
    _isDisposed: dart.privateName(connect, "_isDisposed"),
    _checkIfDisposed: dart.privateName(connect, "_checkIfDisposed"),
    _concatUrl: dart.privateName(connect, "_concatUrl"),
    $add: dartx.add,
    $isNotEmpty: dartx.isNotEmpty,
    $map: dartx.map,
    $toList: dartx.toList,
    $clear: dartx.clear,
    _callback$1: dart.privateName(lifecycle, "InternalFinalCallback._callback"),
    bytes: dart.privateName(certificates, "TrustedCertificate.bytes"),
    message: dart.privateName(exceptions, "GetHttpException.message"),
    uri: dart.privateName(exceptions, "GetHttpException.uri"),
    message$1: dart.privateName(exceptions, "GraphQLError.message"),
    code: dart.privateName(exceptions, "GraphQLError.code"),
    message$2: dart.privateName(exceptions, "UnexpectedFormat.message"),
    userAgent$1: dart.privateName(http, "GetHttpClient.userAgent"),
    baseUrl$1: dart.privateName(http, "GetHttpClient.baseUrl"),
    defaultContentType$1: dart.privateName(http, "GetHttpClient.defaultContentType"),
    followRedirects$1: dart.privateName(http, "GetHttpClient.followRedirects"),
    maxRedirects$1: dart.privateName(http, "GetHttpClient.maxRedirects"),
    maxAuthRetries$1: dart.privateName(http, "GetHttpClient.maxAuthRetries"),
    sendUserAgent$1: dart.privateName(http, "GetHttpClient.sendUserAgent"),
    defaultDecoder$1: dart.privateName(http, "GetHttpClient.defaultDecoder"),
    timeout$1: dart.privateName(http, "GetHttpClient.timeout"),
    errorSafety: dart.privateName(http, "GetHttpClient.errorSafety"),
    findProxy$1: dart.privateName(http, "GetHttpClient.findProxy"),
    _httpClient$1: dart.privateName(http, "_httpClient"),
    _modifier: dart.privateName(http, "_modifier"),
    _createUri: dart.privateName(http, "_createUri"),
    $_set: dartx._set,
    $toLowerCase: dartx.toLowerCase,
    $forEach: dartx.forEach,
    $join: dartx.join,
    $runtimeType: dartx.runtimeType,
    _trackProgress: dart.privateName(http, "_trackProgress"),
    _requestWithBody: dart.privateName(http, "_requestWithBody"),
    _setSimpleHeaders: dart.privateName(http, "_setSimpleHeaders"),
    _performRequest: dart.privateName(http, "_performRequest"),
    _get: dart.privateName(http, "_get"),
    _request: dart.privateName(http, "_request"),
    _delete: dart.privateName(http, "_delete"),
    graphQLErrors: dart.privateName(response$, "GraphQLResponse.graphQLErrors"),
    request: dart.privateName(response$, "Response.request"),
    headers: dart.privateName(response$, "Response.headers"),
    statusCode: dart.privateName(response$, "Response.statusCode"),
    statusText: dart.privateName(response$, "Response.statusText"),
    bodyBytes: dart.privateName(response$, "Response.bodyBytes"),
    bodyString: dart.privateName(response$, "Response.bodyString"),
    body: dart.privateName(response$, "Response.body"),
    _parameters: dart.privateName(response$, "_parameters"),
    _unmodifiableParameters: dart.privateName(response$, "_unmodifiableParameters"),
    _value: dart.privateName(response$, "_value"),
    _parse: dart.privateName(response$, "_parse"),
    _ensureParameters: dart.privateName(response$, "_ensureParameters"),
    $substring: dartx.substring,
    Utf8Codec__allowMalformed: dart.privateName(convert, "Utf8Codec._allowMalformed"),
    url: dart.privateName(sockets_html, "BaseWebSocket.url"),
    socket: dart.privateName(sockets_html, "BaseWebSocket.socket"),
    socketNotifier: dart.privateName(sockets_html, "BaseWebSocket.socketNotifier"),
    ping: dart.privateName(sockets_html, "BaseWebSocket.ping"),
    isDisposed: dart.privateName(sockets_html, "BaseWebSocket.isDisposed"),
    allowSelfSigned: dart.privateName(sockets_html, "BaseWebSocket.allowSelfSigned"),
    connectionStatus: dart.privateName(sockets_html, "BaseWebSocket.connectionStatus"),
    _t: dart.privateName(sockets_html, "_t"),
    $startsWith: dartx.startsWith,
    $replaceAll: dartx.replaceAll,
    $onOpen: dartx.onOpen,
    $onMessage: dartx.onMessage,
    $data: dartx.data,
    $onClose: dartx.onClose,
    $onError: dartx.onError,
    $readyState: dartx.readyState,
    boundary: dart.privateName(form_data, "FormData.boundary"),
    fields: dart.privateName(form_data, "FormData.fields"),
    files: dart.privateName(form_data, "FormData.files"),
    $addAll: dartx.addAll,
    _fieldHeader: dart.privateName(form_data, "_fieldHeader"),
    _fileHeader: dart.privateName(form_data, "_fileHeader"),
    _encode: dart.privateName(form_data, "_encode"),
    contentType: dart.privateName(multipart_file, "MultipartFile.contentType"),
    filename: dart.privateName(multipart_file, "MultipartFile.filename"),
    _stream: dart.privateName(multipart_file, "_stream"),
    _length: dart.privateName(multipart_file, "_length"),
    _bytes: dart.privateName(multipart_file, "_bytes"),
    smartManagement: dart.privateName(get_interface, "GetInterface.smartManagement"),
    routerDelegate: dart.privateName(get_interface, "GetInterface.routerDelegate"),
    routeInformationParser: dart.privateName(get_interface, "GetInterface.routeInformationParser"),
    isLogEnable: dart.privateName(get_interface, "GetInterface.isLogEnable"),
    log: dart.privateName(get_interface, "GetInterface.log"),
    _name: dart.privateName(core, "_name"),
    _enumToString: dart.privateName(core, "_enumToString"),
    _Enum__name: dart.privateName(core, "_Enum._name"),
    _Enum_index: dart.privateName(core, "_Enum.index"),
    builder: dart.privateName(bindings_interface, "BindingsBuilder.builder"),
    isPermanent: dart.privateName(get_instance$, "InstanceInfo.isPermanent"),
    isSingleton: dart.privateName(get_instance$, "InstanceInfo.isSingleton"),
    isRegistered: dart.privateName(get_instance$, "InstanceInfo.isRegistered"),
    isPrepared: dart.privateName(get_instance$, "InstanceInfo.isPrepared"),
    isInit: dart.privateName(get_instance$, "InstanceInfo.isInit"),
    _insert: dart.privateName(get_instance$, "_insert"),
    _getKey: dart.privateName(get_instance$, "_getKey"),
    $containsKey: dartx.containsKey,
    _startController: dart.privateName(get_instance$, "_startController"),
    _initDependencies: dart.privateName(get_instance$, "_initDependencies"),
    _getDependency: dart.privateName(get_instance$, "_getDependency"),
    $remove: dartx.remove,
    $keys: dartx.keys,
    dependency: dart.privateName(get_instance$, "_InstanceBuilderFactory.dependency"),
    builderFunc: dart.privateName(get_instance$, "_InstanceBuilderFactory.builderFunc"),
    lateRemove: dart.privateName(get_instance$, "_InstanceBuilderFactory.lateRemove"),
    _showInitLog: dart.privateName(get_instance$, "_showInitLog"),
    isPersistent: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.isPersistent"),
    builder$1: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.builder"),
    theme: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.theme"),
    isScrollControlled: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.isScrollControlled"),
    backgroundColor: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.backgroundColor"),
    elevation: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.elevation"),
    shape: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.shape"),
    clipBehavior: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.clipBehavior"),
    modalBarrierColor: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.modalBarrierColor"),
    isDismissible: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.isDismissible"),
    enableDrag: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.enableDrag"),
    enterBottomSheetDuration: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.enterBottomSheetDuration"),
    exitBottomSheetDuration: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.exitBottomSheetDuration"),
    removeTop: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.removeTop"),
    barrierLabel: dart.privateName(bottomsheet$, "GetModalBottomSheetRoute.barrierLabel"),
    _animationController: dart.privateName(bottomsheet$, "_animationController"),
    isPersistent$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.isPersistent"),
    route: dart.privateName(bottomsheet$, "_GetModalBottomSheet.route"),
    isScrollControlled$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.isScrollControlled"),
    backgroundColor$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.backgroundColor"),
    elevation$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.elevation"),
    shape$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.shape"),
    clipBehavior$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.clipBehavior"),
    enableDrag$1: dart.privateName(bottomsheet$, "_GetModalBottomSheet.enableDrag"),
    _getRouteLabel: dart.privateName(bottomsheet$, "_getRouteLabel"),
    isPersistent$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.isPersistent"),
    route$1: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.route"),
    isScrollControlled$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.isScrollControlled"),
    backgroundColor$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.backgroundColor"),
    elevation$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.elevation"),
    shape$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.shape"),
    clipBehavior$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.clipBehavior"),
    enableDrag$2: dart.privateName(bottomsheet$, "_GetPerModalBottomSheet.enableDrag"),
    Color_value: dart.privateName(ui, "Color.value"),
    EdgeInsets_bottom: dart.privateName(edge_insets, "EdgeInsets.bottom"),
    EdgeInsets_right: dart.privateName(edge_insets, "EdgeInsets.right"),
    EdgeInsets_top: dart.privateName(edge_insets, "EdgeInsets.top"),
    EdgeInsets_left: dart.privateName(edge_insets, "EdgeInsets.left"),
    Widget_key: dart.privateName(framework, "Widget.key"),
    SingleChildRenderObjectWidget_child: dart.privateName(framework, "SingleChildRenderObjectWidget.child"),
    SizedBox_height: dart.privateName(basic, "SizedBox.height"),
    SizedBox_width: dart.privateName(basic, "SizedBox.width"),
    Cubic_d: dart.privateName(curves, "Cubic.d"),
    Cubic_c: dart.privateName(curves, "Cubic.c"),
    Cubic_b: dart.privateName(curves, "Cubic.b"),
    Cubic_a: dart.privateName(curves, "Cubic.a"),
    $putIfAbsent: dartx.putIfAbsent,
    Text_selectionColor: dart.privateName(text, "Text.selectionColor"),
    Text_textHeightBehavior: dart.privateName(text, "Text.textHeightBehavior"),
    Text_textWidthBasis: dart.privateName(text, "Text.textWidthBasis"),
    Text_semanticsLabel: dart.privateName(text, "Text.semanticsLabel"),
    Text_maxLines: dart.privateName(text, "Text.maxLines"),
    Text_textScaleFactor: dart.privateName(text, "Text.textScaleFactor"),
    Text_overflow: dart.privateName(text, "Text.overflow"),
    Text_softWrap: dart.privateName(text, "Text.softWrap"),
    Text_locale: dart.privateName(text, "Text.locale"),
    Text_textDirection: dart.privateName(text, "Text.textDirection"),
    Text_textAlign: dart.privateName(text, "Text.textAlign"),
    Text_strutStyle: dart.privateName(text, "Text.strutStyle"),
    Text_style: dart.privateName(text, "Text.style"),
    Text_textSpan: dart.privateName(text, "Text.textSpan"),
    Text_data: dart.privateName(text, "Text.data"),
    Align_heightFactor: dart.privateName(basic, "Align.heightFactor"),
    Align_widthFactor: dart.privateName(basic, "Align.widthFactor"),
    Alignment_y: dart.privateName(alignment$, "Alignment.y"),
    Alignment_x: dart.privateName(alignment$, "Alignment.x"),
    Align_alignment: dart.privateName(basic, "Align.alignment"),
    initialRoute: dart.privateName(get_information_parser, "GetInformationParser.initialRoute"),
    $any: dartx.any,
    currentTreeBranch: dart.privateName(get_nav_config, "GetNavConfig.currentTreeBranch"),
    $last: dartx.last,
    $isEmpty: dartx.isEmpty,
    history: dart.privateName(get_router_delegate, "GetDelegate.history"),
    backButtonPopMode: dart.privateName(get_router_delegate, "GetDelegate.backButtonPopMode"),
    preventDuplicateHandlingMode: dart.privateName(get_router_delegate, "GetDelegate.preventDuplicateHandlingMode"),
    notFoundRoute: dart.privateName(get_router_delegate, "GetDelegate.notFoundRoute"),
    navigatorObservers: dart.privateName(get_router_delegate, "GetDelegate.navigatorObservers"),
    transitionDelegate: dart.privateName(get_router_delegate, "GetDelegate.transitionDelegate"),
    _allCompleters: dart.privateName(get_router_delegate, "_allCompleters"),
    Scaffold_restorationId: dart.privateName(scaffold, "Scaffold.restorationId"),
    Scaffold_endDrawerEnableOpenDragGesture: dart.privateName(scaffold, "Scaffold.endDrawerEnableOpenDragGesture"),
    Scaffold_drawerEnableOpenDragGesture: dart.privateName(scaffold, "Scaffold.drawerEnableOpenDragGesture"),
    Scaffold_drawerEdgeDragWidth: dart.privateName(scaffold, "Scaffold.drawerEdgeDragWidth"),
    Scaffold_drawerDragStartBehavior: dart.privateName(scaffold, "Scaffold.drawerDragStartBehavior"),
    Scaffold_primary: dart.privateName(scaffold, "Scaffold.primary"),
    Scaffold_resizeToAvoidBottomInset: dart.privateName(scaffold, "Scaffold.resizeToAvoidBottomInset"),
    Scaffold_bottomSheet: dart.privateName(scaffold, "Scaffold.bottomSheet"),
    Scaffold_bottomNavigationBar: dart.privateName(scaffold, "Scaffold.bottomNavigationBar"),
    Scaffold_backgroundColor: dart.privateName(scaffold, "Scaffold.backgroundColor"),
    Scaffold_drawerScrimColor: dart.privateName(scaffold, "Scaffold.drawerScrimColor"),
    Scaffold_onEndDrawerChanged: dart.privateName(scaffold, "Scaffold.onEndDrawerChanged"),
    Scaffold_endDrawer: dart.privateName(scaffold, "Scaffold.endDrawer"),
    Scaffold_onDrawerChanged: dart.privateName(scaffold, "Scaffold.onDrawerChanged"),
    Scaffold_drawer: dart.privateName(scaffold, "Scaffold.drawer"),
    AlignmentDirectional_y: dart.privateName(alignment$, "AlignmentDirectional.y"),
    AlignmentDirectional_start: dart.privateName(alignment$, "AlignmentDirectional.start"),
    Scaffold_persistentFooterAlignment: dart.privateName(scaffold, "Scaffold.persistentFooterAlignment"),
    Scaffold_persistentFooterButtons: dart.privateName(scaffold, "Scaffold.persistentFooterButtons"),
    Scaffold_floatingActionButtonAnimator: dart.privateName(scaffold, "Scaffold.floatingActionButtonAnimator"),
    Scaffold_floatingActionButtonLocation: dart.privateName(scaffold, "Scaffold.floatingActionButtonLocation"),
    Scaffold_floatingActionButton: dart.privateName(scaffold, "Scaffold.floatingActionButton"),
    Scaffold_body: dart.privateName(scaffold, "Scaffold.body"),
    Scaffold_appBar: dart.privateName(scaffold, "Scaffold.appBar"),
    Scaffold_extendBodyBehindAppBar: dart.privateName(scaffold, "Scaffold.extendBodyBehindAppBar"),
    Scaffold_extendBody: dart.privateName(scaffold, "Scaffold.extendBody"),
    _canPop: dart.privateName(get_router_delegate, "_canPop"),
    _pop: dart.privateName(get_router_delegate, "_pop"),
    _onPopVisualRoute: dart.privateName(get_router_delegate, "_onPopVisualRoute"),
    _canPopHistory: dart.privateName(get_router_delegate, "_canPopHistory"),
    _canPopPage: dart.privateName(get_router_delegate, "_canPopPage"),
    $where: dartx.where,
    $removeLast: dartx.removeLast,
    _popHistory: dart.privateName(get_router_delegate, "_popHistory"),
    _pushHistory: dart.privateName(get_router_delegate, "_pushHistory"),
    _unsafeHistoryRemoveAt: dart.privateName(get_router_delegate, "_unsafeHistoryRemoveAt"),
    _doPopHistory: dart.privateName(get_router_delegate, "_doPopHistory"),
    $take: dartx.take,
    _doPopPage: dart.privateName(get_router_delegate, "_doPopPage"),
    $cast: dartx.cast,
    $firstWhere: dartx.firstWhere,
    _removeHistoryEntry: dart.privateName(get_router_delegate, "_removeHistoryEntry"),
    _popPage: dart.privateName(get_router_delegate, "_popPage"),
    $indexWhere: dartx.indexWhere,
    _unsafeHistoryAdd: dart.privateName(get_router_delegate, "_unsafeHistoryAdd"),
    _unsafeHistoryRemove: dart.privateName(get_router_delegate, "_unsafeHistoryRemove"),
    $indexOf: dartx.indexOf,
    $removeAt: dartx.removeAt,
    _updaters: dart.privateName(list_notifier, "ListNotifierMixin._updaters"),
    _updatersGroupIds: dart.privateName(list_notifier, "ListNotifierMixin._updatersGroupIds"),
    _updaters$1: dart.privateName(list_notifier, "_updaters"),
    _updatersGroupIds$1: dart.privateName(list_notifier, "_updatersGroupIds"),
    _debugAssertNotDisposed: dart.privateName(list_notifier, "_debugAssertNotDisposed"),
    _notifyUpdate: dart.privateName(list_notifier, "_notifyUpdate"),
    _notifyIdUpdate: dart.privateName(list_notifier, "_notifyIdUpdate"),
    routerDelegate$1: dart.privateName(router_outlet, "RouterOutlet.routerDelegate"),
    builder$2: dart.privateName(router_outlet, "RouterOutlet.builder"),
    currentRoute: dart.privateName(router_outlet, "RouterOutletState.currentRoute"),
    _getCurrentRoute: dart.privateName(router_outlet, "_getCurrentRoute"),
    $skip: dartx.skip,
    $whereType: dartx.whereType,
    $skipWhile: dartx.skipWhile,
    navigatorKey: dart.privateName(get_cupertino_app, "GetCupertinoApp.navigatorKey"),
    home: dart.privateName(get_cupertino_app, "GetCupertinoApp.home"),
    routes: dart.privateName(get_cupertino_app, "GetCupertinoApp.routes"),
    initialRoute$1: dart.privateName(get_cupertino_app, "GetCupertinoApp.initialRoute"),
    onGenerateRoute: dart.privateName(get_cupertino_app, "GetCupertinoApp.onGenerateRoute"),
    onGenerateInitialRoutes: dart.privateName(get_cupertino_app, "GetCupertinoApp.onGenerateInitialRoutes"),
    onUnknownRoute: dart.privateName(get_cupertino_app, "GetCupertinoApp.onUnknownRoute"),
    navigatorObservers$1: dart.privateName(get_cupertino_app, "GetCupertinoApp.navigatorObservers"),
    builder$3: dart.privateName(get_cupertino_app, "GetCupertinoApp.builder"),
    title: dart.privateName(get_cupertino_app, "GetCupertinoApp.title"),
    onGenerateTitle: dart.privateName(get_cupertino_app, "GetCupertinoApp.onGenerateTitle"),
    customTransition: dart.privateName(get_cupertino_app, "GetCupertinoApp.customTransition"),
    color: dart.privateName(get_cupertino_app, "GetCupertinoApp.color"),
    translationsKeys: dart.privateName(get_cupertino_app, "GetCupertinoApp.translationsKeys"),
    translations: dart.privateName(get_cupertino_app, "GetCupertinoApp.translations"),
    textDirection: dart.privateName(get_cupertino_app, "GetCupertinoApp.textDirection"),
    locale: dart.privateName(get_cupertino_app, "GetCupertinoApp.locale"),
    fallbackLocale: dart.privateName(get_cupertino_app, "GetCupertinoApp.fallbackLocale"),
    localizationsDelegates: dart.privateName(get_cupertino_app, "GetCupertinoApp.localizationsDelegates"),
    localeListResolutionCallback: dart.privateName(get_cupertino_app, "GetCupertinoApp.localeListResolutionCallback"),
    localeResolutionCallback: dart.privateName(get_cupertino_app, "GetCupertinoApp.localeResolutionCallback"),
    supportedLocales: dart.privateName(get_cupertino_app, "GetCupertinoApp.supportedLocales"),
    showPerformanceOverlay: dart.privateName(get_cupertino_app, "GetCupertinoApp.showPerformanceOverlay"),
    checkerboardRasterCacheImages: dart.privateName(get_cupertino_app, "GetCupertinoApp.checkerboardRasterCacheImages"),
    checkerboardOffscreenLayers: dart.privateName(get_cupertino_app, "GetCupertinoApp.checkerboardOffscreenLayers"),
    showSemanticsDebugger: dart.privateName(get_cupertino_app, "GetCupertinoApp.showSemanticsDebugger"),
    debugShowCheckedModeBanner: dart.privateName(get_cupertino_app, "GetCupertinoApp.debugShowCheckedModeBanner"),
    shortcuts: dart.privateName(get_cupertino_app, "GetCupertinoApp.shortcuts"),
    highContrastTheme: dart.privateName(get_cupertino_app, "GetCupertinoApp.highContrastTheme"),
    highContrastDarkTheme: dart.privateName(get_cupertino_app, "GetCupertinoApp.highContrastDarkTheme"),
    actions: dart.privateName(get_cupertino_app, "GetCupertinoApp.actions"),
    routingCallback: dart.privateName(get_cupertino_app, "GetCupertinoApp.routingCallback"),
    defaultTransition: dart.privateName(get_cupertino_app, "GetCupertinoApp.defaultTransition"),
    opaqueRoute: dart.privateName(get_cupertino_app, "GetCupertinoApp.opaqueRoute"),
    onInit: dart.privateName(get_cupertino_app, "GetCupertinoApp.onInit"),
    onReady: dart.privateName(get_cupertino_app, "GetCupertinoApp.onReady"),
    onDispose: dart.privateName(get_cupertino_app, "GetCupertinoApp.onDispose"),
    enableLog: dart.privateName(get_cupertino_app, "GetCupertinoApp.enableLog"),
    logWriterCallback: dart.privateName(get_cupertino_app, "GetCupertinoApp.logWriterCallback"),
    popGesture: dart.privateName(get_cupertino_app, "GetCupertinoApp.popGesture"),
    smartManagement$1: dart.privateName(get_cupertino_app, "GetCupertinoApp.smartManagement"),
    initialBinding: dart.privateName(get_cupertino_app, "GetCupertinoApp.initialBinding"),
    transitionDuration: dart.privateName(get_cupertino_app, "GetCupertinoApp.transitionDuration"),
    defaultGlobalState: dart.privateName(get_cupertino_app, "GetCupertinoApp.defaultGlobalState"),
    getPages: dart.privateName(get_cupertino_app, "GetCupertinoApp.getPages"),
    unknownRoute: dart.privateName(get_cupertino_app, "GetCupertinoApp.unknownRoute"),
    routeInformationProvider: dart.privateName(get_cupertino_app, "GetCupertinoApp.routeInformationProvider"),
    routeInformationParser$1: dart.privateName(get_cupertino_app, "GetCupertinoApp.routeInformationParser"),
    routerDelegate$2: dart.privateName(get_cupertino_app, "GetCupertinoApp.routerDelegate"),
    backButtonDispatcher: dart.privateName(get_cupertino_app, "GetCupertinoApp.backButtonDispatcher"),
    theme$1: dart.privateName(get_cupertino_app, "GetCupertinoApp.theme"),
    useInheritedMediaQuery: dart.privateName(get_cupertino_app, "GetCupertinoApp.useInheritedMediaQuery"),
    Locale__countryCode: dart.privateName(ui, "Locale._countryCode"),
    Locale_scriptCode: dart.privateName(ui, "Locale.scriptCode"),
    Locale__languageCode: dart.privateName(ui, "Locale._languageCode"),
    $first: dartx.first,
    $contains: dartx.contains,
    navigatorKey$1: dart.privateName(get_material_app, "GetMaterialApp.navigatorKey"),
    scaffoldMessengerKey: dart.privateName(get_material_app, "GetMaterialApp.scaffoldMessengerKey"),
    home$1: dart.privateName(get_material_app, "GetMaterialApp.home"),
    routes$1: dart.privateName(get_material_app, "GetMaterialApp.routes"),
    initialRoute$2: dart.privateName(get_material_app, "GetMaterialApp.initialRoute"),
    onGenerateRoute$1: dart.privateName(get_material_app, "GetMaterialApp.onGenerateRoute"),
    onGenerateInitialRoutes$1: dart.privateName(get_material_app, "GetMaterialApp.onGenerateInitialRoutes"),
    onUnknownRoute$1: dart.privateName(get_material_app, "GetMaterialApp.onUnknownRoute"),
    navigatorObservers$2: dart.privateName(get_material_app, "GetMaterialApp.navigatorObservers"),
    builder$4: dart.privateName(get_material_app, "GetMaterialApp.builder"),
    title$1: dart.privateName(get_material_app, "GetMaterialApp.title"),
    onGenerateTitle$1: dart.privateName(get_material_app, "GetMaterialApp.onGenerateTitle"),
    theme$2: dart.privateName(get_material_app, "GetMaterialApp.theme"),
    darkTheme: dart.privateName(get_material_app, "GetMaterialApp.darkTheme"),
    themeMode: dart.privateName(get_material_app, "GetMaterialApp.themeMode"),
    customTransition$1: dart.privateName(get_material_app, "GetMaterialApp.customTransition"),
    color$1: dart.privateName(get_material_app, "GetMaterialApp.color"),
    translationsKeys$1: dart.privateName(get_material_app, "GetMaterialApp.translationsKeys"),
    translations$1: dart.privateName(get_material_app, "GetMaterialApp.translations"),
    textDirection$1: dart.privateName(get_material_app, "GetMaterialApp.textDirection"),
    locale$1: dart.privateName(get_material_app, "GetMaterialApp.locale"),
    fallbackLocale$1: dart.privateName(get_material_app, "GetMaterialApp.fallbackLocale"),
    localizationsDelegates$1: dart.privateName(get_material_app, "GetMaterialApp.localizationsDelegates"),
    localeListResolutionCallback$1: dart.privateName(get_material_app, "GetMaterialApp.localeListResolutionCallback"),
    localeResolutionCallback$1: dart.privateName(get_material_app, "GetMaterialApp.localeResolutionCallback"),
    supportedLocales$1: dart.privateName(get_material_app, "GetMaterialApp.supportedLocales"),
    showPerformanceOverlay$1: dart.privateName(get_material_app, "GetMaterialApp.showPerformanceOverlay"),
    checkerboardRasterCacheImages$1: dart.privateName(get_material_app, "GetMaterialApp.checkerboardRasterCacheImages"),
    checkerboardOffscreenLayers$1: dart.privateName(get_material_app, "GetMaterialApp.checkerboardOffscreenLayers"),
    showSemanticsDebugger$1: dart.privateName(get_material_app, "GetMaterialApp.showSemanticsDebugger"),
    debugShowCheckedModeBanner$1: dart.privateName(get_material_app, "GetMaterialApp.debugShowCheckedModeBanner"),
    shortcuts$1: dart.privateName(get_material_app, "GetMaterialApp.shortcuts"),
    scrollBehavior: dart.privateName(get_material_app, "GetMaterialApp.scrollBehavior"),
    highContrastTheme$1: dart.privateName(get_material_app, "GetMaterialApp.highContrastTheme"),
    highContrastDarkTheme$1: dart.privateName(get_material_app, "GetMaterialApp.highContrastDarkTheme"),
    actions$1: dart.privateName(get_material_app, "GetMaterialApp.actions"),
    debugShowMaterialGrid: dart.privateName(get_material_app, "GetMaterialApp.debugShowMaterialGrid"),
    routingCallback$1: dart.privateName(get_material_app, "GetMaterialApp.routingCallback"),
    defaultTransition$1: dart.privateName(get_material_app, "GetMaterialApp.defaultTransition"),
    opaqueRoute$1: dart.privateName(get_material_app, "GetMaterialApp.opaqueRoute"),
    onInit$1: dart.privateName(get_material_app, "GetMaterialApp.onInit"),
    onReady$1: dart.privateName(get_material_app, "GetMaterialApp.onReady"),
    onDispose$1: dart.privateName(get_material_app, "GetMaterialApp.onDispose"),
    enableLog$1: dart.privateName(get_material_app, "GetMaterialApp.enableLog"),
    logWriterCallback$1: dart.privateName(get_material_app, "GetMaterialApp.logWriterCallback"),
    popGesture$1: dart.privateName(get_material_app, "GetMaterialApp.popGesture"),
    smartManagement$2: dart.privateName(get_material_app, "GetMaterialApp.smartManagement"),
    initialBinding$1: dart.privateName(get_material_app, "GetMaterialApp.initialBinding"),
    transitionDuration$1: dart.privateName(get_material_app, "GetMaterialApp.transitionDuration"),
    defaultGlobalState$1: dart.privateName(get_material_app, "GetMaterialApp.defaultGlobalState"),
    getPages$1: dart.privateName(get_material_app, "GetMaterialApp.getPages"),
    unknownRoute$1: dart.privateName(get_material_app, "GetMaterialApp.unknownRoute"),
    routeInformationProvider$1: dart.privateName(get_material_app, "GetMaterialApp.routeInformationProvider"),
    routeInformationParser$2: dart.privateName(get_material_app, "GetMaterialApp.routeInformationParser"),
    routerDelegate$3: dart.privateName(get_material_app, "GetMaterialApp.routerDelegate"),
    backButtonDispatcher$1: dart.privateName(get_material_app, "GetMaterialApp.backButtonDispatcher"),
    useInheritedMediaQuery$1: dart.privateName(get_material_app, "GetMaterialApp.useInheritedMediaQuery"),
    testMode: dart.privateName(root_controller, "GetMaterialController.testMode"),
    unikey: dart.privateName(root_controller, "GetMaterialController.unikey"),
    theme$3: dart.privateName(root_controller, "GetMaterialController.theme"),
    darkTheme$1: dart.privateName(root_controller, "GetMaterialController.darkTheme"),
    themeMode$1: dart.privateName(root_controller, "GetMaterialController.themeMode"),
    scaffoldMessengerKey$1: dart.privateName(root_controller, "GetMaterialController.scaffoldMessengerKey"),
    defaultPopGesture: dart.privateName(root_controller, "GetMaterialController.defaultPopGesture"),
    defaultOpaqueRoute: dart.privateName(root_controller, "GetMaterialController.defaultOpaqueRoute"),
    defaultTransition$2: dart.privateName(root_controller, "GetMaterialController.defaultTransition"),
    defaultTransitionDuration: dart.privateName(root_controller, "GetMaterialController.defaultTransitionDuration"),
    defaultTransitionCurve: dart.privateName(root_controller, "GetMaterialController.defaultTransitionCurve"),
    defaultDialogTransitionCurve: dart.privateName(root_controller, "GetMaterialController.defaultDialogTransitionCurve"),
    defaultDialogTransitionDuration: dart.privateName(root_controller, "GetMaterialController.defaultDialogTransitionDuration"),
    routing: dart.privateName(root_controller, "GetMaterialController.routing"),
    parameters: dart.privateName(root_controller, "GetMaterialController.parameters"),
    customTransition$2: dart.privateName(root_controller, "GetMaterialController.customTransition"),
    keys: dart.privateName(root_controller, "GetMaterialController.keys"),
    _key: dart.privateName(root_controller, "_key"),
    _value$1: dart.privateName(rx_notifier, "StateMixin._value"),
    _status: dart.privateName(rx_notifier, "StateMixin._status"),
    _value$2: dart.privateName(rx_notifier, "_value"),
    _status$1: dart.privateName(rx_notifier, "_status"),
    _isNullOrEmpty: dart.privateName(rx_notifier, "_isNullOrEmpty"),
    _fillEmptyStatus: dart.privateName(rx_notifier, "_fillEmptyStatus"),
    transitionDuration$2: dart.privateName(default_route, "GetPageRoute.transitionDuration"),
    page: dart.privateName(default_route, "GetPageRoute.page"),
    routeName: dart.privateName(default_route, "GetPageRoute.routeName"),
    customTransition$3: dart.privateName(default_route, "GetPageRoute.customTransition"),
    binding: dart.privateName(default_route, "GetPageRoute.binding"),
    parameter: dart.privateName(default_route, "GetPageRoute.parameter"),
    bindings: dart.privateName(default_route, "GetPageRoute.bindings"),
    showCupertinoParallax: dart.privateName(default_route, "GetPageRoute.showCupertinoParallax"),
    opaque: dart.privateName(default_route, "GetPageRoute.opaque"),
    popGesture$2: dart.privateName(default_route, "GetPageRoute.popGesture"),
    barrierDismissible: dart.privateName(default_route, "GetPageRoute.barrierDismissible"),
    transition: dart.privateName(default_route, "GetPageRoute.transition"),
    curve: dart.privateName(default_route, "GetPageRoute.curve"),
    alignment: dart.privateName(default_route, "GetPageRoute.alignment"),
    middlewares: dart.privateName(default_route, "GetPageRoute.middlewares"),
    barrierColor: dart.privateName(default_route, "GetPageRoute.barrierColor"),
    barrierLabel$1: dart.privateName(default_route, "GetPageRoute.barrierLabel"),
    maintainState: dart.privateName(default_route, "GetPageRoute.maintainState"),
    title$2: dart.privateName(default_route, "GetPageRoute.title"),
    gestureWidth: dart.privateName(default_route, "GetPageRoute.gestureWidth"),
    _child: dart.privateName(default_route, "_child"),
    _getChild: dart.privateName(default_route, "_getChild"),
    _previousTitle: dart.privateName(get_transition_mixin, "_previousTitle"),
    page$1: dart.privateName(get_route, "GetPage.page"),
    popGesture$3: dart.privateName(get_route, "GetPage.popGesture"),
    parameters$1: dart.privateName(get_route, "GetPage.parameters"),
    title$3: dart.privateName(get_route, "GetPage.title"),
    transition$1: dart.privateName(get_route, "GetPage.transition"),
    curve$1: dart.privateName(get_route, "GetPage.curve"),
    participatesInRootNavigator: dart.privateName(get_route, "GetPage.participatesInRootNavigator"),
    alignment$1: dart.privateName(get_route, "GetPage.alignment"),
    maintainState$1: dart.privateName(get_route, "GetPage.maintainState"),
    opaque$1: dart.privateName(get_route, "GetPage.opaque"),
    gestureWidth$1: dart.privateName(get_route, "GetPage.gestureWidth"),
    binding$1: dart.privateName(get_route, "GetPage.binding"),
    bindings$1: dart.privateName(get_route, "GetPage.bindings"),
    customTransition$4: dart.privateName(get_route, "GetPage.customTransition"),
    transitionDuration$3: dart.privateName(get_route, "GetPage.transitionDuration"),
    fullscreenDialog: dart.privateName(get_route, "GetPage.fullscreenDialog"),
    preventDuplicates: dart.privateName(get_route, "GetPage.preventDuplicates"),
    $arguments: dart.privateName(get_route, "GetPage.arguments"),
    name: dart.privateName(get_route, "GetPage.name"),
    children: dart.privateName(get_route, "GetPage.children"),
    middlewares$1: dart.privateName(get_route, "GetPage.middlewares"),
    path: dart.privateName(get_route, "GetPage.path"),
    unknownRoute$2: dart.privateName(get_route, "GetPage.unknownRoute"),
    showCupertinoParallax$1: dart.privateName(get_route, "GetPage.showCupertinoParallax"),
    $replaceAllMapped: dartx.replaceAllMapped,
    regex: dart.privateName(get_route, "PathDecoded.regex"),
    keys$1: dart.privateName(get_route, "PathDecoded.keys"),
    $hashCode: dartx.hashCode,
    $_equals: dartx._equals,
    routing$1: dart.privateName(route_observer, "GetObserver.routing"),
    _routeSend: dart.privateName(route_observer, "_routeSend"),
    current: dart.privateName(route_observer, "Routing.current"),
    previous: dart.privateName(route_observer, "Routing.previous"),
    args: dart.privateName(route_observer, "Routing.args"),
    removed: dart.privateName(route_observer, "Routing.removed"),
    route$2: dart.privateName(route_observer, "Routing.route"),
    isBack: dart.privateName(route_observer, "Routing.isBack"),
    isBottomSheet: dart.privateName(route_observer, "Routing.isBottomSheet"),
    isDialog: dart.privateName(route_observer, "Routing.isDialog"),
    priority: dart.privateName(route_middleware, "GetMiddleware.priority"),
    _middlewares: dart.privateName(route_middleware, "_middlewares"),
    $compareTo: dartx.compareTo,
    $sort: dartx.sort,
    _getMiddlewares: dart.privateName(route_middleware, "_getMiddlewares"),
    route$3: dart.privateName(route_middleware, "PageRedirect.route"),
    unknownRoute$3: dart.privateName(route_middleware, "PageRedirect.unknownRoute"),
    settings: dart.privateName(route_middleware, "PageRedirect.settings"),
    isUnknown: dart.privateName(route_middleware, "PageRedirect.isUnknown"),
    $entries: dartx.entries,
    $addEntries: dartx.addEntries,
    snackbarStatus: dart.privateName(snackbar, "GetSnackBar.snackbarStatus"),
    title$4: dart.privateName(snackbar, "GetSnackBar.title"),
    dismissDirection: dart.privateName(snackbar, "GetSnackBar.dismissDirection"),
    message$3: dart.privateName(snackbar, "GetSnackBar.message"),
    titleText: dart.privateName(snackbar, "GetSnackBar.titleText"),
    messageText: dart.privateName(snackbar, "GetSnackBar.messageText")
  };
  var S$0 = {
    backgroundColor$3: dart.privateName(snackbar, "GetSnackBar.backgroundColor"),
    leftBarIndicatorColor: dart.privateName(snackbar, "GetSnackBar.leftBarIndicatorColor"),
    boxShadows: dart.privateName(snackbar, "GetSnackBar.boxShadows"),
    backgroundGradient: dart.privateName(snackbar, "GetSnackBar.backgroundGradient"),
    icon: dart.privateName(snackbar, "GetSnackBar.icon"),
    shouldIconPulse: dart.privateName(snackbar, "GetSnackBar.shouldIconPulse"),
    mainButton: dart.privateName(snackbar, "GetSnackBar.mainButton"),
    onTap: dart.privateName(snackbar, "GetSnackBar.onTap"),
    duration: dart.privateName(snackbar, "GetSnackBar.duration"),
    showProgressIndicator: dart.privateName(snackbar, "GetSnackBar.showProgressIndicator"),
    progressIndicatorController: dart.privateName(snackbar, "GetSnackBar.progressIndicatorController"),
    progressIndicatorBackgroundColor: dart.privateName(snackbar, "GetSnackBar.progressIndicatorBackgroundColor"),
    progressIndicatorValueColor: dart.privateName(snackbar, "GetSnackBar.progressIndicatorValueColor"),
    isDismissible$1: dart.privateName(snackbar, "GetSnackBar.isDismissible"),
    maxWidth: dart.privateName(snackbar, "GetSnackBar.maxWidth"),
    margin: dart.privateName(snackbar, "GetSnackBar.margin"),
    padding: dart.privateName(snackbar, "GetSnackBar.padding"),
    borderRadius: dart.privateName(snackbar, "GetSnackBar.borderRadius"),
    borderColor: dart.privateName(snackbar, "GetSnackBar.borderColor"),
    borderWidth: dart.privateName(snackbar, "GetSnackBar.borderWidth"),
    snackPosition: dart.privateName(snackbar, "GetSnackBar.snackPosition"),
    snackStyle: dart.privateName(snackbar, "GetSnackBar.snackStyle"),
    forwardAnimationCurve: dart.privateName(snackbar, "GetSnackBar.forwardAnimationCurve"),
    reverseAnimationCurve: dart.privateName(snackbar, "GetSnackBar.reverseAnimationCurve"),
    animationDuration: dart.privateName(snackbar, "GetSnackBar.animationDuration"),
    barBlur: dart.privateName(snackbar, "GetSnackBar.barBlur"),
    overlayBlur: dart.privateName(snackbar, "GetSnackBar.overlayBlur"),
    overlayColor: dart.privateName(snackbar, "GetSnackBar.overlayColor"),
    userInputForm: dart.privateName(snackbar, "GetSnackBar.userInputForm"),
    _fadeController: dart.privateName(snackbar, "_fadeController"),
    __GetSnackBarState__fadeAnimation: dart.privateName(snackbar, "_#GetSnackBarState#_fadeAnimation"),
    _emptyWidget: dart.privateName(snackbar, "_emptyWidget"),
    _initialOpacity: dart.privateName(snackbar, "_initialOpacity"),
    _finalOpacity: dart.privateName(snackbar, "_finalOpacity"),
    _pulseAnimationDuration: dart.privateName(snackbar, "_pulseAnimationDuration"),
    __GetSnackBarState__isTitlePresent: dart.privateName(snackbar, "_#GetSnackBarState#_isTitlePresent"),
    __GetSnackBarState__messageTopMargin: dart.privateName(snackbar, "_#GetSnackBarState#_messageTopMargin"),
    _focusNode: dart.privateName(snackbar, "_focusNode"),
    __GetSnackBarState__focusAttachment: dart.privateName(snackbar, "_#GetSnackBarState#_focusAttachment"),
    _boxHeightCompleter: dart.privateName(snackbar, "_boxHeightCompleter"),
    __GetSnackBarState__progressAnimation: dart.privateName(snackbar, "_#GetSnackBarState#_progressAnimation"),
    _backgroundBoxKey: dart.privateName(snackbar, "_backgroundBoxKey"),
    _fadeAnimation: dart.privateName(snackbar, "_fadeAnimation"),
    _isTitlePresent: dart.privateName(snackbar, "_isTitlePresent"),
    _messageTopMargin: dart.privateName(snackbar, "_messageTopMargin"),
    _focusAttachment: dart.privateName(snackbar, "_focusAttachment"),
    _progressAnimation: dart.privateName(snackbar, "_progressAnimation"),
    _rowStyle: dart.privateName(snackbar, "_rowStyle"),
    _containerWithForm: dart.privateName(snackbar, "_containerWithForm"),
    _containerWithoutForm: dart.privateName(snackbar, "_containerWithoutForm"),
    _updateProgress: dart.privateName(snackbar, "_updateProgress"),
    _configureLeftBarFuture: dart.privateName(snackbar, "_configureLeftBarFuture"),
    _configureProgressIndicatorAnimation: dart.privateName(snackbar, "_configureProgressIndicatorAnimation"),
    _configurePulseAnimation: dart.privateName(snackbar, "_configurePulseAnimation"),
    _buildLeftBarIndicator: dart.privateName(snackbar, "_buildLeftBarIndicator"),
    _getIcon: dart.privateName(snackbar, "_getIcon"),
    key: dart.privateName(snackbar_controller, "SnackbarController.key"),
    snackbar: dart.privateName(snackbar_controller, "SnackbarController.snackbar"),
    __SnackbarController__filterBlurAnimation: dart.privateName(snackbar_controller, "_#SnackbarController#_filterBlurAnimation"),
    __SnackbarController__filterColorAnimation: dart.privateName(snackbar_controller, "_#SnackbarController#_filterColorAnimation"),
    _transitionCompleter: dart.privateName(snackbar_controller, "_transitionCompleter"),
    __SnackbarController__snackbarStatus: dart.privateName(snackbar_controller, "_#SnackbarController#_snackbarStatus"),
    __SnackbarController__snackbarStatus_isSet: dart.privateName(snackbar_controller, "_#SnackbarController#_snackbarStatus#isSet"),
    __SnackbarController__initialAlignment: dart.privateName(snackbar_controller, "_#SnackbarController#_initialAlignment"),
    __SnackbarController__initialAlignment_isSet: dart.privateName(snackbar_controller, "_#SnackbarController#_initialAlignment#isSet"),
    __SnackbarController__endAlignment: dart.privateName(snackbar_controller, "_#SnackbarController#_endAlignment"),
    __SnackbarController__endAlignment_isSet: dart.privateName(snackbar_controller, "_#SnackbarController#_endAlignment#isSet"),
    _wasDismissedBySwipe: dart.privateName(snackbar_controller, "_wasDismissedBySwipe"),
    _onTappedDismiss: dart.privateName(snackbar_controller, "_onTappedDismiss"),
    _timer: dart.privateName(snackbar_controller, "_timer"),
    __SnackbarController__animation: dart.privateName(snackbar_controller, "_#SnackbarController#_animation"),
    __SnackbarController__controller: dart.privateName(snackbar_controller, "_#SnackbarController#_controller"),
    _currentStatus: dart.privateName(snackbar_controller, "_currentStatus"),
    _overlayEntries: dart.privateName(snackbar_controller, "_overlayEntries"),
    _overlayState: dart.privateName(snackbar_controller, "_overlayState"),
    _isJobInProgress: dart.privateName(snackbar_controller, "_isJobInProgress"),
    _filterBlurAnimation: dart.privateName(snackbar_controller, "_filterBlurAnimation"),
    _filterColorAnimation: dart.privateName(snackbar_controller, "_filterColorAnimation"),
    _snackbarStatus: dart.privateName(snackbar_controller, "_snackbarStatus"),
    _initialAlignment: dart.privateName(snackbar_controller, "_initialAlignment"),
    _endAlignment: dart.privateName(snackbar_controller, "_endAlignment"),
    _animation: dart.privateName(snackbar_controller, "_animation"),
    _controller: dart.privateName(snackbar_controller, "_controller"),
    _removeOverlay: dart.privateName(snackbar_controller, "_removeOverlay"),
    _removeEntry: dart.privateName(snackbar_controller, "_removeEntry"),
    _addJob: dart.privateName(snackbar_controller, "_addJob"),
    _cancelTimer: dart.privateName(snackbar_controller, "_cancelTimer"),
    _configureAlignment: dart.privateName(snackbar_controller, "_configureAlignment"),
    _getBodyWidget: dart.privateName(snackbar_controller, "_getBodyWidget"),
    _createOverlayEntries: dart.privateName(snackbar_controller, "_createOverlayEntries"),
    _configureSnackBarDisplay: dart.privateName(snackbar_controller, "_configureSnackBarDisplay"),
    _configureOverlay: dart.privateName(snackbar_controller, "_configureOverlay"),
    _createAnimationController: dart.privateName(snackbar_controller, "_createAnimationController"),
    _createBlurFilterAnimation: dart.privateName(snackbar_controller, "_createBlurFilterAnimation"),
    _createColorOverlayColor: dart.privateName(snackbar_controller, "_createColorOverlayColor"),
    _createAnimation: dart.privateName(snackbar_controller, "_createAnimation"),
    _handleStatusChanged: dart.privateName(snackbar_controller, "_handleStatusChanged"),
    _configureTimer: dart.privateName(snackbar_controller, "_configureTimer"),
    Interval_curve: dart.privateName(curves, "Interval.curve"),
    Interval_end: dart.privateName(curves, "Interval.end"),
    Interval_begin: dart.privateName(curves, "Interval.begin"),
    BoxConstraints_maxHeight: dart.privateName(box$, "BoxConstraints.maxHeight"),
    BoxConstraints_minHeight: dart.privateName(box$, "BoxConstraints.minHeight"),
    BoxConstraints_maxWidth: dart.privateName(box$, "BoxConstraints.maxWidth"),
    BoxConstraints_minWidth: dart.privateName(box$, "BoxConstraints.minWidth"),
    _getDismissibleSnack: dart.privateName(snackbar_controller, "_getDismissibleSnack"),
    _getSnackbarContainer: dart.privateName(snackbar_controller, "_getSnackbarContainer"),
    _getDefaultDismissDirection: dart.privateName(snackbar_controller, "_getDefaultDismissDirection"),
    ValueKey_value: dart.privateName(key, "ValueKey.value"),
    _show: dart.privateName(snackbar_controller, "_show"),
    _cancelAllJobs: dart.privateName(snackbar_controller, "_cancelAllJobs"),
    _closeCurrentJob: dart.privateName(snackbar_controller, "_closeCurrentJob"),
    _queue: dart.privateName(snackbar_controller, "_queue"),
    _snackbarList: dart.privateName(snackbar_controller, "_snackbarList"),
    _currentSnackbar: dart.privateName(snackbar_controller, "_currentSnackbar"),
    onListen: dart.privateName(rx_stream, "GetStream.onListen"),
    onPause: dart.privateName(rx_stream, "GetStream.onPause"),
    onResume: dart.privateName(rx_stream, "GetStream.onResume"),
    onCancel: dart.privateName(rx_stream, "GetStream.onCancel"),
    _onData: dart.privateName(rx_stream, "_onData"),
    _isBusy: dart.privateName(rx_stream, "_isBusy"),
    _value$3: dart.privateName(rx_stream, "_value"),
    _data: dart.privateName(rx_stream, "_data"),
    _notifyData: dart.privateName(rx_stream, "_notifyData"),
    _onError: dart.privateName(rx_stream, "_onError"),
    _onDone: dart.privateName(rx_stream, "_onDone"),
    _notifyError: dart.privateName(rx_stream, "_notifyError"),
    _notifyDone: dart.privateName(rx_stream, "_notifyDone"),
    onPause$1: dart.privateName(rx_stream, "LightSubscription.onPause"),
    onResume$1: dart.privateName(rx_stream, "LightSubscription.onResume"),
    onCancel$1: dart.privateName(rx_stream, "LightSubscription.onCancel"),
    cancelOnError: dart.privateName(rx_stream, "LightSubscription.cancelOnError"),
    _isPaused: dart.privateName(rx_stream, "_isPaused"),
    _removeSubscription: dart.privateName(rx_stream, "_removeSubscription"),
    _addSubscription: dart.privateName(rx_stream, "_addSubscription"),
    data: dart.privateName(rx_stream, "Node.data"),
    next: dart.privateName(rx_stream, "Node.next"),
    data$1: dart.privateName(rx_stream, "MiniSubscription.data"),
    onError: dart.privateName(rx_stream, "MiniSubscription.onError"),
    onDone: dart.privateName(rx_stream, "MiniSubscription.onDone"),
    cancelOnError$1: dart.privateName(rx_stream, "MiniSubscription.cancelOnError"),
    listener: dart.privateName(rx_stream, "MiniSubscription.listener"),
    listenable: dart.privateName(rx_stream, "MiniStream.listenable"),
    __MiniStream__value: dart.privateName(rx_stream, "_#MiniStream#_value"),
    __MiniStream__value_isSet: dart.privateName(rx_stream, "_#MiniStream#_value#isSet"),
    _isClosed$2: dart.privateName(rx_stream, "_isClosed"),
    _head: dart.privateName(rx_stream, "_head"),
    _elementAt: dart.privateName(rx_stream, "_elementAt"),
    _removeAt: dart.privateName(rx_stream, "_removeAt"),
    _$35RxObjectMixin$35_value: dart.privateName(rx_types, "RxObjectMixin._#RxObjectMixin#_value"),
    _$35RxObjectMixin$35_value$35isSet: dart.privateName(rx_types, "RxObjectMixin._#RxObjectMixin#_value#isSet"),
    firstRebuild: dart.privateName(rx_types, "RxObjectMixin.firstRebuild"),
    sentToStream: dart.privateName(rx_types, "RxObjectMixin.sentToStream"),
    __RxObjectMixin__value: dart.privateName(rx_types, "_#RxObjectMixin#_value"),
    __RxObjectMixin__value_isSet: dart.privateName(rx_types, "_#RxObjectMixin#_value#isSet"),
    _value$4: dart.privateName(rx_types, "_value"),
    _subscriptions: dart.privateName(rx_types, "_subscriptions"),
    subject: dart.privateName(rx_types, "NotifyManager.subject"),
    _subscriptions$1: dart.privateName(rx_types, "NotifyManager._subscriptions"),
    $allMatches: dartx.allMatches,
    $matchAsPrefix: dartx.matchAsPrefix,
    $iterator: dartx.iterator,
    $removeWhere: dartx.removeWhere,
    $retainWhere: dartx.retainWhere,
    $insertAll: dartx.insertAll,
    $reversed: dartx.reversed,
    $plus: dartx['+'],
    $toSet: dartx.toSet,
    $modulo: dartx['%'],
    $truncate: dartx.truncate,
    $remainder: dartx.remainder,
    $isNaN: dartx.isNaN,
    $isNegative: dartx.isNegative,
    $isInfinite: dartx.isInfinite,
    $isFinite: dartx.isFinite,
    $abs: dartx.abs,
    $sign: dartx.sign,
    $round: dartx.round,
    $floor: dartx.floor,
    $ceil: dartx.ceil,
    $roundToDouble: dartx.roundToDouble,
    $floorToDouble: dartx.floorToDouble,
    $ceilToDouble: dartx.ceilToDouble,
    $truncateToDouble: dartx.truncateToDouble,
    $clamp: dartx.clamp,
    $toInt: dartx.toInt,
    $toDouble: dartx.toDouble,
    $toStringAsFixed: dartx.toStringAsFixed,
    $toStringAsExponential: dartx.toStringAsExponential,
    $toStringAsPrecision: dartx.toStringAsPrecision,
    $leftShift: dartx['<<'],
    $rightShift: dartx['>>'],
    $modPow: dartx.modPow,
    $modInverse: dartx.modInverse,
    $gcd: dartx.gcd,
    $isEven: dartx.isEven,
    $isOdd: dartx.isOdd,
    $bitLength: dartx.bitLength,
    $toUnsigned: dartx.toUnsigned,
    $toSigned: dartx.toSigned,
    $endsWith: dartx.endsWith,
    $lastIndexOf: dartx.lastIndexOf,
    $trim: dartx.trim,
    $trimLeft: dartx.trimLeft,
    $trimRight: dartx.trimRight,
    $padLeft: dartx.padLeft,
    $padRight: dartx.padRight,
    $split: dartx.split,
    $codeUnits: dartx.codeUnits,
    $runes: dartx.runes,
    $toUpperCase: dartx.toUpperCase,
    workers: dart.privateName(rx_workers, "Workers.workers"),
    _disposed: dart.privateName(rx_workers, "_disposed"),
    worker: dart.privateName(rx_workers, "Worker.worker"),
    type: dart.privateName(rx_workers, "Worker.type"),
    _log: dart.privateName(rx_workers, "_log"),
    builder$5: dart.privateName(rx_getx_widget, "GetX.builder"),
    global: dart.privateName(rx_getx_widget, "GetX.global"),
    autoRemove: dart.privateName(rx_getx_widget, "GetX.autoRemove"),
    assignId: dart.privateName(rx_getx_widget, "GetX.assignId"),
    initState: dart.privateName(rx_getx_widget, "GetX.initState"),
    dispose: dart.privateName(rx_getx_widget, "GetX.dispose"),
    didChangeDependencies: dart.privateName(rx_getx_widget, "GetX.didChangeDependencies"),
    didUpdateWidget: dart.privateName(rx_getx_widget, "GetX.didUpdateWidget"),
    init: dart.privateName(rx_getx_widget, "GetX.init"),
    tag: dart.privateName(rx_getx_widget, "GetX.tag"),
    controller: dart.privateName(rx_getx_widget, "GetXState.controller"),
    _observer: dart.privateName(rx_getx_widget, "_observer"),
    _isCreator: dart.privateName(rx_getx_widget, "_isCreator"),
    __GetXState__subs: dart.privateName(rx_getx_widget, "_#GetXState#_subs"),
    _subs: dart.privateName(rx_getx_widget, "_subs"),
    isLoading: dart.privateName(rx_notifier, "RxStatus.isLoading"),
    isError: dart.privateName(rx_notifier, "RxStatus.isError"),
    isSuccess: dart.privateName(rx_notifier, "RxStatus.isSuccess"),
    isEmpty: dart.privateName(rx_notifier, "RxStatus.isEmpty"),
    isLoadingMore: dart.privateName(rx_notifier, "RxStatus.isLoadingMore"),
    errorMessage: dart.privateName(rx_notifier, "RxStatus.errorMessage"),
    ProgressIndicator_semanticsValue: dart.privateName(progress_indicator, "ProgressIndicator.semanticsValue"),
    ProgressIndicator_semanticsLabel: dart.privateName(progress_indicator, "ProgressIndicator.semanticsLabel"),
    ProgressIndicator_valueColor: dart.privateName(progress_indicator, "ProgressIndicator.valueColor"),
    ProgressIndicator_color: dart.privateName(progress_indicator, "ProgressIndicator.color"),
    ProgressIndicator_backgroundColor: dart.privateName(progress_indicator, "ProgressIndicator.backgroundColor"),
    ProgressIndicator_value: dart.privateName(progress_indicator, "ProgressIndicator.value"),
    CircularProgressIndicator_strokeWidth: dart.privateName(progress_indicator, "CircularProgressIndicator.strokeWidth"),
    CircularProgressIndicator__indicatorType: dart.privateName(progress_indicator, "CircularProgressIndicator._indicatorType"),
    _observer$1: dart.privateName(rx_obx_widget, "_observer"),
    ___ObxState_subs: dart.privateName(rx_obx_widget, "_#_ObxState#subs"),
    _updateTree: dart.privateName(rx_obx_widget, "_updateTree"),
    builder$6: dart.privateName(rx_obx_widget, "Obx.builder"),
    builder$7: dart.privateName(rx_obx_widget, "ObxValue.builder"),
    data$2: dart.privateName(rx_obx_widget, "ObxValue.data"),
    _ticker: dart.privateName(rx_ticket_provider_mixin, "_ticker"),
    _tickers: dart.privateName(rx_ticket_provider_mixin, "_tickers"),
    _removeTicker: dart.privateName(rx_ticket_provider_mixin, "_removeTicker"),
    _creator: dart.privateName(rx_ticket_provider_mixin, "_creator"),
    scroll: dart.privateName(get_controllers, "ScrollMixin.scroll"),
    _canFetchBottom: dart.privateName(get_controllers, "_canFetchBottom"),
    _canFetchTop: dart.privateName(get_controllers, "_canFetchTop"),
    _listener: dart.privateName(get_controllers, "_listener"),
    _checkIfCanLoadMore: dart.privateName(get_controllers, "_checkIfCanLoadMore"),
    alwaysUseBuilder: dart.privateName(get_responsive, "GetResponsiveView.alwaysUseBuilder"),
    screen: dart.privateName(get_responsive, "GetResponsiveView.screen"),
    ResponsiveScreenSettings_watchChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.watchChangePoint"),
    ResponsiveScreenSettings_tabletChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.tabletChangePoint"),
    ResponsiveScreenSettings_desktopChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.desktopChangePoint"),
    tag$1: dart.privateName(get_view, "GetView.tag"),
    alwaysUseBuilder$1: dart.privateName(get_responsive, "GetResponsiveWidget.alwaysUseBuilder"),
    screen$1: dart.privateName(get_responsive, "GetResponsiveWidget.screen"),
    tag$2: dart.privateName(get_view, "GetWidget.tag"),
    desktopChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.desktopChangePoint"),
    tabletChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.tabletChangePoint"),
    watchChangePoint: dart.privateName(get_responsive, "ResponsiveScreenSettings.watchChangePoint"),
    settings$1: dart.privateName(get_responsive, "ResponsiveScreen.settings"),
    __ResponsiveScreen_context: dart.privateName(get_responsive, "_#ResponsiveScreen#context"),
    __ResponsiveScreen__isPaltformDesktop: dart.privateName(get_responsive, "_#ResponsiveScreen#_isPaltformDesktop"),
    _isPaltformDesktop: dart.privateName(get_responsive, "_isPaltformDesktop"),
    _getdeviceWidth: dart.privateName(get_responsive, "_getdeviceWidth"),
    builder$8: dart.privateName(get_state, "GetBuilder.builder"),
    global$1: dart.privateName(get_state, "GetBuilder.global"),
    id: dart.privateName(get_state, "GetBuilder.id"),
    tag$3: dart.privateName(get_state, "GetBuilder.tag"),
    autoRemove$1: dart.privateName(get_state, "GetBuilder.autoRemove"),
    assignId$1: dart.privateName(get_state, "GetBuilder.assignId"),
    filter: dart.privateName(get_state, "GetBuilder.filter"),
    initState$1: dart.privateName(get_state, "GetBuilder.initState"),
    dispose$1: dart.privateName(get_state, "GetBuilder.dispose"),
    didChangeDependencies$1: dart.privateName(get_state, "GetBuilder.didChangeDependencies"),
    didUpdateWidget$1: dart.privateName(get_state, "GetBuilder.didUpdateWidget"),
    init$1: dart.privateName(get_state, "GetBuilder.init"),
    controller$1: dart.privateName(get_state, "GetBuilderState.controller"),
    _isCreator$1: dart.privateName(get_state, "_isCreator"),
    _remove: dart.privateName(get_state, "_remove"),
    _filter: dart.privateName(get_state, "_filter"),
    _subscribeToController: dart.privateName(get_state, "_subscribeToController"),
    _filterUpdate: dart.privateName(get_state, "_filterUpdate"),
    _controller$1: dart.privateName(get_view, "_controller"),
    _isCreator$2: dart.privateName(get_view, "_isCreator"),
    _widget: dart.privateName(get_widget_cache, "WidgetCache._widget"),
    _element: dart.privateName(get_widget_cache, "_element"),
    _widget$1: dart.privateName(get_widget_cache, "_widget"),
    builder$9: dart.privateName(mixin_state, "MixinBuilder.builder"),
    global$2: dart.privateName(mixin_state, "MixinBuilder.global"),
    id$1: dart.privateName(mixin_state, "MixinBuilder.id"),
    autoRemove$2: dart.privateName(mixin_state, "MixinBuilder.autoRemove"),
    initState$2: dart.privateName(mixin_state, "MixinBuilder.initState"),
    dispose$2: dart.privateName(mixin_state, "MixinBuilder.dispose"),
    didChangeDependencies$2: dart.privateName(mixin_state, "MixinBuilder.didChangeDependencies"),
    didUpdateWidget$2: dart.privateName(mixin_state, "MixinBuilder.didUpdateWidget"),
    init$2: dart.privateName(mixin_state, "MixinBuilder.init"),
    initialValue: dart.privateName(simple_builder, "ValueBuilder.initialValue"),
    builder$10: dart.privateName(simple_builder, "ValueBuilder.builder"),
    onDispose$2: dart.privateName(simple_builder, "ValueBuilder.onDispose"),
    onUpdate: dart.privateName(simple_builder, "ValueBuilder.onUpdate"),
    value: dart.privateName(simple_builder, "_ValueBuilderState.value"),
    builder$11: dart.privateName(simple_builder, "SimpleBuilder.builder"),
    _version: dart.privateName(get_queue, "_version"),
    _microtask: dart.privateName(get_queue, "_microtask"),
    _queue$1: dart.privateName(get_queue, "_queue"),
    _active: dart.privateName(get_queue, "_active"),
    _check: dart.privateName(get_queue, "_check"),
    headers$1: dart.privateName(request$, "Request.headers"),
    url$1: dart.privateName(request$, "Request.url"),
    decoder: dart.privateName(request$, "Request.decoder"),
    method: dart.privateName(request$, "Request.method"),
    contentLength: dart.privateName(request$, "Request.contentLength"),
    bodyBytes$1: dart.privateName(request$, "Request.bodyBytes"),
    followRedirects$2: dart.privateName(request$, "Request.followRedirects"),
    maxRedirects$2: dart.privateName(request$, "Request.maxRedirects"),
    persistentConnection: dart.privateName(request$, "Request.persistentConnection"),
    files$1: dart.privateName(request$, "Request.files"),
    code$1: dart.privateName(http_status, "HttpStatus.code"),
    withCredentials$1: dart.privateName(_http_request_html, "HttpRequestImpl.withCredentials"),
    timeout$2: dart.privateName(_http_request_html, "HttpRequestImpl.timeout"),
    _xhrs: dart.privateName(_http_request_html, "_xhrs"),
    $responseType: dartx.responseType,
    $onLoad: dartx.onLoad,
    $response: dartx.response,
    $result: dartx.result,
    $responseHeaders: dartx.responseHeaders,
    timeout$3: dart.privateName(request_base, "HttpRequestBase.timeout"),
    authenticator: dart.privateName(get_modifiers, "GetModifier.authenticator"),
    _requestModifiers: dart.privateName(get_modifiers, "_requestModifiers"),
    _responseModifiers: dart.privateName(get_modifiers, "_responseModifiers"),
    $codeUnitAt: dartx.codeUnitAt,
    FormatException_offset: dart.privateName(core, "FormatException.offset"),
    FormatException_source: dart.privateName(core, "FormatException.source"),
    FormatException_message: dart.privateName(core, "FormatException.message"),
    widget: dart.privateName(dialog_route, "GetDialogRoute.widget"),
    _barrierDismissible: dart.privateName(dialog_route, "_barrierDismissible"),
    _barrierLabel: dart.privateName(dialog_route, "_barrierLabel"),
    _barrierColor: dart.privateName(dialog_route, "_barrierColor"),
    _transitionDuration: dart.privateName(dialog_route, "_transitionDuration"),
    _transitionBuilder: dart.privateName(dialog_route, "_transitionBuilder"),
    treeBranch: dart.privateName(parse_route, "RouteDecoder.treeBranch"),
    parameters$2: dart.privateName(parse_route, "RouteDecoder.parameters"),
    $arguments$1: dart.privateName(parse_route, "RouteDecoder.arguments"),
    routes$2: dart.privateName(parse_route, "ParseRouteTree.routes"),
    _findRoute: dart.privateName(parse_route, "_findRoute"),
    _parseParams: dart.privateName(parse_route, "_parseParams"),
    _flattenPage: dart.privateName(parse_route, "_flattenPage"),
    _addChild: dart.privateName(parse_route, "_addChild"),
    _setter: dart.privateName(list_notifier, "_setter"),
    _remove$1: dart.privateName(list_notifier, "_remove"),
    controller$2: dart.privateName(get_transition_mixin, "CupertinoBackGestureController.controller"),
    navigator: dart.privateName(get_transition_mixin, "CupertinoBackGestureController.navigator"),
    child: dart.privateName(get_transition_mixin, "CupertinoBackGestureDetector.child"),
    gestureWidth$2: dart.privateName(get_transition_mixin, "CupertinoBackGestureDetector.gestureWidth"),
    enabledCallback: dart.privateName(get_transition_mixin, "CupertinoBackGestureDetector.enabledCallback"),
    onStartPopGesture: dart.privateName(get_transition_mixin, "CupertinoBackGestureDetector.onStartPopGesture"),
    _backGestureController: dart.privateName(get_transition_mixin, "_backGestureController"),
    __CupertinoBackGestureDetectorState__recognizer: dart.privateName(get_transition_mixin, "_#CupertinoBackGestureDetectorState#_recognizer"),
    _recognizer: dart.privateName(get_transition_mixin, "_recognizer"),
    _handlePointerDown: dart.privateName(get_transition_mixin, "_handlePointerDown"),
    _handleDragStart: dart.privateName(get_transition_mixin, "_handleDragStart"),
    _handleDragUpdate: dart.privateName(get_transition_mixin, "_handleDragUpdate"),
    _handleDragEnd: dart.privateName(get_transition_mixin, "_handleDragEnd"),
    _handleDragCancel: dart.privateName(get_transition_mixin, "_handleDragCancel"),
    _convertToLogical: dart.privateName(get_transition_mixin, "_convertToLogical"),
    delay: dart.privateName(debouncer, "Debouncer.delay"),
    _timer$1: dart.privateName(debouncer, "_timer"),
    cache: dart.privateName(get_widget_cache, "GetWidgetCacheElement.cache"),
    $replaceFirst: dartx.replaceFirst,
    $appVersion: dartx.appVersion,
    $navigator: dartx.navigator,
    message$4: dart.privateName(socket_notifier, "Close.message"),
    reason: dart.privateName(socket_notifier, "Close.reason"),
    _onMessages: dart.privateName(socket_notifier, "_onMessages"),
    _onEvents: dart.privateName(socket_notifier, "_onEvents"),
    _onCloses: dart.privateName(socket_notifier, "_onCloses"),
    _onErrors: dart.privateName(socket_notifier, "_onErrors"),
    __SocketNotifier_open: dart.privateName(socket_notifier, "_#SocketNotifier#open"),
    _tryOn: dart.privateName(socket_notifier, "_tryOn"),
    OffsetBase__dy: dart.privateName(ui, "OffsetBase._dy"),
    OffsetBase__dx: dart.privateName(ui, "OffsetBase._dx"),
    fraction: dart.privateName(circular_reveal_clipper, "CircularRevealClipper.fraction"),
    centerAlignment: dart.privateName(circular_reveal_clipper, "CircularRevealClipper.centerAlignment"),
    centerOffset: dart.privateName(circular_reveal_clipper, "CircularRevealClipper.centerOffset"),
    minRadius: dart.privateName(circular_reveal_clipper, "CircularRevealClipper.minRadius"),
    maxRadius: dart.privateName(circular_reveal_clipper, "CircularRevealClipper.maxRadius")
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T$.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 5000000
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 8000000
      });
    },
    get C3() {
      return C[3] = dart.constMap(core.String, core.String, []);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [S$.Utf8Codec__allowMalformed]: false
      });
    },
    get C5() {
      return C[5] = dart.constList([13, 10], core.int);
    },
    get C6() {
      return C[6] = dart.fn(log.defaultLogWriterCallback, T$.String__Tovoid());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: smart_management.SmartManagement.prototype,
        [S$._Enum__name]: "full",
        [S$._Enum_index]: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: smart_management.SmartManagement.prototype,
        [S$._Enum__name]: "onlyBuilder",
        [S$._Enum_index]: 1
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: smart_management.SmartManagement.prototype,
        [S$._Enum__name]: "keepFactory",
        [S$._Enum_index]: 2
      });
    },
    get C7() {
      return C[7] = dart.constList([C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10], smart_management.SmartManagement);
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: get_instance$.GetInstance.prototype
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 250000
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 200000
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 700000
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 2147483648
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 8,
        [S$.EdgeInsets_right]: 10,
        [S$.EdgeInsets_top]: 8,
        [S$.EdgeInsets_left]: 10
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 8,
        [S$.EdgeInsets_right]: 8,
        [S$.EdgeInsets_top]: 8,
        [S$.EdgeInsets_left]: 8
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: null,
        [S$.SizedBox_height]: 16,
        [S$.SizedBox_width]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 0,
        [S$.EdgeInsets_right]: 0,
        [S$.EdgeInsets_top]: 0,
        [S$.EdgeInsets_left]: 0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 16,
        [S$.EdgeInsets_right]: 16,
        [S$.EdgeInsets_top]: 16,
        [S$.EdgeInsets_left]: 16
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 4281348144
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 3000000
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: snackbar.SnackPosition.prototype,
        [S$._Enum__name]: "BOTTOM",
        [S$._Enum_index]: 1
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: snackbar.SnackStyle.prototype,
        [S$._Enum__name]: "FLOATING",
        [S$._Enum_index]: 0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: curves.Cubic.prototype,
        [S$.Cubic_d]: 1,
        [S$.Cubic_c]: 0.165,
        [S$.Cubic_b]: 0.82,
        [S$.Cubic_a]: 0.075
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 1000000
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 0,
        [S$.EdgeInsets_right]: 10,
        [S$.EdgeInsets_top]: 0,
        [S$.EdgeInsets_left]: 10
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: get_router_delegate.PopMode.prototype,
        [S$._Enum__name]: "History",
        [S$._Enum_index]: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: get_router_delegate.PreventDuplicateHandlingMode.prototype,
        [S$._Enum__name]: "ReorderRoutes",
        [S$._Enum_index]: 2
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 4278190080
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: text.Text.prototype,
        [S$.Widget_key]: null,
        [S$.Text_selectionColor]: null,
        [S$.Text_textHeightBehavior]: null,
        [S$.Text_textWidthBasis]: null,
        [S$.Text_semanticsLabel]: null,
        [S$.Text_maxLines]: null,
        [S$.Text_textScaleFactor]: null,
        [S$.Text_overflow]: null,
        [S$.Text_softWrap]: null,
        [S$.Text_locale]: null,
        [S$.Text_textDirection]: null,
        [S$.Text_textAlign]: null,
        [S$.Text_strutStyle]: null,
        [S$.Text_style]: null,
        [S$.Text_textSpan]: null,
        [S$.Text_data]: "Loading..."
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: C[33] || CT.C33,
        [S$.SizedBox_height]: 90,
        [S$.SizedBox_width]: 90
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$.Alignment_y]: 0,
        [S$.Alignment_x]: 0
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: basic.Center.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: C[32] || CT.C32,
        [S$.Align_heightFactor]: null,
        [S$.Align_widthFactor]: null,
        [S$.Align_alignment]: C[34] || CT.C34
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [S$._Enum__name]: "start",
        [S$._Enum_index]: 1
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: alignment$.AlignmentDirectional.prototype,
        [S$.AlignmentDirectional_y]: 0,
        [S$.AlignmentDirectional_start]: 1
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: text.Text.prototype,
        [S$.Widget_key]: null,
        [S$.Text_selectionColor]: null,
        [S$.Text_textHeightBehavior]: null,
        [S$.Text_textWidthBasis]: null,
        [S$.Text_semanticsLabel]: null,
        [S$.Text_maxLines]: null,
        [S$.Text_textScaleFactor]: null,
        [S$.Text_overflow]: null,
        [S$.Text_softWrap]: null,
        [S$.Text_locale]: null,
        [S$.Text_textDirection]: null,
        [S$.Text_textAlign]: null,
        [S$.Text_strutStyle]: null,
        [S$.Text_style]: null,
        [S$.Text_textSpan]: null,
        [S$.Text_data]: "Route not found"
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: scaffold.Scaffold.prototype,
        [S$.Widget_key]: null,
        [S$.Scaffold_restorationId]: null,
        [S$.Scaffold_endDrawerEnableOpenDragGesture]: true,
        [S$.Scaffold_drawerEnableOpenDragGesture]: true,
        [S$.Scaffold_drawerEdgeDragWidth]: null,
        [S$.Scaffold_drawerDragStartBehavior]: C[36] || CT.C36,
        [S$.Scaffold_primary]: true,
        [S$.Scaffold_resizeToAvoidBottomInset]: null,
        [S$.Scaffold_bottomSheet]: null,
        [S$.Scaffold_bottomNavigationBar]: null,
        [S$.Scaffold_backgroundColor]: null,
        [S$.Scaffold_drawerScrimColor]: null,
        [S$.Scaffold_onEndDrawerChanged]: null,
        [S$.Scaffold_endDrawer]: null,
        [S$.Scaffold_onDrawerChanged]: null,
        [S$.Scaffold_drawer]: null,
        [S$.Scaffold_persistentFooterAlignment]: C[37] || CT.C37,
        [S$.Scaffold_persistentFooterButtons]: null,
        [S$.Scaffold_floatingActionButtonAnimator]: null,
        [S$.Scaffold_floatingActionButtonLocation]: null,
        [S$.Scaffold_floatingActionButton]: null,
        [S$.Scaffold_body]: C[38] || CT.C38,
        [S$.Scaffold_appBar]: null,
        [S$.Scaffold_extendBodyBehindAppBar]: false,
        [S$.Scaffold_extendBody]: false
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: get_router_delegate.PopMode.prototype,
        [S$._Enum__name]: "Page",
        [S$._Enum_index]: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: null,
        [S$.SizedBox_height]: 0,
        [S$.SizedBox_width]: 0
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: navigator.DefaultTransitionDelegate.prototype
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: get_router_delegate.PreventDuplicateHandlingMode.prototype,
        [S$._Enum__name]: "PopUntilOriginalRoute",
        [S$._Enum_index]: 0
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: get_router_delegate.PreventDuplicateHandlingMode.prototype,
        [S$._Enum__name]: "DoNothing",
        [S$._Enum_index]: 1
      });
    },
    get C44() {
      return C[44] = dart.constList([C[28] || CT.C28, C[39] || CT.C39], get_router_delegate.PopMode);
    },
    get C45() {
      return C[45] = dart.constList([C[42] || CT.C42, C[43] || CT.C43, C[29] || CT.C29], get_router_delegate.PreventDuplicateHandlingMode);
    },
    get C46() {
      return C[46] = dart.constMap(core.String, T$.BuildContextToWidget(), []);
    },
    get C47() {
      return C[47] = dart.constList([], navigator.NavigatorObserver);
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: ui.Locale.prototype,
        [S$.Locale__countryCode]: "US",
        [S$.Locale_scriptCode]: null,
        [S$.Locale__languageCode]: "en"
      });
    },
    get C48() {
      return C[48] = dart.constList([C[49] || CT.C49], ui.Locale);
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: app.ThemeMode.prototype,
        [S$._Enum__name]: "system",
        [S$._Enum_index]: 0
      });
    },
    get C51() {
      return C[51] = dart.constList(["ar", "fa", "he", "ps", "ur"], core.String);
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "resumed",
        [S$._Enum_index]: 0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "inactive",
        [S$._Enum_index]: 1
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "paused",
        [S$._Enum_index]: 2
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [S$._Enum__name]: "detached",
        [S$._Enum_index]: 3
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 300000
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 400000
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "leftToRight",
        [S$._Enum_index]: 3
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "downToUp",
        [S$._Enum_index]: 5
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "upToDown",
        [S$._Enum_index]: 4
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "noTransition",
        [S$._Enum_index]: 10
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "rightToLeft",
        [S$._Enum_index]: 2
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "zoom",
        [S$._Enum_index]: 8
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "fadeIn",
        [S$._Enum_index]: 1
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "rightToLeftWithFade",
        [S$._Enum_index]: 6
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "leftToRightWithFade",
        [S$._Enum_index]: 7
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "cupertino",
        [S$._Enum_index]: 11
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "size",
        [S$._Enum_index]: 13
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "fade",
        [S$._Enum_index]: 0
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "topLevel",
        [S$._Enum_index]: 9
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "native",
        [S$._Enum_index]: 15
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "circularReveal",
        [S$._Enum_index]: 14
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: curves._Linear.prototype
      });
    },
    get C74() {
      return C[74] = dart.constList([], bindings_interface.Bindings);
    },
    get C75() {
      return C[75] = dart.constList([], get_route.GetPage);
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: transitions_type.Transition.prototype,
        [S$._Enum__name]: "cupertinoDialog",
        [S$._Enum_index]: 12
      });
    },
    get C76() {
      return C[76] = dart.constList([C[69] || CT.C69, C[64] || CT.C64, C[62] || CT.C62, C[58] || CT.C58, C[60] || CT.C60, C[59] || CT.C59, C[65] || CT.C65, C[66] || CT.C66, C[63] || CT.C63, C[70] || CT.C70, C[61] || CT.C61, C[67] || CT.C67, C[77] || CT.C77, C[68] || CT.C68, C[72] || CT.C72, C[71] || CT.C71], transitions_type.Transition);
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: ui.Color.prototype,
        [S$.Color_value]: 0
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [S$.EdgeInsets_bottom]: 8,
        [S$.EdgeInsets_right]: 8,
        [S$.EdgeInsets_top]: 16,
        [S$.EdgeInsets_left]: 8
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: snackbar.RowStyle.prototype,
        [S$._Enum__name]: "icon",
        [S$._Enum_index]: 0
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: snackbar.RowStyle.prototype,
        [S$._Enum__name]: "action",
        [S$._Enum_index]: 1
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: snackbar.RowStyle.prototype,
        [S$._Enum__name]: "all",
        [S$._Enum_index]: 2
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: snackbar.RowStyle.prototype,
        [S$._Enum__name]: "none",
        [S$._Enum_index]: 3
      });
    },
    get C80() {
      return C[80] = dart.constList([C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84], snackbar.RowStyle);
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: snackbar.SnackbarStatus.prototype,
        [S$._Enum__name]: "OPEN",
        [S$._Enum_index]: 0
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: snackbar.SnackbarStatus.prototype,
        [S$._Enum__name]: "CLOSED",
        [S$._Enum_index]: 1
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: snackbar.SnackbarStatus.prototype,
        [S$._Enum__name]: "OPENING",
        [S$._Enum_index]: 2
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: snackbar.SnackbarStatus.prototype,
        [S$._Enum__name]: "CLOSING",
        [S$._Enum_index]: 3
      });
    },
    get C85() {
      return C[85] = dart.constList([C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89], snackbar.SnackbarStatus);
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: snackbar.SnackPosition.prototype,
        [S$._Enum__name]: "TOP",
        [S$._Enum_index]: 0
      });
    },
    get C90() {
      return C[90] = dart.constList([C[91] || CT.C91, C[23] || CT.C23], snackbar.SnackPosition);
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: snackbar.SnackStyle.prototype,
        [S$._Enum__name]: "GROUNDED",
        [S$._Enum_index]: 1
      });
    },
    get C92() {
      return C[92] = dart.constList([C[24] || CT.C24, C[93] || CT.C93], snackbar.SnackStyle);
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$.Alignment_y]: -2,
        [S$.Alignment_x]: -1
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$.Alignment_y]: -1,
        [S$.Alignment_x]: -1
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$.Alignment_y]: 2,
        [S$.Alignment_x]: -1
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: alignment$.Alignment.prototype,
        [S$.Alignment_y]: 1,
        [S$.Alignment_x]: -1
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: curves.Cubic.prototype,
        [S$.Cubic_d]: 0.86,
        [S$.Cubic_c]: 0.15,
        [S$.Cubic_b]: 0.135,
        [S$.Cubic_a]: 0.785
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: curves.Interval.prototype,
        [S$0.Interval_curve]: C[99] || CT.C99,
        [S$0.Interval_end]: 0.35,
        [S$0.Interval_begin]: 0
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: box$.BoxConstraints.prototype,
        [S$0.BoxConstraints_maxHeight]: 1 / 0,
        [S$0.BoxConstraints_minHeight]: 1 / 0,
        [S$0.BoxConstraints_maxWidth]: 1 / 0,
        [S$0.BoxConstraints_minWidth]: 1 / 0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: T$.ValueKeyOfString().prototype,
        [S$0.ValueKey_value]: "dismissible"
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._Enum__name]: "completed",
        [S$._Enum_index]: 3
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._Enum__name]: "forward",
        [S$._Enum_index]: 1
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._Enum__name]: "reverse",
        [S$._Enum_index]: 2
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [S$._Enum__name]: "dismissed",
        [S$._Enum_index]: 0
      });
    },
    get C106() {
      return C[106] = dart.constList([], dart.Never);
    },
    get C107() {
      return C[107] = dart.constSet(dart.Never, []);
    },
    get C108() {
      return C[108] = dart.constMap(dart.Never, dart.Never, []);
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: core.Duration.prototype,
        [S$.Duration__duration]: 800000
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: progress_indicator._ActivityIndicatorType.prototype,
        [S$._Enum__name]: "material",
        [S$._Enum_index]: 0
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: progress_indicator.CircularProgressIndicator.prototype,
        [S$.Widget_key]: null,
        [S$0.ProgressIndicator_semanticsValue]: null,
        [S$0.ProgressIndicator_semanticsLabel]: null,
        [S$0.ProgressIndicator_valueColor]: null,
        [S$0.ProgressIndicator_color]: null,
        [S$0.ProgressIndicator_backgroundColor]: null,
        [S$0.ProgressIndicator_value]: null,
        [S$0.CircularProgressIndicator_strokeWidth]: 4,
        [S$0.CircularProgressIndicator__indicatorType]: C[112] || CT.C112
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: basic.Center.prototype,
        [S$.Widget_key]: null,
        [S$.SingleChildRenderObjectWidget_child]: C[111] || CT.C111,
        [S$.Align_heightFactor]: null,
        [S$.Align_widthFactor]: null,
        [S$.Align_alignment]: C[34] || CT.C34
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: get_responsive.ResponsiveScreenSettings.prototype,
        [S$0.ResponsiveScreenSettings_watchChangePoint]: 300,
        [S$0.ResponsiveScreenSettings_tabletChangePoint]: 600,
        [S$0.ResponsiveScreenSettings_desktopChangePoint]: 1200
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: get_responsive.ScreenType.prototype,
        [S$._Enum__name]: "Watch",
        [S$._Enum_index]: 0
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: get_responsive.ScreenType.prototype,
        [S$._Enum__name]: "Phone",
        [S$._Enum_index]: 1
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: get_responsive.ScreenType.prototype,
        [S$._Enum__name]: "Tablet",
        [S$._Enum_index]: 2
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: get_responsive.ScreenType.prototype,
        [S$._Enum__name]: "Desktop",
        [S$._Enum_index]: 3
      });
    },
    get C114() {
      return C[114] = dart.constList([C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118], get_responsive.ScreenType);
    },
    get C119() {
      return C[119] = dart.fn(core.int.parse, T$.String__Toint());
    },
    get C120() {
      return C[120] = dart.fn(get_utils$.GetUtils.capitalizeFirst, T$.StringToStringN());
    },
    get C121() {
      return C[121] = dart.constList([], core.int);
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: sockets_html.ConnectionStatus.prototype,
        [S$._Enum__name]: "connecting",
        [S$._Enum_index]: 0
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: sockets_html.ConnectionStatus.prototype,
        [S$._Enum__name]: "connected",
        [S$._Enum_index]: 1
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: sockets_html.ConnectionStatus.prototype,
        [S$._Enum__name]: "closed",
        [S$._Enum_index]: 2
      });
    },
    get C122() {
      return C[122] = dart.constList([C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125], sockets_html.ConnectionStatus);
    },
    get C126() {
      return C[126] = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], core.bool);
    },
    get C127() {
      return C[127] = dart.constList([43, 95, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122], core.int);
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: core.FormatException.prototype,
        [S$0.FormatException_offset]: null,
        [S$0.FormatException_source]: null,
        [S$0.FormatException_message]: "File is not \"File\" or \"String\" or \"List<int>\""
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: curves.Cubic.prototype,
        [S$.Cubic_d]: 1,
        [S$.Cubic_c]: 0.04,
        [S$.Cubic_b]: 1,
        [S$.Cubic_a]: 0.18
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [S$._Enum__name]: "rtl",
        [S$._Enum_index]: 0
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [S$._Enum__name]: "ltr",
        [S$._Enum_index]: 1
      });
    },
    get C132() {
      return C[132] = dart.fn(get_utils$.GetUtils.printFunction, T$.StringAnddynamicAndString__Tovoid());
    },
    get C133() {
      return C[133] = dart.constList([], core.String);
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$0.OffsetBase__dy]: 0,
        [S$0.OffsetBase__dx]: -1
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: ui.Offset.prototype,
        [S$0.OffsetBase__dy]: 0,
        [S$0.OffsetBase__dx]: 1
      });
    }
  }, false);
  var C = Array(136).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:get/get_instance/src/lifecycle.dart",
    "package:get/get_connect/connect.dart",
    "package:get/get_connect/http/src/certificates/certificates.dart",
    "package:get/get_connect/http/src/exceptions/exceptions.dart",
    "package:get/get_connect/http/src/http.dart",
    "package:get/get_connect/http/src/response/response.dart",
    "package:get/get_connect/sockets/src/sockets_html.dart",
    "package:get/get_connect/sockets/sockets.dart",
    "package:get/get_connect/http/src/multipart/form_data.dart",
    "package:get/get_connect/http/src/multipart/multipart_file.dart",
    "package:get/get_core/src/get_interface.dart",
    "package:get/get_core/src/get_main.dart",
    "package:get/get_core/src/smart_management.dart",
    "package:get/get_instance/src/bindings_interface.dart",
    "package:get/get_instance/src/get_instance.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/bottomsheet/bottomsheet.dart",
    "package:get/get_navigation/src/bottomsheet/bottomsheet.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/extension_navigation.dart",
    "package:get/get_navigation/src/nav2/get_nav_config.dart",
    "package:get/get_navigation/src/nav2/get_information_parser.dart",
    "package:get/get_state_manager/src/simple/list_notifier.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/list_notifier.dart",
    "package:get/get_navigation/src/nav2/get_router_delegate.dart",
    "package:get/get_navigation/src/nav2/router_outlet.dart",
    "package:get/get_navigation/src/root/get_cupertino_app.dart",
    "package:get/get_navigation/src/root/get_material_app.dart",
    "package:get/get_navigation/src/root/internacionalization.dart",
    "package:get/get_state_manager/src/rx_flutter/rx_disposable.dart",
    "package:get/get_state_manager/src/simple/get_controllers.dart",
    "package:get/get_state_manager/src/rx_flutter/rx_notifier.dart",
    "package:get/get_navigation/src/root/root_controller.dart",
    "package:get/get_navigation/src/routes/custom_transition.dart",
    "package:get/get_navigation/src/routes/default_route.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/get_transition_mixin.dart",
    "package:get/get_navigation/src/routes/get_transition_mixin.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/get_route.dart",
    "package:get/get_navigation/src/routes/get_route.dart",
    "package:get/get_navigation/src/routes/observers/route_observer.dart",
    "package:get/get_navigation/src/routes/route_middleware.dart",
    "package:get/get_navigation/src/routes/transitions_type.dart",
    "package:get/get_navigation/src/snackbar/snackbar.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/snackbar/snackbar.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/snackbar/snackbar_controller.dart",
    "package:get/get_navigation/src/snackbar/snackbar_controller.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_stream/get_stream.dart",
    "package:get/get_rx/src/rx_stream/rx_stream.dart",
    "package:get/get_rx/src/rx_types/rx_types.dart",
    "package:get/get_rx/src/rx_workers/rx_workers.dart",
    "package:get/get_state_manager/src/rx_flutter/rx_getx_widget.dart",
    "package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_ticket_provider_mixin.dart",
    "package:get/get_state_manager/src/rx_flutter/rx_ticket_provider_mixin.dart",
    "package:get/get_state_manager/src/simple/get_responsive.dart",
    "package:get/get_state_manager/src/simple/get_view.dart",
    "package:get/get_state_manager/src/simple/get_widget_cache.dart",
    "package:get/get_state_manager/src/simple/get_state.dart",
    "package:get/get_state_manager/src/simple/mixin_state.dart",
    "package:get/get_state_manager/src/simple/simple_builder.dart",
    "package:get/get_utils/src/get_utils/get_utils.dart",
    "package:get/get_utils/src/platform/platform.dart",
    "package:get/get_utils/src/queue/get_queue.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/request/request.dart",
    "package:get/get_connect/http/src/request/request.dart",
    "package:get/get_connect/http/src/status/http_status.dart",
    "package:get/get_connect/http/src/_http/_html/_http_request_html.dart",
    "package:get/get_connect/http/src/_http/interface/request_base.dart",
    "package:get/get_connect/http/src/interceptors/get_modifiers.dart",
    "package:get/get_connect/http/src/utils/utils.dart",
    "package:get/get_navigation/src/router_report.dart",
    "package:get/get_navigation/src/dialog/dialog_route.dart",
    "package:get/get_navigation/src/root/parse_route.dart",
    "package:get/get_rx/src/rx_workers/utils/debouncer.dart",
    "package:get/get_utils/src/extensions/internacionalization.dart",
    "package:get/get_utils/src/platform/platform_web.dart",
    "package:get/get_connect/sockets/src/socket_notifier.dart",
    "package:get/get_navigation/src/routes/default_transitions.dart",
    "package:get/get_navigation/src/routes/circular_reveal_clipper.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T$.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T$.ListOfStringTodynamic().as(C[0] || CT.C0)(T$.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T$.dynamicToNull()));
      }
    }, T$.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[S$.$toString](), stackTrace.toString()]);
      }
    }, T$.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T$.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T$.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T$.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new get_material_app.GetMaterialApp.new({title: "GetX Tab Bar Demo", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.blue}), home: new main.TabBarViewPage.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.TabBarViewPage = class TabBarViewPage extends framework.StatelessWidget {
    build(context) {
      return new tab_controller.DefaultTabController.new({length: 3, child: new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Tab Bar View"), bottom: new tabs.TabBar.new({tabs: T$.JSArrayOfWidget().of([new tabs.Tab.new({text: "Tab 1"}), new tabs.Tab.new({text: "Tab 2"}), new tabs.Tab.new({text: "Tab 3"})])})}), body: new tabs.TabBarView.new({children: T$.JSArrayOfWidget().of([new main.Tab1Page.new(), new main.Tab2Page.new(), new main.Tab3Page.new()])})})});
    }
    static ['_#new#tearOff']() {
      return new main.TabBarViewPage.new();
    }
  };
  (main.TabBarViewPage.new = function() {
    main.TabBarViewPage.__proto__.new.call(this);
    ;
  }).prototype = main.TabBarViewPage.prototype;
  dart.addTypeTests(main.TabBarViewPage);
  dart.addTypeCaches(main.TabBarViewPage);
  dart.setMethodSignature(main.TabBarViewPage, () => ({
    __proto__: dart.getMethods(main.TabBarViewPage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.TabBarViewPage, I[0]);
  main.Tab1Page = class Tab1Page extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Tab 1")}), body: new basic.Center.new({child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
              extension_navigation['GetNavigation|to'](dart.dynamic, get_main.Get, new main.Page2.new());
            }, T$.VoidTovoid()), child: new text.Text.new("Go to Page 2")})})});
    }
    static ['_#new#tearOff']() {
      return new main.Tab1Page.new();
    }
  };
  (main.Tab1Page.new = function() {
    main.Tab1Page.__proto__.new.call(this);
    ;
  }).prototype = main.Tab1Page.prototype;
  dart.addTypeTests(main.Tab1Page);
  dart.addTypeCaches(main.Tab1Page);
  dart.setMethodSignature(main.Tab1Page, () => ({
    __proto__: dart.getMethods(main.Tab1Page.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.Tab1Page, I[0]);
  main.Page2 = class Page2 extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Page 2")}), body: new basic.Center.new({child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
              extension_navigation['GetNavigation|to'](dart.dynamic, get_main.Get, new main.Page3.new());
            }, T$.VoidTovoid()), child: new text.Text.new("Go to Page 3")})})});
    }
    static ['_#new#tearOff']() {
      return new main.Page2.new();
    }
  };
  (main.Page2.new = function() {
    main.Page2.__proto__.new.call(this);
    ;
  }).prototype = main.Page2.prototype;
  dart.addTypeTests(main.Page2);
  dart.addTypeCaches(main.Page2);
  dart.setMethodSignature(main.Page2, () => ({
    __proto__: dart.getMethods(main.Page2.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.Page2, I[0]);
  main.Page3 = class Page3 extends framework.StatelessWidget {
    get items() {
      return this[S$.items];
    }
    set items(value) {
      super.items = value;
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Page 3")}), body: new scroll_view.ListView.builder({itemCount: this.items[S$.$length], itemBuilder: dart.fn((context, index) => new list_tile.ListTile.new({title: new text.Text.new(core.String.as(dart.dsend(this.items[S$.$_get](index), '_get', ["title"])))}), T$.BuildContextAndintToListTile())}), floatingActionButton: new floating_action_button.FloatingActionButton.new({onPressed: dart.fn(() => {
            extension_navigation['GetNavigation|back'](dart.dynamic, get_main.Get);
          }, T$.VoidTovoid()), child: new icon.Icon.new(icons.Icons.arrow_back)})});
    }
    static ['_#new#tearOff']() {
      return new main.Page3.new();
    }
  };
  (main.Page3.new = function() {
    this[S$.items] = [new (T$.IdentityMapOfString$String()).from(["title", "Samosas"]), new (T$.IdentityMapOfString$String()).from(["title", "Chaat"]), new (T$.IdentityMapOfString$String()).from(["title", "Pani Puri"]), new (T$.IdentityMapOfString$String()).from(["title", "Bhelpuri"]), new (T$.IdentityMapOfString$String()).from(["title", "Kachori"]), new (T$.IdentityMapOfString$String()).from(["title", "Chole Bhature"]), new (T$.IdentityMapOfString$String()).from(["title", "Matar Kulcha"]), new (T$.IdentityMapOfString$String()).from(["title", "Dosa"]), new (T$.IdentityMapOfString$String()).from(["title", "Milk"]), new (T$.IdentityMapOfString$String()).from(["title", "Bread"]), new (T$.IdentityMapOfString$String()).from(["title", "Butter"]), new (T$.IdentityMapOfString$String()).from(["title", "Cheese"]), new (T$.IdentityMapOfString$String()).from(["title", "Yoghurt"]), new (T$.IdentityMapOfString$String()).from(["title", "Sandwich"]), new (T$.IdentityMapOfString$String()).from(["title", "Pancake"]), new (T$.IdentityMapOfString$String()).from(["title", "Pie"]), new (T$.IdentityMapOfString$String()).from(["title", "Cake"]), new (T$.IdentityMapOfString$String()).from(["title", "Lemon"]), new (T$.IdentityMapOfString$String()).from(["title", "Pizza"]), new (T$.IdentityMapOfString$String()).from(["title", "Carrots"]), new (T$.IdentityMapOfString$String()).from(["title", "Grapes"]), new (T$.IdentityMapOfString$String()).from(["title", "Eggs"]), new (T$.IdentityMapOfString$String()).from(["title", "Oats"]), new (T$.IdentityMapOfString$String()).from(["title", "Pancakes"]), new (T$.IdentityMapOfString$String()).from(["title", "Crepes"]), new (T$.IdentityMapOfString$String()).from(["title", "Waffles"]), new (T$.IdentityMapOfString$String()).from(["title", "Idli"])];
    main.Page3.__proto__.new.call(this);
    ;
  }).prototype = main.Page3.prototype;
  dart.addTypeTests(main.Page3);
  dart.addTypeCaches(main.Page3);
  dart.setMethodSignature(main.Page3, () => ({
    __proto__: dart.getMethods(main.Page3.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.Page3, I[0]);
  dart.setFieldSignature(main.Page3, () => ({
    __proto__: dart.getFields(main.Page3.__proto__),
    items: dart.finalFieldType(core.List)
  }));
  main.Tab2Page = class Tab2Page extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Tab 2")}), body: new basic.Center.new({child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
              extension_navigation['GetNavigation|to'](dart.dynamic, get_main.Get, new main.Page3.new(), {fullscreenDialog: true});
            }, T$.VoidTovoid()), child: new text.Text.new("Go to Page 3 (Fullscreen)")})})});
    }
    static ['_#new#tearOff']() {
      return new main.Tab2Page.new();
    }
  };
  (main.Tab2Page.new = function() {
    main.Tab2Page.__proto__.new.call(this);
    ;
  }).prototype = main.Tab2Page.prototype;
  dart.addTypeTests(main.Tab2Page);
  dart.addTypeCaches(main.Tab2Page);
  dart.setMethodSignature(main.Tab2Page, () => ({
    __proto__: dart.getMethods(main.Tab2Page.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.Tab2Page, I[0]);
  main.Tab3Page = class Tab3Page extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Tab 3")}), body: new basic.Center.new({child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
              extension_navigation['GetNavigation|offAll'](dart.dynamic, get_main.Get, new main.Tab2Page.new());
            }, T$.VoidTovoid()), child: new text.Text.new("Go to Tab 2")})})});
    }
    static ['_#new#tearOff']() {
      return new main.Tab3Page.new();
    }
  };
  (main.Tab3Page.new = function() {
    main.Tab3Page.__proto__.new.call(this);
    ;
  }).prototype = main.Tab3Page.prototype;
  dart.addTypeTests(main.Tab3Page);
  dart.addTypeCaches(main.Tab3Page);
  dart.setMethodSignature(main.Tab3Page, () => ({
    __proto__: dart.getMethods(main.Tab3Page.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.Tab3Page, I[0]);
  main.main = function main$0() {
    binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  get_reset['GetResetExt|reset'] = function GetResetExt$124reset($this, opts) {
    let clearFactory = opts && 'clearFactory' in opts ? opts.clearFactory : true;
    let clearRouteBindings = opts && 'clearRouteBindings' in opts ? opts.clearRouteBindings : true;
    get_instance$.GetInstance.new().resetInstance({clearRouteBindings: clearRouteBindings});
    extension_navigation['NavTwoExt|clearRouteTree'](get_main.Get);
    internacionalization$['LocalesIntl|clearTranslations'](get_main.Get);
    extension_navigation['GetNavigation|resetRootNavigator'](get_main.Get);
  };
  get_reset['GetResetExt|get#reset'] = function GetResetExt$124get$35reset($this) {
    return dart.fn(opts => {
      let clearFactory = opts && 'clearFactory' in opts ? opts.clearFactory : true;
      let clearRouteBindings = opts && 'clearRouteBindings' in opts ? opts.clearRouteBindings : true;
      return get_reset['GetResetExt|reset']($this, {clearFactory: clearFactory, clearRouteBindings: clearRouteBindings});
    }, T$.__Tovoid());
  };
  lifecycle.GetLifeCycleBase = class GetLifeCycleBase extends core.Object {};
  lifecycle.GetLifeCycleBase[dart.mixinOn] = Object => class GetLifeCycleBase extends Object {
    get onStart() {
      return this[S$.onStart];
    }
    set onStart(value) {
      super.onStart = value;
    }
    get onDelete() {
      return this[S$.onDelete];
    }
    set onDelete(value) {
      super.onDelete = value;
    }
    get [S$._initialized$1]() {
      return this[S$._initialized];
    }
    set [S$._initialized$1](value) {
      this[S$._initialized] = value;
    }
    get [S$._isClosed$1]() {
      return this[S$._isClosed];
    }
    set [S$._isClosed$1](value) {
      this[S$._isClosed] = value;
    }
    onInit() {
    }
    onReady() {
    }
    onClose() {
    }
    get initialized() {
      return this[S$._initialized$1];
    }
    [S$._onStart]() {
      if (this[S$._initialized$1]) return;
      this.onInit();
      this[S$._initialized$1] = true;
    }
    get isClosed() {
      return this[S$._isClosed$1];
    }
    [S$._onDelete]() {
      if (this[S$._isClosed$1]) return;
      this[S$._isClosed$1] = true;
      this.onClose();
    }
    $configureLifeCycle() {
      this[S$._checkIfAlreadyConfigured]();
      this.onStart[S$._callback] = dart.bind(this, S$._onStart);
      this.onDelete[S$._callback] = dart.bind(this, S$._onDelete);
    }
    [S$._checkIfAlreadyConfigured]() {
      if (this[S$._initialized$1]) {
        dart.throw("You can only call configureLifeCycle once. \nThe proper place to insert it is in your class's constructor \nthat inherits GetLifeCycle.");
      }
    }
  };
  (lifecycle.GetLifeCycleBase[dart.mixinNew] = function() {
    this[S$.onStart] = new (T$.InternalFinalCallbackOfvoid()).new();
    this[S$.onDelete] = new (T$.InternalFinalCallbackOfvoid()).new();
    this[S$._initialized] = false;
    this[S$._isClosed] = false;
  }).prototype = lifecycle.GetLifeCycleBase.prototype;
  dart.addTypeTests(lifecycle.GetLifeCycleBase);
  dart.addTypeCaches(lifecycle.GetLifeCycleBase);
  lifecycle.GetLifeCycleBase[dart.implements] = () => [core.Object];
  dart.setMethodSignature(lifecycle.GetLifeCycleBase, () => ({
    __proto__: dart.getMethods(lifecycle.GetLifeCycleBase.__proto__),
    onInit: dart.fnType(dart.void, []),
    onReady: dart.fnType(dart.void, []),
    onClose: dart.fnType(dart.void, []),
    [S$._onStart]: dart.fnType(dart.void, []),
    [S$._onDelete]: dart.fnType(dart.void, []),
    $configureLifeCycle: dart.fnType(dart.void, []),
    [S$._checkIfAlreadyConfigured]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(lifecycle.GetLifeCycleBase, () => ({
    __proto__: dart.getGetters(lifecycle.GetLifeCycleBase.__proto__),
    initialized: core.bool,
    isClosed: core.bool
  }));
  dart.setLibraryUri(lifecycle.GetLifeCycleBase, I[1]);
  dart.setFieldSignature(lifecycle.GetLifeCycleBase, () => ({
    __proto__: dart.getFields(lifecycle.GetLifeCycleBase.__proto__),
    onStart: dart.finalFieldType(lifecycle.InternalFinalCallback$(dart.void)),
    onDelete: dart.finalFieldType(lifecycle.InternalFinalCallback$(dart.void)),
    [S$._initialized$1]: dart.fieldType(core.bool),
    [S$._isClosed$1]: dart.fieldType(core.bool)
  }));
  const Object_GetLifeCycleBase$36 = class Object_GetLifeCycleBase extends core.Object {};
  (Object_GetLifeCycleBase$36.new = function() {
    lifecycle.GetLifeCycleBase[dart.mixinNew].call(this);
  }).prototype = Object_GetLifeCycleBase$36.prototype;
  dart.applyMixin(Object_GetLifeCycleBase$36, lifecycle.GetLifeCycleBase);
  connect.GetConnectInterface = class GetConnectInterface extends Object_GetLifeCycleBase$36 {
    get sockets() {
      return this[S$.sockets];
    }
    set sockets(value) {
      this[S$.sockets] = value;
    }
  };
  (connect.GetConnectInterface.new = function() {
    this[S$.sockets] = null;
    connect.GetConnectInterface.__proto__.new.call(this);
    ;
  }).prototype = connect.GetConnectInterface.prototype;
  dart.addTypeTests(connect.GetConnectInterface);
  dart.addTypeCaches(connect.GetConnectInterface);
  dart.setLibraryUri(connect.GetConnectInterface, I[2]);
  dart.setFieldSignature(connect.GetConnectInterface, () => ({
    __proto__: dart.getFields(connect.GetConnectInterface.__proto__),
    sockets: dart.fieldType(dart.nullable(core.List$(sockets.GetSocket)))
  }));
  connect.GetConnect = class GetConnect extends connect.GetConnectInterface {
    get allowAutoSignedCert() {
      return this[S$.allowAutoSignedCert];
    }
    set allowAutoSignedCert(value) {
      this[S$.allowAutoSignedCert] = value;
    }
    get userAgent() {
      return this[S$.userAgent];
    }
    set userAgent(value) {
      this[S$.userAgent] = value;
    }
    get sendUserAgent() {
      return this[S$.sendUserAgent];
    }
    set sendUserAgent(value) {
      this[S$.sendUserAgent] = value;
    }
    get baseUrl() {
      return this[S$.baseUrl];
    }
    set baseUrl(value) {
      this[S$.baseUrl] = value;
    }
    get defaultContentType() {
      return this[S$.defaultContentType];
    }
    set defaultContentType(value) {
      this[S$.defaultContentType] = value;
    }
    get followRedirects() {
      return this[S$.followRedirects];
    }
    set followRedirects(value) {
      this[S$.followRedirects] = value;
    }
    get maxRedirects() {
      return this[S$.maxRedirects];
    }
    set maxRedirects(value) {
      this[S$.maxRedirects] = value;
    }
    get maxAuthRetries() {
      return this[S$.maxAuthRetries];
    }
    set maxAuthRetries(value) {
      this[S$.maxAuthRetries] = value;
    }
    get defaultDecoder() {
      return this[S$.defaultDecoder];
    }
    set defaultDecoder(value) {
      this[S$.defaultDecoder] = value;
    }
    get timeout() {
      return this[S$.timeout];
    }
    set timeout(value) {
      this[S$.timeout] = value;
    }
    get trustedCertificates() {
      return this[S$.trustedCertificates];
    }
    set trustedCertificates(value) {
      this[S$.trustedCertificates] = value;
    }
    get findProxy() {
      return this[S$.findProxy];
    }
    set findProxy(value) {
      this[S$.findProxy] = value;
    }
    get withCredentials() {
      return this[S$.withCredentials];
    }
    set withCredentials(value) {
      this[S$.withCredentials] = value;
    }
    static ['_#new#tearOff'](opts) {
      let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "getx-client";
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[1] || CT.C1;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 5;
      let sendUserAgent = opts && 'sendUserAgent' in opts ? opts.sendUserAgent : false;
      let maxAuthRetries = opts && 'maxAuthRetries' in opts ? opts.maxAuthRetries : 1;
      let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : false;
      let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
      return new connect.GetConnect.new({userAgent: userAgent, timeout: timeout, followRedirects: followRedirects, maxRedirects: maxRedirects, sendUserAgent: sendUserAgent, maxAuthRetries: maxAuthRetries, allowAutoSignedCert: allowAutoSignedCert, withCredentials: withCredentials});
    }
    get sockets() {
      let t2;
      t2 = this[S$._sockets];
      return t2 == null ? this[S$._sockets] = T$.JSArrayOfGetSocket().of([]) : t2;
    }
    set sockets(value) {
      super.sockets = value;
    }
    get httpClient() {
      let t2;
      t2 = this[S$._httpClient];
      return t2 == null ? this[S$._httpClient] = new http.GetHttpClient.new({userAgent: this.userAgent, sendUserAgent: this.sendUserAgent, timeout: this.timeout, followRedirects: this.followRedirects, maxRedirects: this.maxRedirects, maxAuthRetries: this.maxAuthRetries, allowAutoSignedCert: this.allowAutoSignedCert, baseUrl: this.baseUrl, trustedCertificates: this.trustedCertificates, withCredentials: this.withCredentials, findProxy: this.findProxy}) : t2;
    }
    get(T, url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.get(T, url, {headers: headers, contentType: contentType, query: query, decoder: decoder});
    }
    post(T, url, body, opts) {
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.post(T, url, {body: body, headers: headers, contentType: contentType, query: query, decoder: decoder, uploadProgress: uploadProgress});
    }
    put(T, url, body, opts) {
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.put(T, url, {body: body, headers: headers, contentType: contentType, query: query, decoder: decoder, uploadProgress: uploadProgress});
    }
    patch(T, url, body, opts) {
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.patch(T, url, {body: body, headers: headers, contentType: contentType, query: query, decoder: decoder, uploadProgress: uploadProgress});
    }
    request(T, url, method, opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.request(T, url, method, {body: body, headers: headers, contentType: contentType, query: query, decoder: decoder, uploadProgress: uploadProgress});
    }
    delete(T, url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      this[S$._checkIfDisposed]();
      return this.httpClient.delete(T, url, {headers: headers, contentType: contentType, query: query, decoder: decoder});
    }
    socket(url, opts) {
      let ping = opts && 'ping' in opts ? opts.ping : C[1] || CT.C1;
      this[S$._checkIfDisposed]({isHttp: false});
      let newSocket = new sockets.GetSocket.new(dart.nullCheck(this[S$._concatUrl](url)), {ping: ping});
      this.sockets[S$.$add](newSocket);
      return newSocket;
    }
    [S$._concatUrl](url) {
      if (url == null) return this.baseUrl;
      return this.baseUrl == null ? url : dart.nullCheck(this.baseUrl) + dart.notNull(url);
    }
    query(T, query, opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let variables = opts && 'variables' in opts ? opts.variables : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(response$.GraphQLResponse$(T), (function* query$() {
        try {
          let res = (yield this.post(dart.dynamic, url, new (T$.IdentityMapOfString$ObjectN()).from(["query", query, "variables", variables]), {headers: headers}));
          let listError = dart.dsend(res.body, '_get', ["errors"]);
          if (core.List.is(listError) && listError[S$.$isNotEmpty]) {
            return new (response$.GraphQLResponse$(T)).new({graphQLErrors: listError[S$.$map](exceptions.GraphQLError, dart.fn(e => {
                let t2, t2$;
                return new exceptions.GraphQLError.new({code: (t2 = dart.dsend(dart.dsend(e, '_get', ["extensions"]), '_get', ["code"]), t2 == null ? null : dart.toString(t2)), message: (t2$ = dart.dsend(e, '_get', ["message"]), t2$ == null ? null : dart.toString(t2$))});
              }, T$.dynamicToGraphQLError()))[S$.$toList]()});
          }
          return new (response$.GraphQLResponse$(T)).fromResponse(res);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Exception.is(_)) {
            return new (response$.GraphQLResponse$(T)).new({graphQLErrors: T$.JSArrayOfGraphQLError().of([new exceptions.GraphQLError.new({code: null, message: _[S$.$toString]()})])});
          } else
            throw e;
        }
      }).bind(this));
    }
    mutation(T, mutation, opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let variables = opts && 'variables' in opts ? opts.variables : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(response$.GraphQLResponse$(T), (function* mutation$() {
        try {
          let res = (yield this.post(dart.dynamic, url, new (T$.IdentityMapOfString$ObjectN()).from(["query", mutation, "variables", variables]), {headers: headers}));
          let listError = dart.dsend(res.body, '_get', ["errors"]);
          if (core.List.is(listError) && listError[S$.$isNotEmpty]) {
            return new (response$.GraphQLResponse$(T)).new({graphQLErrors: listError[S$.$map](exceptions.GraphQLError, dart.fn(e => {
                let t3, t3$;
                return new exceptions.GraphQLError.new({code: (t3 = dart.dsend(dart.dsend(e, '_get', ["extensions"]), '_get', ["code"]), t3 == null ? null : dart.toString(t3)), message: (t3$ = dart.dsend(e, '_get', ["message"]), t3$ == null ? null : dart.toString(t3$))});
              }, T$.dynamicToGraphQLError()))[S$.$toList]()});
          }
          return new (response$.GraphQLResponse$(T)).fromResponse(res);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Exception.is(_)) {
            return new (response$.GraphQLResponse$(T)).new({graphQLErrors: T$.JSArrayOfGraphQLError().of([new exceptions.GraphQLError.new({code: null, message: _[S$.$toString]()})])});
          } else
            throw e;
        }
      }).bind(this));
    }
    get isDisposed() {
      return this[S$._isDisposed];
    }
    [S$._checkIfDisposed](opts) {
      let isHttp = opts && 'isHttp' in opts ? opts.isHttp : true;
      if (this[S$._isDisposed]) {
        dart.throw("Can not emit events to disposed clients");
      }
    }
    dispose() {
      let t4;
      if (this[S$._sockets] != null) {
        for (let socket of this.sockets) {
          socket.close();
        }
        t4 = this[S$._sockets];
        t4 == null ? null : t4[S$.$clear]();
        this.sockets = null;
      }
      if (this[S$._httpClient] != null) {
        this.httpClient.close();
        this[S$._httpClient] = null;
      }
      this[S$._isDisposed] = true;
    }
  };
  (connect.GetConnect.new = function(opts) {
    let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "getx-client";
    let timeout = opts && 'timeout' in opts ? opts.timeout : C[1] || CT.C1;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 5;
    let sendUserAgent = opts && 'sendUserAgent' in opts ? opts.sendUserAgent : false;
    let maxAuthRetries = opts && 'maxAuthRetries' in opts ? opts.maxAuthRetries : 1;
    let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : false;
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
    this[S$.baseUrl] = null;
    this[S$.defaultContentType] = "application/json; charset=utf-8";
    this[S$.defaultDecoder] = null;
    this[S$.trustedCertificates] = null;
    this[S$.findProxy] = null;
    this[S$._httpClient] = null;
    this[S$._sockets] = null;
    this[S$._isDisposed] = false;
    this[S$.userAgent] = userAgent;
    this[S$.timeout] = timeout;
    this[S$.followRedirects] = followRedirects;
    this[S$.maxRedirects] = maxRedirects;
    this[S$.sendUserAgent] = sendUserAgent;
    this[S$.maxAuthRetries] = maxAuthRetries;
    this[S$.allowAutoSignedCert] = allowAutoSignedCert;
    this[S$.withCredentials] = withCredentials;
    connect.GetConnect.__proto__.new.call(this);
    this.$configureLifeCycle();
  }).prototype = connect.GetConnect.prototype;
  dart.addTypeTests(connect.GetConnect);
  dart.addTypeCaches(connect.GetConnect);
  dart.setMethodSignature(connect.GetConnect, () => ({
    __proto__: dart.getMethods(connect.GetConnect.__proto__),
    get: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    post: dart.gFnType(T => [async.Future$(response$.Response$(T)), [dart.nullable(core.String), dart.dynamic], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    put: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String, dart.dynamic], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    patch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String, dart.dynamic], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    request: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String, core.String], {body: dart.dynamic, contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    delete: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    socket: dart.fnType(sockets.GetSocket, [core.String], {ping: core.Duration}, {}),
    [S$._concatUrl]: dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]),
    query: dart.gFnType(T => [async.Future$(response$.GraphQLResponse$(T)), [core.String], {headers: dart.nullable(core.Map$(core.String, core.String)), url: dart.nullable(core.String), variables: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    mutation: dart.gFnType(T => [async.Future$(response$.GraphQLResponse$(T)), [core.String], {headers: dart.nullable(core.Map$(core.String, core.String)), url: dart.nullable(core.String), variables: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    [S$._checkIfDisposed]: dart.fnType(dart.void, [], {isHttp: core.bool}, {}),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(connect.GetConnect, () => ({
    __proto__: dart.getGetters(connect.GetConnect.__proto__),
    sockets: core.List$(sockets.GetSocket),
    httpClient: http.GetHttpClient,
    isDisposed: core.bool
  }));
  dart.setLibraryUri(connect.GetConnect, I[2]);
  dart.setFieldSignature(connect.GetConnect, () => ({
    __proto__: dart.getFields(connect.GetConnect.__proto__),
    allowAutoSignedCert: dart.fieldType(core.bool),
    userAgent: dart.fieldType(core.String),
    sendUserAgent: dart.fieldType(core.bool),
    baseUrl: dart.fieldType(dart.nullable(core.String)),
    defaultContentType: dart.fieldType(core.String),
    followRedirects: dart.fieldType(core.bool),
    maxRedirects: dart.fieldType(core.int),
    maxAuthRetries: dart.fieldType(core.int),
    defaultDecoder: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [dart.dynamic]))),
    timeout: dart.fieldType(core.Duration),
    trustedCertificates: dart.fieldType(dart.nullable(core.List$(certificates.TrustedCertificate))),
    findProxy: dart.fieldType(dart.nullable(dart.fnType(core.String, [core.Uri]))),
    [S$._httpClient]: dart.fieldType(dart.nullable(http.GetHttpClient)),
    [S$._sockets]: dart.fieldType(dart.nullable(core.List$(sockets.GetSocket))),
    withCredentials: dart.fieldType(core.bool),
    [S$._isDisposed]: dart.fieldType(core.bool)
  }));
  get_core.ambiguate = function ambiguate(T, value) {
    return value;
  };
  const _is_InternalFinalCallback_default = Symbol('_is_InternalFinalCallback_default');
  lifecycle.InternalFinalCallback$ = dart.generic(T => {
    var __t$VoidToT = () => (__t$VoidToT = dart.constFn(dart.fnType(T, [])))();
    var __t$VoidToNT = () => (__t$VoidToNT = dart.constFn(dart.nullable(__t$VoidToT())))();
    class InternalFinalCallback extends core.Object {
      get [S$._callback]() {
        return this[S$._callback$1];
      }
      set [S$._callback](value) {
        this[S$._callback$1] = __t$VoidToNT().as(value);
      }
      static ['_#new#tearOff'](T, opts) {
        let callback = opts && 'callback' in opts ? opts.callback : null;
        return new (lifecycle.InternalFinalCallback$(T)).new({callback: callback});
      }
      call() {
        return dart.nullCheck(this[S$._callback])();
      }
    }
    (InternalFinalCallback.new = function(opts) {
      let callback = opts && 'callback' in opts ? opts.callback : null;
      this[S$._callback$1] = callback;
      ;
    }).prototype = InternalFinalCallback.prototype;
    dart.addTypeTests(InternalFinalCallback);
    InternalFinalCallback.prototype[_is_InternalFinalCallback_default] = true;
    dart.addTypeCaches(InternalFinalCallback);
    dart.setMethodSignature(InternalFinalCallback, () => ({
      __proto__: dart.getMethods(InternalFinalCallback.__proto__),
      call: dart.fnType(T, [])
    }));
    dart.setLibraryUri(InternalFinalCallback, I[1]);
    dart.setFieldSignature(InternalFinalCallback, () => ({
      __proto__: dart.getFields(InternalFinalCallback.__proto__),
      [S$._callback]: dart.fieldType(dart.nullable(dart.fnType(T, [])))
    }));
    return InternalFinalCallback;
  });
  lifecycle.InternalFinalCallback = lifecycle.InternalFinalCallback$();
  dart.addTypeTests(lifecycle.InternalFinalCallback, _is_InternalFinalCallback_default);
  const Object_GetLifeCycleBase$36$ = class Object_GetLifeCycleBase extends core.Object {};
  (Object_GetLifeCycleBase$36$.new = function() {
    lifecycle.GetLifeCycleBase[dart.mixinNew].call(this);
  }).prototype = Object_GetLifeCycleBase$36$.prototype;
  dart.applyMixin(Object_GetLifeCycleBase$36$, lifecycle.GetLifeCycleBase);
  lifecycle.GetLifeCycle = class GetLifeCycle extends Object_GetLifeCycleBase$36$ {};
  (lifecycle.GetLifeCycle.new = function() {
    lifecycle.GetLifeCycle.__proto__.new.call(this);
    this.$configureLifeCycle();
  }).prototype = lifecycle.GetLifeCycle.prototype;
  dart.addTypeTests(lifecycle.GetLifeCycle);
  dart.addTypeCaches(lifecycle.GetLifeCycle);
  dart.setLibraryUri(lifecycle.GetLifeCycle, I[1]);
  lifecycle.GetxServiceMixin = class GetxServiceMixin extends core.Object {};
  lifecycle.GetxServiceMixin[dart.mixinOn] = Object => class GetxServiceMixin extends Object {};
  (lifecycle.GetxServiceMixin[dart.mixinNew] = function() {
  }).prototype = lifecycle.GetxServiceMixin.prototype;
  dart.addTypeTests(lifecycle.GetxServiceMixin);
  dart.addTypeCaches(lifecycle.GetxServiceMixin);
  lifecycle.GetxServiceMixin[dart.implements] = () => [core.Object];
  dart.setLibraryUri(lifecycle.GetxServiceMixin, I[1]);
  certificates.TrustedCertificate = class TrustedCertificate extends core.Object {
    get bytes() {
      return this[S$.bytes];
    }
    set bytes(value) {
      super.bytes = value;
    }
    static ['_#new#tearOff'](bytes) {
      return new certificates.TrustedCertificate.new(bytes);
    }
  };
  (certificates.TrustedCertificate.new = function(bytes) {
    this[S$.bytes] = bytes;
    ;
  }).prototype = certificates.TrustedCertificate.prototype;
  dart.addTypeTests(certificates.TrustedCertificate);
  dart.addTypeCaches(certificates.TrustedCertificate);
  dart.setLibraryUri(certificates.TrustedCertificate, I[3]);
  dart.setFieldSignature(certificates.TrustedCertificate, () => ({
    __proto__: dart.getFields(certificates.TrustedCertificate.__proto__),
    bytes: dart.finalFieldType(core.List$(core.int))
  }));
  exceptions.GetHttpException = class GetHttpException extends core.Object {
    get message() {
      return this[S$.message];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[S$.uri];
    }
    set uri(value) {
      super.uri = value;
    }
    static ['_#new#tearOff'](message, uri = null) {
      return new exceptions.GetHttpException.new(message, uri);
    }
    toString() {
      return this.message;
    }
  };
  (exceptions.GetHttpException.new = function(message, uri = null) {
    this[S$.message] = message;
    this[S$.uri] = uri;
    ;
  }).prototype = exceptions.GetHttpException.prototype;
  dart.addTypeTests(exceptions.GetHttpException);
  dart.addTypeCaches(exceptions.GetHttpException);
  exceptions.GetHttpException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exceptions.GetHttpException, I[4]);
  dart.setFieldSignature(exceptions.GetHttpException, () => ({
    __proto__: dart.getFields(exceptions.GetHttpException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(exceptions.GetHttpException, ['toString']);
  exceptions.GraphQLError = class GraphQLError extends core.Object {
    get message() {
      return this[S$.message$1];
    }
    set message(value) {
      super.message = value;
    }
    get code() {
      return this[S$.code];
    }
    set code(value) {
      super.code = value;
    }
    static ['_#new#tearOff'](opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      return new exceptions.GraphQLError.new({code: code, message: message});
    }
    toString() {
      return "GETCONNECT ERROR:\n\tcode:" + dart.str(this.code) + "\n\tmessage:" + dart.str(this.message);
    }
  };
  (exceptions.GraphQLError.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    this[S$.code] = code;
    this[S$.message$1] = message;
    ;
  }).prototype = exceptions.GraphQLError.prototype;
  dart.addTypeTests(exceptions.GraphQLError);
  dart.addTypeCaches(exceptions.GraphQLError);
  dart.setLibraryUri(exceptions.GraphQLError, I[4]);
  dart.setFieldSignature(exceptions.GraphQLError, () => ({
    __proto__: dart.getFields(exceptions.GraphQLError.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String)),
    code: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(exceptions.GraphQLError, ['toString']);
  exceptions.UnauthorizedException = class UnauthorizedException extends core.Object {
    toString() {
      return "Operation Unauthorized";
    }
    static ['_#new#tearOff']() {
      return new exceptions.UnauthorizedException.new();
    }
  };
  (exceptions.UnauthorizedException.new = function() {
    ;
  }).prototype = exceptions.UnauthorizedException.prototype;
  dart.addTypeTests(exceptions.UnauthorizedException);
  dart.addTypeCaches(exceptions.UnauthorizedException);
  exceptions.UnauthorizedException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exceptions.UnauthorizedException, I[4]);
  dart.defineExtensionMethods(exceptions.UnauthorizedException, ['toString']);
  exceptions.UnexpectedFormat = class UnexpectedFormat extends core.Object {
    get message() {
      return this[S$.message$2];
    }
    set message(value) {
      super.message = value;
    }
    static ['_#new#tearOff'](message) {
      return new exceptions.UnexpectedFormat.new(message);
    }
    toString() {
      return "Unexpected format: " + this.message;
    }
  };
  (exceptions.UnexpectedFormat.new = function(message) {
    this[S$.message$2] = message;
    ;
  }).prototype = exceptions.UnexpectedFormat.prototype;
  dart.addTypeTests(exceptions.UnexpectedFormat);
  dart.addTypeCaches(exceptions.UnexpectedFormat);
  exceptions.UnexpectedFormat[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exceptions.UnexpectedFormat, I[4]);
  dart.setFieldSignature(exceptions.UnexpectedFormat, () => ({
    __proto__: dart.getFields(exceptions.UnexpectedFormat.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(exceptions.UnexpectedFormat, ['toString']);
  http.GetHttpClient = class GetHttpClient extends core.Object {
    get userAgent() {
      return this[S$.userAgent$1];
    }
    set userAgent(value) {
      this[S$.userAgent$1] = value;
    }
    get baseUrl() {
      return this[S$.baseUrl$1];
    }
    set baseUrl(value) {
      this[S$.baseUrl$1] = value;
    }
    get defaultContentType() {
      return this[S$.defaultContentType$1];
    }
    set defaultContentType(value) {
      this[S$.defaultContentType$1] = value;
    }
    get followRedirects() {
      return this[S$.followRedirects$1];
    }
    set followRedirects(value) {
      this[S$.followRedirects$1] = value;
    }
    get maxRedirects() {
      return this[S$.maxRedirects$1];
    }
    set maxRedirects(value) {
      this[S$.maxRedirects$1] = value;
    }
    get maxAuthRetries() {
      return this[S$.maxAuthRetries$1];
    }
    set maxAuthRetries(value) {
      this[S$.maxAuthRetries$1] = value;
    }
    get sendUserAgent() {
      return this[S$.sendUserAgent$1];
    }
    set sendUserAgent(value) {
      this[S$.sendUserAgent$1] = value;
    }
    get defaultDecoder() {
      return this[S$.defaultDecoder$1];
    }
    set defaultDecoder(value) {
      this[S$.defaultDecoder$1] = value;
    }
    get timeout() {
      return this[S$.timeout$1];
    }
    set timeout(value) {
      this[S$.timeout$1] = value;
    }
    get errorSafety() {
      return this[S$.errorSafety];
    }
    set errorSafety(value) {
      this[S$.errorSafety] = value;
    }
    get findProxy() {
      return this[S$.findProxy$1];
    }
    set findProxy(value) {
      this[S$.findProxy$1] = value;
    }
    static ['_#new#tearOff'](opts) {
      let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "getx-client";
      let timeout = opts && 'timeout' in opts ? opts.timeout : C[2] || CT.C2;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 5;
      let sendUserAgent = opts && 'sendUserAgent' in opts ? opts.sendUserAgent : false;
      let maxAuthRetries = opts && 'maxAuthRetries' in opts ? opts.maxAuthRetries : 1;
      let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : false;
      let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
      let trustedCertificates = opts && 'trustedCertificates' in opts ? opts.trustedCertificates : null;
      let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
      let findProxy = opts && 'findProxy' in opts ? opts.findProxy : null;
      return new http.GetHttpClient.new({userAgent: userAgent, timeout: timeout, followRedirects: followRedirects, maxRedirects: maxRedirects, sendUserAgent: sendUserAgent, maxAuthRetries: maxAuthRetries, allowAutoSignedCert: allowAutoSignedCert, baseUrl: baseUrl, trustedCertificates: trustedCertificates, withCredentials: withCredentials, findProxy: findProxy});
    }
    addAuthenticator(T, auth) {
      this[S$._modifier].authenticator = T$.RequestToFutureOrOfRequest().as(auth);
    }
    addRequestModifier(T, interceptor) {
      this[S$._modifier].addRequestModifier(T, interceptor);
    }
    removeRequestModifier(T, interceptor) {
      this[S$._modifier].removeRequestModifier(T, interceptor);
    }
    addResponseModifier(T, interceptor) {
      this[S$._modifier].addResponseModifier(T, interceptor);
    }
    removeResponseModifier(T, interceptor) {
      this[S$._modifier].removeResponseModifier(T, interceptor);
    }
    [S$._createUri](url, query) {
      if (this.baseUrl != null) {
        url = dart.nullCheck(this.baseUrl) + dart.nullCheck(url);
      }
      let uri = core.Uri.parse(dart.nullCheck(url));
      if (query != null) {
        return uri.replace({queryParameters: query});
      }
      return uri;
    }
    [S$._requestWithBody](T, url, contentType, body, method, query, decoder, uploadProgress) {
      return async.async(request$.Request$(T), (function* _requestWithBody() {
        let t4, t4$, t4$0, t4$1, t4$2;
        let bodyBytes = null;
        let bodyStream = null;
        let headers = new (T$.IdentityMapOfString$String()).new();
        if (this.sendUserAgent) {
          headers[S$.$_set]("user-agent", this.userAgent);
        }
        if (form_data.FormData.is(body)) {
          bodyBytes = (yield body.toBytes());
          headers[S$.$_set]("content-length", bodyBytes[S$.$length][S$.$toString]());
          headers[S$.$_set]("content-type", "multipart/form-data; boundary=" + body.boundary);
        } else if (contentType != null && contentType[S$.$toLowerCase]() === "application/x-www-form-urlencoded" && core.Map.is(body)) {
          let parts = [];
          T$.MapOfString$dynamic().as(body)[S$.$forEach](dart.fn((key, value) => {
            parts[S$.$add](core.Uri.encodeQueryComponent(key) + "=" + core.Uri.encodeQueryComponent(dart.toString(value)));
          }, T$.StringAnddynamicTovoid()));
          let formData = parts[S$.$join]("&");
          bodyBytes = convert.utf8.encode(formData);
          headers[S$.$_set]("content-length", bodyBytes[S$.$length][S$.$toString]());
          headers[S$.$_set]("content-type", contentType);
        } else if (core.Map.is(body) || core.List.is(body)) {
          let jsonString = convert.json.encode(body);
          bodyBytes = convert.utf8.encode(jsonString);
          headers[S$.$_set]("content-length", bodyBytes[S$.$length][S$.$toString]());
          headers[S$.$_set]("content-type", (t4 = contentType, t4 == null ? this.defaultContentType : t4));
        } else if (typeof body == 'string') {
          bodyBytes = convert.utf8.encode(body);
          headers[S$.$_set]("content-length", bodyBytes[S$.$length][S$.$toString]());
          headers[S$.$_set]("content-type", (t4$ = contentType, t4$ == null ? this.defaultContentType : t4$));
        } else if (body == null) {
          headers[S$.$_set]("content-type", (t4$0 = contentType, t4$0 == null ? this.defaultContentType : t4$0));
          headers[S$.$_set]("content-length", "0");
        } else {
          if (!this.errorSafety) {
            dart.throw(new exceptions.UnexpectedFormat.new("body cannot be " + dart.str(dart.runtimeType(body))));
          }
        }
        if (bodyBytes != null) {
          bodyStream = this[S$._trackProgress](bodyBytes, uploadProgress);
        }
        let uri = this[S$._createUri](url, query);
        return request$.Request$(T).new({method: method, url: uri, headers: headers, bodyBytes: bodyStream, contentLength: (t4$2 = (t4$1 = bodyBytes, t4$1 == null ? null : t4$1[S$.$length]), t4$2 == null ? 0 : t4$2), followRedirects: this.followRedirects, maxRedirects: this.maxRedirects, decoder: decoder});
      }).bind(this));
    }
    [S$._trackProgress](bodyBytes, uploadProgress) {
      let total = 0;
      let length = bodyBytes[S$.$length];
      let byteStream = T$.StreamOfListOfint().fromIterable(bodyBytes[S$.$map](T$.ListOfint(), dart.fn(i => T$.JSArrayOfint().of([i]), T$.intToListOfint()))).transform(T$.ListOfint(), new (T$._StreamHandlerTransformerOfListOfint$ListOfint()).new({handleData: dart.fn((data, sink) => {
          total = total + data[S$.$length];
          if (uploadProgress != null) {
            let percent = total / length * 100;
            uploadProgress(percent);
          }
          sink.add(data);
        }, T$.ListOfintAndEventSinkOfListOfintTovoid())}));
      return byteStream;
    }
    [S$._setSimpleHeaders](headers, contentType) {
      let t4;
      headers[S$.$_set]("content-type", (t4 = contentType, t4 == null ? this.defaultContentType : t4));
      if (this.sendUserAgent) {
        headers[S$.$_set]("user-agent", this.userAgent);
      }
    }
    [S$._performRequest](T, handler, opts) {
      let authenticate = opts && 'authenticate' in opts ? opts.authenticate : false;
      let requestNumber = opts && 'requestNumber' in opts ? opts.requestNumber : 1;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(response$.Response$(T), (function* _performRequest() {
        let t4;
        let request = (yield handler());
        t4 = headers;
        t4 == null ? null : t4[S$.$forEach](dart.fn((key, value) => {
          request.headers[S$.$_set](key, value);
        }, T$.StringAndStringTovoid()));
        if (authenticate) yield dart.nullCheck(this[S$._modifier].authenticator)(request);
        let newRequest = (yield this[S$._modifier].modifyRequest(T, request));
        this[S$._httpClient$1].timeout = this.timeout;
        try {
          let response = (yield this[S$._httpClient$1].send(T, newRequest));
          let newResponse = (yield this[S$._modifier].modifyResponse(T, newRequest, response));
          if (401 === newResponse.statusCode && this[S$._modifier].authenticator != null && requestNumber <= this.maxAuthRetries) {
            return this[S$._performRequest](T, handler, {authenticate: true, requestNumber: requestNumber + 1, headers: newRequest.headers});
          } else if (401 === newResponse.statusCode) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.UnauthorizedException.new());
            } else {
              return new (response$.Response$(T)).new({request: newRequest, headers: newResponse.headers, statusCode: newResponse.statusCode, body: newResponse.body, bodyBytes: newResponse.bodyBytes, bodyString: newResponse.bodyString, statusText: newResponse.statusText});
            }
          }
          return newResponse;
        } catch (e) {
          let err = dart.getThrown(e);
          if (core.Exception.is(err)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(err[S$.$toString]()));
            } else {
              return new (response$.Response$(T)).new({request: newRequest, headers: null, statusCode: null, body: null, statusText: dart.str(err)});
            }
          } else
            throw e;
        }
      }).bind(this));
    }
    [S$._get](T, url, contentType, query, decoder) {
      let t5;
      let headers = new (T$.IdentityMapOfString$String()).new();
      this[S$._setSimpleHeaders](headers, contentType);
      let uri = this[S$._createUri](url, query);
      return async.Future$(request$.Request$(T)).value(request$.Request$(T).new({method: "get", url: uri, headers: headers, decoder: (t5 = decoder, t5 == null ? dart.nullable(dart.fnType(T, [dart.dynamic])).as(this.defaultDecoder) : t5), contentLength: 0, followRedirects: this.followRedirects, maxRedirects: this.maxRedirects}));
    }
    [S$._request](T, url, method, opts) {
      let t5;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let body = opts && 'body' in opts ? opts.body : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      return this[S$._requestWithBody](T, url, contentType, body, method, query, (t5 = decoder, t5 == null ? dart.nullable(dart.fnType(T, [dart.dynamic])).as(this.defaultDecoder) : t5), uploadProgress);
    }
    [S$._delete](T, url, contentType, query, decoder) {
      let t5;
      let headers = new (T$.IdentityMapOfString$String()).new();
      this[S$._setSimpleHeaders](headers, contentType);
      let uri = this[S$._createUri](url, query);
      return request$.Request$(T).new({method: "delete", url: uri, headers: headers, decoder: (t5 = decoder, t5 == null ? dart.nullable(dart.fnType(T, [dart.dynamic])).as(this.defaultDecoder) : t5)});
    }
    patch(T, url, opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      return async.async(response$.Response$(T), (function* patch() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => this[S$._request](T, url, "patch", {contentType: contentType, body: body, query: query, decoder: decoder, uploadProgress: uploadProgress}), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    post(T, url, opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      return async.async(response$.Response$(T), (function* post() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => this[S$._request](T, url, "post", {contentType: contentType, body: body, query: query, decoder: decoder, uploadProgress: uploadProgress}), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    request(T, url, method, opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      return async.async(response$.Response$(T), (function* request() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => this[S$._request](T, url, method, {contentType: contentType, query: query, body: body, decoder: decoder, uploadProgress: uploadProgress}), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    put(T, url, opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      let uploadProgress = opts && 'uploadProgress' in opts ? opts.uploadProgress : null;
      return async.async(response$.Response$(T), (function* put() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => this[S$._request](T, url, "put", {contentType: contentType, query: query, body: body, decoder: decoder, uploadProgress: uploadProgress}), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    get(T, url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      return async.async(response$.Response$(T), (function* get() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => this[S$._get](T, url, contentType, query, decoder), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    delete(T, url, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : null;
      let query = opts && 'query' in opts ? opts.query : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      return async.async(response$.Response$(T), (function* $delete() {
        try {
          let response = (yield this[S$._performRequest](T, dart.fn(() => async.async(request$.Request$(T), (function*() {
            return this[S$._delete](T, url, contentType, query, decoder);
          }).bind(this)), dart.fnType(async.Future$(request$.Request$(T)), [])), {headers: headers}));
          return response;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            if (!this.errorSafety) {
              dart.throw(new exceptions.GetHttpException.new(e[S$.$toString]()));
            }
            return async.Future$(response$.Response$(T)).value(new (response$.Response$(T)).new({statusText: "Can not connect to server. Reason: " + dart.str(e)}));
          } else
            throw e$;
        }
      }).bind(this));
    }
    close() {
      this[S$._httpClient$1].close();
    }
  };
  (http.GetHttpClient.new = function(opts) {
    let userAgent = opts && 'userAgent' in opts ? opts.userAgent : "getx-client";
    let timeout = opts && 'timeout' in opts ? opts.timeout : C[2] || CT.C2;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 5;
    let sendUserAgent = opts && 'sendUserAgent' in opts ? opts.sendUserAgent : false;
    let maxAuthRetries = opts && 'maxAuthRetries' in opts ? opts.maxAuthRetries : 1;
    let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : false;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let trustedCertificates = opts && 'trustedCertificates' in opts ? opts.trustedCertificates : null;
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
    let findProxy = opts && 'findProxy' in opts ? opts.findProxy : null;
    this[S$.defaultContentType$1] = "application/json; charset=utf-8";
    this[S$.defaultDecoder$1] = null;
    this[S$.errorSafety] = true;
    this[S$.findProxy$1] = null;
    this[S$.userAgent$1] = userAgent;
    this[S$.timeout$1] = timeout;
    this[S$.followRedirects$1] = followRedirects;
    this[S$.maxRedirects$1] = maxRedirects;
    this[S$.sendUserAgent$1] = sendUserAgent;
    this[S$.maxAuthRetries$1] = maxAuthRetries;
    this[S$.baseUrl$1] = baseUrl;
    this[S$._httpClient$1] = new _http_request_html.HttpRequestImpl.new({allowAutoSignedCert: allowAutoSignedCert, trustedCertificates: trustedCertificates, withCredentials: withCredentials, findProxy: findProxy});
    this[S$._modifier] = new get_modifiers.GetModifier.new();
    ;
  }).prototype = http.GetHttpClient.prototype;
  dart.addTypeTests(http.GetHttpClient);
  dart.addTypeCaches(http.GetHttpClient);
  dart.setMethodSignature(http.GetHttpClient, () => ({
    __proto__: dart.getMethods(http.GetHttpClient.__proto__),
    addAuthenticator: dart.gFnType(T => [dart.void, [dart.fnType(async.FutureOr$(request$.Request$(T)), [request$.Request$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
    addRequestModifier: dart.gFnType(T => [dart.void, [dart.fnType(async.FutureOr$(request$.Request$(T)), [request$.Request$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
    removeRequestModifier: dart.gFnType(T => [dart.void, [dart.fnType(async.FutureOr$(request$.Request$(T)), [request$.Request$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
    addResponseModifier: dart.gFnType(T => [dart.void, [dart.fnType(dart.dynamic, [request$.Request$(dart.nullable(T)), response$.Response$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
    removeResponseModifier: dart.gFnType(T => [dart.void, [dart.fnType(dart.dynamic, [request$.Request$(dart.nullable(T)), response$.Response$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
    [S$._createUri]: dart.fnType(core.Uri, [dart.nullable(core.String), dart.nullable(core.Map$(core.String, dart.dynamic))]),
    [S$._requestWithBody]: dart.gFnType(T => [async.Future$(request$.Request$(T)), [dart.nullable(core.String), dart.nullable(core.String), dart.dynamic, core.String, dart.nullable(core.Map$(core.String, dart.dynamic)), dart.nullable(dart.fnType(T, [dart.dynamic])), dart.nullable(dart.fnType(dart.dynamic, [core.double]))]], T => [dart.nullable(core.Object)]),
    [S$._trackProgress]: dart.fnType(async.Stream$(core.List$(core.int)), [core.List$(core.int), dart.nullable(dart.fnType(dart.dynamic, [core.double]))]),
    [S$._setSimpleHeaders]: dart.fnType(dart.void, [core.Map$(core.String, core.String), dart.nullable(core.String)]),
    [S$._performRequest]: dart.gFnType(T => [async.Future$(response$.Response$(T)), [dart.fnType(async.Future$(request$.Request$(T)), [])], {authenticate: core.bool, headers: dart.nullable(core.Map$(core.String, core.String)), requestNumber: core.int}, {}], T => [dart.nullable(core.Object)]),
    [S$._get]: dart.gFnType(T => [async.Future$(request$.Request$(T)), [core.String, dart.nullable(core.String), dart.nullable(core.Map$(core.String, dart.dynamic)), dart.nullable(dart.fnType(T, [dart.dynamic]))]], T => [dart.nullable(core.Object)]),
    [S$._request]: dart.gFnType(T => [async.Future$(request$.Request$(T)), [dart.nullable(core.String), core.String], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic]))}, {body: dart.dynamic, query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}], T => [dart.nullable(core.Object)]),
    [S$._delete]: dart.gFnType(T => [request$.Request$(T), [core.String, dart.nullable(core.String), dart.nullable(core.Map$(core.String, dart.dynamic)), dart.nullable(dart.fnType(T, [dart.dynamic]))]], T => [dart.nullable(core.Object)]),
    patch: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {body: dart.dynamic, contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    post: dart.gFnType(T => [async.Future$(response$.Response$(T)), [dart.nullable(core.String)], {body: dart.dynamic, contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    request: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String, core.String], {body: dart.dynamic, contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    put: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {body: dart.dynamic, contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic)), uploadProgress: dart.nullable(dart.fnType(dart.dynamic, [core.double]))}, {}], T => [dart.nullable(core.Object)]),
    get: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    delete: dart.gFnType(T => [async.Future$(response$.Response$(T)), [core.String], {contentType: dart.nullable(core.String), decoder: dart.nullable(dart.fnType(T, [dart.dynamic])), headers: dart.nullable(core.Map$(core.String, core.String)), query: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(http.GetHttpClient, I[5]);
  dart.setFieldSignature(http.GetHttpClient, () => ({
    __proto__: dart.getFields(http.GetHttpClient.__proto__),
    userAgent: dart.fieldType(core.String),
    baseUrl: dart.fieldType(dart.nullable(core.String)),
    defaultContentType: dart.fieldType(core.String),
    followRedirects: dart.fieldType(core.bool),
    maxRedirects: dart.fieldType(core.int),
    maxAuthRetries: dart.fieldType(core.int),
    sendUserAgent: dart.fieldType(core.bool),
    defaultDecoder: dart.fieldType(dart.nullable(dart.fnType(dart.dynamic, [dart.dynamic]))),
    timeout: dart.fieldType(core.Duration),
    errorSafety: dart.fieldType(core.bool),
    [S$._httpClient$1]: dart.finalFieldType(request_base.HttpRequestBase),
    [S$._modifier]: dart.finalFieldType(get_modifiers.GetModifier),
    findProxy: dart.fieldType(dart.nullable(dart.fnType(core.String, [core.Uri])))
  }));
  const _is_Response_default = Symbol('_is_Response_default');
  response$.Response$ = dart.generic(T => {
    class Response extends core.Object {
      get request() {
        return this[S$.request];
      }
      set request(value) {
        super.request = value;
      }
      get headers() {
        return this[S$.headers];
      }
      set headers(value) {
        super.headers = value;
      }
      get statusCode() {
        return this[S$.statusCode];
      }
      set statusCode(value) {
        super.statusCode = value;
      }
      get statusText() {
        return this[S$.statusText];
      }
      set statusText(value) {
        super.statusText = value;
      }
      get bodyBytes() {
        return this[S$.bodyBytes];
      }
      set bodyBytes(value) {
        super.bodyBytes = value;
      }
      get bodyString() {
        return this[S$.bodyString];
      }
      set bodyString(value) {
        super.bodyString = value;
      }
      get body() {
        return this[S$.body];
      }
      set body(value) {
        super.body = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let request = opts && 'request' in opts ? opts.request : null;
        let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
        let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
        let bodyString = opts && 'bodyString' in opts ? opts.bodyString : null;
        let statusText = opts && 'statusText' in opts ? opts.statusText : "";
        let headers = opts && 'headers' in opts ? opts.headers : C[3] || CT.C3;
        let body = opts && 'body' in opts ? opts.body : null;
        return new (response$.Response$(T)).new({request: request, statusCode: statusCode, bodyBytes: bodyBytes, bodyString: bodyString, statusText: statusText, headers: headers, body: body});
      }
      get status() {
        return new http_status.HttpStatus.new(this.statusCode);
      }
      get hasError() {
        return this.status.hasError;
      }
      get isOk() {
        return !this.hasError;
      }
      get unauthorized() {
        return this.status.isUnauthorized;
      }
    }
    (Response.new = function(opts) {
      let request = opts && 'request' in opts ? opts.request : null;
      let statusCode = opts && 'statusCode' in opts ? opts.statusCode : null;
      let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
      let bodyString = opts && 'bodyString' in opts ? opts.bodyString : null;
      let statusText = opts && 'statusText' in opts ? opts.statusText : "";
      let headers = opts && 'headers' in opts ? opts.headers : C[3] || CT.C3;
      let body = opts && 'body' in opts ? opts.body : null;
      this[S$.request] = request;
      this[S$.statusCode] = statusCode;
      this[S$.bodyBytes] = bodyBytes;
      this[S$.bodyString] = bodyString;
      this[S$.statusText] = statusText;
      this[S$.headers] = headers;
      this[S$.body] = body;
      ;
    }).prototype = Response.prototype;
    dart.addTypeTests(Response);
    Response.prototype[_is_Response_default] = true;
    dart.addTypeCaches(Response);
    dart.setGetterSignature(Response, () => ({
      __proto__: dart.getGetters(Response.__proto__),
      status: http_status.HttpStatus,
      hasError: core.bool,
      isOk: core.bool,
      unauthorized: core.bool
    }));
    dart.setLibraryUri(Response, I[6]);
    dart.setFieldSignature(Response, () => ({
      __proto__: dart.getFields(Response.__proto__),
      request: dart.finalFieldType(dart.nullable(request$.Request)),
      headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String))),
      statusCode: dart.finalFieldType(dart.nullable(core.int)),
      statusText: dart.finalFieldType(dart.nullable(core.String)),
      bodyBytes: dart.finalFieldType(dart.nullable(async.Stream$(core.List$(core.int)))),
      bodyString: dart.finalFieldType(dart.nullable(core.String)),
      body: dart.finalFieldType(dart.nullable(T))
    }));
    return Response;
  });
  response$.Response = response$.Response$();
  dart.addTypeTests(response$.Response, _is_Response_default);
  const _is_GraphQLResponse_default = Symbol('_is_GraphQLResponse_default');
  response$.GraphQLResponse$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class GraphQLResponse extends response$.Response$(T) {
      get graphQLErrors() {
        return this[S$.graphQLErrors];
      }
      set graphQLErrors(value) {
        super.graphQLErrors = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let body = opts && 'body' in opts ? opts.body : null;
        let graphQLErrors = opts && 'graphQLErrors' in opts ? opts.graphQLErrors : null;
        return new (response$.GraphQLResponse$(T)).new({body: body, graphQLErrors: graphQLErrors});
      }
      static ['_#fromResponse#tearOff'](T, res) {
        return new (response$.GraphQLResponse$(T)).fromResponse(res);
      }
    }
    (GraphQLResponse.new = function(opts) {
      let body = opts && 'body' in opts ? opts.body : null;
      let graphQLErrors = opts && 'graphQLErrors' in opts ? opts.graphQLErrors : null;
      this[S$.graphQLErrors] = graphQLErrors;
      GraphQLResponse.__proto__.new.call(this, {body: body});
      ;
    }).prototype = GraphQLResponse.prototype;
    (GraphQLResponse.fromResponse = function(res) {
      this[S$.graphQLErrors] = null;
      GraphQLResponse.__proto__.new.call(this, {request: res.request, statusCode: res.statusCode, bodyBytes: res.bodyBytes, bodyString: res.bodyString, statusText: res.statusText, headers: res.headers, body: __t$TN().as(dart.dsend(res.body, '_get', ["data"]))});
      ;
    }).prototype = GraphQLResponse.prototype;
    dart.addTypeTests(GraphQLResponse);
    GraphQLResponse.prototype[_is_GraphQLResponse_default] = true;
    dart.addTypeCaches(GraphQLResponse);
    dart.setLibraryUri(GraphQLResponse, I[6]);
    dart.setFieldSignature(GraphQLResponse, () => ({
      __proto__: dart.getFields(GraphQLResponse.__proto__),
      graphQLErrors: dart.finalFieldType(dart.nullable(core.List$(exceptions.GraphQLError)))
    }));
    return GraphQLResponse;
  });
  response$.GraphQLResponse = response$.GraphQLResponse$();
  dart.addTypeTests(response$.GraphQLResponse, _is_GraphQLResponse_default);
  response$.HeaderValue = class HeaderValue extends core.Object {
    static ['_#new#tearOff'](_value = "", parameters = null) {
      return new response$.HeaderValue.new(_value, parameters);
    }
    static parse(value, opts) {
      let parameterSeparator = opts && 'parameterSeparator' in opts ? opts.parameterSeparator : ";";
      let valueSeparator = opts && 'valueSeparator' in opts ? opts.valueSeparator : null;
      let preserveBackslash = opts && 'preserveBackslash' in opts ? opts.preserveBackslash : false;
      let result = new response$.HeaderValue.new();
      result[S$._parse](value, parameterSeparator, valueSeparator, preserveBackslash);
      return result;
    }
    get value() {
      return this[S$._value];
    }
    [S$._ensureParameters]() {
      this[S$._parameters] == null ? this[S$._parameters] = new (T$.IdentityMapOfString$String()).new() : null;
    }
    get parameters() {
      this[S$._ensureParameters]();
      this[S$._unmodifiableParameters] == null ? this[S$._unmodifiableParameters] = new (T$.UnmodifiableMapViewOfString$StringN()).new(dart.nullCheck(this[S$._parameters])) : null;
      return this[S$._unmodifiableParameters];
    }
    toString() {
      let stringBuffer = new core.StringBuffer.new();
      stringBuffer.write(this[S$._value]);
      if (this.parameters != null && dart.nullCheck(this.parameters)[S$.$isNotEmpty]) {
        dart.nullCheck(this[S$._parameters])[S$.$forEach](dart.fn((name, value) => {
          let t11;
          t11 = stringBuffer;
          (() => {
            t11.write("; ");
            t11.write(name);
            t11.write("=");
            t11.write(value);
            return t11;
          })();
        }, T$.StringAndStringNTovoid()));
      }
      return stringBuffer.toString();
    }
    [S$._parse](value, parameterSeparator, valueSeparator, preserveBackslash) {
      let index = 0;
      function done() {
        return index === value.length;
      }
      dart.fn(done, T$.VoidTobool());
      function bump() {
        while (!done()) {
          if (value[S$.$_get](index) !== " " && value[S$.$_get](index) !== "\t") return;
          index = index + 1;
        }
      }
      dart.fn(bump, T$.VoidTovoid());
      function parseValue() {
        let start = index;
        while (!done()) {
          if (value[S$.$_get](index) === " " || value[S$.$_get](index) === "\t" || value[S$.$_get](index) === valueSeparator || value[S$.$_get](index) === parameterSeparator) {
            break;
          }
          index = index + 1;
        }
        return value[S$.$substring](start, index);
      }
      dart.fn(parseValue, T$.VoidToString());
      function expect(expected) {
        if (done() || value[S$.$_get](index) !== expected) {
          dart.throw(new core.StateError.new("Failed to parse header value"));
        }
        index = index + 1;
      }
      dart.fn(expect, T$.StringTovoid());
      function maybeExpect(expected) {
        if (value[S$.$_get](index) === expected) index = index + 1;
      }
      dart.fn(maybeExpect, T$.StringTovoid());
      const parseParameters = () => {
        let parameters = new (T$.IdentityMapOfString$StringN()).new();
        this[S$._parameters] = new (T$.UnmodifiableMapViewOfString$StringN()).new(parameters);
        function parseParameterName() {
          let start = index;
          while (!done()) {
            if (value[S$.$_get](index) === " " || value[S$.$_get](index) === "\t" || value[S$.$_get](index) === "=" || value[S$.$_get](index) === parameterSeparator || value[S$.$_get](index) === valueSeparator) {
              break;
            }
            index = index + 1;
          }
          return value[S$.$substring](start, index)[S$.$toLowerCase]();
        }
        dart.fn(parseParameterName, T$.VoidToString());
        function parseParameterValue() {
          if (!done() && value[S$.$_get](index) === "\"") {
            let stringBuffer = new core.StringBuffer.new();
            index = index + 1;
            while (!done()) {
              if (value[S$.$_get](index) === "\\") {
                if (index + 1 === value.length) {
                  dart.throw(new core.StateError.new("Failed to parse header value"));
                }
                if (preserveBackslash && value[S$.$_get](index + 1) !== "\"") {
                  stringBuffer.write(value[S$.$_get](index));
                }
                index = index + 1;
              } else if (value[S$.$_get](index) === "\"") {
                index = index + 1;
                break;
              }
              stringBuffer.write(value[S$.$_get](index));
              index = index + 1;
            }
            return stringBuffer.toString();
          } else {
            let val = parseValue();
            return val === "" ? null : val;
          }
        }
        dart.fn(parseParameterValue, T$.VoidToStringN());
        while (!done()) {
          bump();
          if (done()) return;
          let name = parseParameterName();
          bump();
          if (done()) {
            parameters[S$.$_set](name, null);
            return;
          }
          maybeExpect("=");
          bump();
          if (done()) {
            parameters[S$.$_set](name, null);
            return;
          }
          let valueParameter = parseParameterValue();
          if (name === "charset" && valueParameter != null) {
            valueParameter = valueParameter[S$.$toLowerCase]();
          }
          parameters[S$.$_set](name, valueParameter);
          bump();
          if (done()) return;
          if (value[S$.$_get](index) === valueSeparator) return;
          expect(parameterSeparator);
        }
      };
      dart.fn(parseParameters, T$.VoidTovoid());
      bump();
      this[S$._value] = parseValue();
      bump();
      if (done()) return;
      maybeExpect(parameterSeparator);
      parseParameters();
    }
  };
  (response$.HeaderValue.new = function(_value = "", parameters = null) {
    this[S$._parameters] = null;
    this[S$._unmodifiableParameters] = null;
    this[S$._value] = _value;
    if (parameters != null) {
      this[S$._parameters] = T$.HashMapOfString$String().from(parameters);
    }
  }).prototype = response$.HeaderValue.prototype;
  dart.addTypeTests(response$.HeaderValue);
  dart.addTypeCaches(response$.HeaderValue);
  dart.setMethodSignature(response$.HeaderValue, () => ({
    __proto__: dart.getMethods(response$.HeaderValue.__proto__),
    [S$._ensureParameters]: dart.fnType(dart.void, []),
    [S$._parse]: dart.fnType(dart.void, [core.String, core.String, dart.nullable(core.String), core.bool])
  }));
  dart.setStaticMethodSignature(response$.HeaderValue, () => ['parse']);
  dart.setGetterSignature(response$.HeaderValue, () => ({
    __proto__: dart.getGetters(response$.HeaderValue.__proto__),
    value: core.String,
    parameters: dart.nullable(core.Map$(core.String, dart.nullable(core.String)))
  }));
  dart.setLibraryUri(response$.HeaderValue, I[6]);
  dart.setFieldSignature(response$.HeaderValue, () => ({
    __proto__: dart.getFields(response$.HeaderValue.__proto__),
    [S$._value]: dart.fieldType(core.String),
    [S$._parameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.nullable(core.String)))),
    [S$._unmodifiableParameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.nullable(core.String))))
  }));
  dart.defineExtensionMethods(response$.HeaderValue, ['toString']);
  response$.bodyBytesToString = function bodyBytesToString(bodyBytes, headers) {
    return request$['BodyBytesStream|bytesToString'](bodyBytes, response$._encodingForHeaders(headers));
  };
  response$._encodingForHeaders = function _encodingForHeaders(headers) {
    return response$._encodingForCharset(dart.nullCheck(response$._contentTypeForHeaders(headers).parameters)[S$.$_get]("charset"));
  };
  response$._encodingForCharset = function _encodingForCharset(charset, fallback = C[4] || CT.C4) {
    let t11;
    if (charset == null) return fallback;
    t11 = convert.Encoding.getByName(charset);
    return t11 == null ? fallback : t11;
  };
  response$._contentTypeForHeaders = function _contentTypeForHeaders(headers) {
    let contentType = headers[S$.$_get]("content-type");
    if (contentType != null) return response$.HeaderValue.parse(contentType);
    return new response$.HeaderValue.new("application/octet-stream");
  };
  sockets_html.BaseWebSocket = class BaseWebSocket extends core.Object {
    get url() {
      return this[S$.url];
    }
    set url(value) {
      this[S$.url] = value;
    }
    get socket() {
      return this[S$.socket];
    }
    set socket(value) {
      this[S$.socket] = value;
    }
    get socketNotifier() {
      return this[S$.socketNotifier];
    }
    set socketNotifier(value) {
      this[S$.socketNotifier] = value;
    }
    get ping() {
      return this[S$.ping];
    }
    set ping(value) {
      this[S$.ping] = value;
    }
    get isDisposed() {
      return this[S$.isDisposed];
    }
    set isDisposed(value) {
      this[S$.isDisposed] = value;
    }
    get allowSelfSigned() {
      return this[S$.allowSelfSigned];
    }
    set allowSelfSigned(value) {
      this[S$.allowSelfSigned] = value;
    }
    get connectionStatus() {
      return this[S$.connectionStatus];
    }
    set connectionStatus(value) {
      this[S$.connectionStatus] = value;
    }
    static ['_#new#tearOff'](url, opts) {
      let ping = opts && 'ping' in opts ? opts.ping : C[1] || CT.C1;
      let allowSelfSigned = opts && 'allowSelfSigned' in opts ? opts.allowSelfSigned : true;
      return new sockets_html.BaseWebSocket.new(url, {ping: ping, allowSelfSigned: allowSelfSigned});
    }
    close(status = null, reason = null) {
      let t11;
      t11 = this.socket;
      t11 == null ? null : t11.close(status, reason);
    }
    connect() {
      let t12;
      try {
        this.connectionStatus = sockets_html.ConnectionStatus.connecting;
        this.socket = html.WebSocket.new(this.url);
        dart.nullCheck(this.socket)[S$.$onOpen].listen(dart.fn(e => {
          let t11;
          t11 = this.socketNotifier;
          t11 == null ? null : t11.open();
          this[S$._t] = async.Timer.periodic(this.ping, dart.fn(t => {
            dart.nullCheck(this.socket).send("");
          }, T$.TimerTovoid()));
          this.connectionStatus = sockets_html.ConnectionStatus.connected;
        }, T$.EventTovoid()));
        dart.nullCheck(this.socket)[S$.$onMessage].listen(dart.fn(event => {
          dart.nullCheck(this.socketNotifier).notifyData(event[S$.$data]);
        }, T$.MessageEventTovoid()));
        dart.nullCheck(this.socket)[S$.$onClose].listen(dart.fn(e => {
          let t11;
          t11 = this[S$._t];
          t11 == null ? null : t11.cancel();
          this.connectionStatus = sockets_html.ConnectionStatus.closed;
          dart.nullCheck(this.socketNotifier).notifyClose(new socket_notifier.Close.new(e.reason, e.code));
        }, T$.CloseEventTovoid()));
        dart.nullCheck(this.socket)[S$.$onError].listen(dart.fn(event => {
          let t11;
          t11 = this[S$._t];
          t11 == null ? null : t11.cancel();
          dart.nullCheck(this.socketNotifier).notifyError(new socket_notifier.Close.new(event[S$.$toString](), 0));
          this.connectionStatus = sockets_html.ConnectionStatus.closed;
        }, T$.EventTovoid()));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Exception.is(e)) {
          t12 = this[S$._t];
          t12 == null ? null : t12.cancel();
          dart.nullCheck(this.socketNotifier).notifyError(new socket_notifier.Close.new(e[S$.$toString](), 500));
          this.connectionStatus = sockets_html.ConnectionStatus.closed;
        } else
          throw e$;
      }
    }
    dispose() {
      dart.nullCheck(this.socketNotifier).dispose();
      this.socketNotifier = null;
      this.isDisposed = true;
    }
    emit(event, data) {
      this.send(convert.jsonEncode(new (T$.IdentityMapOfString$dynamic()).from(["type", event, "data", data])));
    }
    on(event, message) {
      dart.nullCheck(this.socketNotifier).addEvents(event, message);
    }
    onClose(fn) {
      dart.nullCheck(this.socketNotifier).addCloses(fn);
    }
    onError(fn) {
      dart.nullCheck(this.socketNotifier).addErrors(fn);
    }
    onMessage(fn) {
      dart.nullCheck(this.socketNotifier).addMessages(fn);
    }
    onOpen(fn) {
      dart.nullCheck(this.socketNotifier).open = fn;
    }
    send(data) {
      let t13, t12;
      if (this.connectionStatus === sockets_html.ConnectionStatus.closed) {
        this.connect();
      }
      if (this.socket != null && dart.nullCheck(this.socket)[S$.$readyState] === 1) {
        dart.nullCheck(this.socket).send(data);
      } else {
        t12 = get_main.Get;
        t13 = "WebSocket not connected, message " + dart.str(data) + " not sent";
        t12.log(t13);
      }
    }
  };
  (sockets_html.BaseWebSocket.new = function(url, opts) {
    let ping = opts && 'ping' in opts ? opts.ping : C[1] || CT.C1;
    let allowSelfSigned = opts && 'allowSelfSigned' in opts ? opts.allowSelfSigned : true;
    this[S$.socket] = null;
    this[S$.socketNotifier] = new socket_notifier.SocketNotifier.new();
    this[S$.isDisposed] = false;
    this[S$.connectionStatus] = null;
    this[S$._t] = null;
    this[S$.url] = url;
    this[S$.ping] = ping;
    this[S$.allowSelfSigned] = allowSelfSigned;
    this.url = this.url[S$.$startsWith]("https") ? this.url[S$.$replaceAll]("https:", "wss:") : this.url[S$.$replaceAll]("http:", "ws:");
  }).prototype = sockets_html.BaseWebSocket.prototype;
  dart.addTypeTests(sockets_html.BaseWebSocket);
  dart.addTypeCaches(sockets_html.BaseWebSocket);
  dart.setMethodSignature(sockets_html.BaseWebSocket, () => ({
    __proto__: dart.getMethods(sockets_html.BaseWebSocket.__proto__),
    close: dart.fnType(dart.void, [], [dart.nullable(core.int), dart.nullable(core.String)]),
    connect: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    emit: dart.fnType(dart.void, [core.String, dart.dynamic]),
    on: dart.fnType(dart.void, [core.String, dart.fnType(dart.void, [dart.dynamic])]),
    onClose: dart.fnType(dart.void, [dart.fnType(dart.void, [socket_notifier.Close])]),
    onError: dart.fnType(dart.void, [dart.fnType(dart.void, [socket_notifier.Close])]),
    onMessage: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.dynamic])]),
    onOpen: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    send: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setLibraryUri(sockets_html.BaseWebSocket, I[7]);
  dart.setFieldSignature(sockets_html.BaseWebSocket, () => ({
    __proto__: dart.getFields(sockets_html.BaseWebSocket.__proto__),
    url: dart.fieldType(core.String),
    socket: dart.fieldType(dart.nullable(html.WebSocket)),
    socketNotifier: dart.fieldType(dart.nullable(socket_notifier.SocketNotifier)),
    ping: dart.fieldType(core.Duration),
    isDisposed: dart.fieldType(core.bool),
    allowSelfSigned: dart.fieldType(core.bool),
    connectionStatus: dart.fieldType(dart.nullable(sockets_html.ConnectionStatus)),
    [S$._t]: dart.fieldType(dart.nullable(async.Timer))
  }));
  sockets.GetSocket = class GetSocket extends sockets_html.BaseWebSocket {
    static ['_#new#tearOff'](url, opts) {
      let ping = opts && 'ping' in opts ? opts.ping : C[1] || CT.C1;
      let allowSelfSigned = opts && 'allowSelfSigned' in opts ? opts.allowSelfSigned : true;
      return new sockets.GetSocket.new(url, {ping: ping, allowSelfSigned: allowSelfSigned});
    }
  };
  (sockets.GetSocket.new = function(url, opts) {
    let ping = opts && 'ping' in opts ? opts.ping : C[1] || CT.C1;
    let allowSelfSigned = opts && 'allowSelfSigned' in opts ? opts.allowSelfSigned : true;
    sockets.GetSocket.__proto__.new.call(this, url, {ping: ping, allowSelfSigned: allowSelfSigned});
    ;
  }).prototype = sockets.GetSocket.prototype;
  dart.addTypeTests(sockets.GetSocket);
  dart.addTypeCaches(sockets.GetSocket);
  dart.setLibraryUri(sockets.GetSocket, I[8]);
  form_data.FormData = class FormData extends core.Object {
    get boundary() {
      return this[S$.boundary];
    }
    set boundary(value) {
      super.boundary = value;
    }
    get fields() {
      return this[S$.fields];
    }
    set fields(value) {
      super.fields = value;
    }
    get files() {
      return this[S$.files];
    }
    set files(value) {
      super.files = value;
    }
    static ['_#new#tearOff'](map) {
      return new form_data.FormData.new(map);
    }
    static _getBoundary() {
      let random = math.Random.new();
      let list = T$.ListOfint().generate(70 - "getx-http-boundary-".length, dart.fn(_ => utils.boundaryCharacters[S$.$_get](random.nextInt(utils.boundaryCharacters[S$.$length])), T$.intToint()), {growable: false});
      return "getx-http-boundary-" + core.String.fromCharCodes(list);
    }
    [S$._fieldHeader](name, value) {
      let header = "content-disposition: form-data; name=\"" + utils.browserEncode(name) + "\"";
      if (!utils.isPlainAscii(value)) {
        header = header + "\r\n" + "content-type: text/plain; charset=utf-8\r\n" + "content-transfer-encoding: binary";
      }
      return header + "\r\n\r\n";
    }
    [S$._fileHeader](file) {
      let header = "content-disposition: form-data; name=\"" + utils.browserEncode(file.key) + "\"";
      header = header + "; filename=\"" + utils.browserEncode(file.value.filename) + "\"";
      header = header + "\r\n" + "content-type: " + file.value.contentType;
      return header + "\r\n\r\n";
    }
    get length() {
      let length = 0;
      for (let item of this.fields) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S$._fieldHeader](item.key, item.value))[S$.$length] + convert.utf8.encode(item.value)[S$.$length] + "\r\n".length);
      }
      for (let file of this.files) {
        length = length + ("--".length + 70 + "\r\n".length + convert.utf8.encode(this[S$._fileHeader](file))[S$.$length] + dart.nullCheck(file.value.length) + "\r\n".length);
      }
      return length + "--".length + 70 + "--\r\n".length;
    }
    toBytes() {
      return request$['BodyBytesStream|toBytes'](this[S$._encode]());
    }
    [S$._encode]() {
      return new (T$._AsyncStarImplOfListOfint()).new((function* _encode(stream) {
        let line = C[5] || CT.C5;
        let separator = convert.utf8.encode("--" + this.boundary + "\r\n");
        let close = convert.utf8.encode("--" + this.boundary + "--\r\n");
        for (let field of this.fields) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S$._fieldHeader](field.key, field.value)))) return;
          yield;
          if (stream.add(convert.utf8.encode(field.value))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        for (let file of this.files) {
          if (stream.add(separator)) return;
          yield;
          if (stream.add(convert.utf8.encode(this[S$._fileHeader](file)))) return;
          yield;
          if (stream.addStream(dart.nullCheck(file.value.stream))) return;
          yield;
          if (stream.add(line)) return;
          yield;
        }
        if (stream.add(close)) return;
        yield;
      }).bind(this)).stream;
    }
  };
  (form_data.FormData.new = function(map) {
    this[S$.fields] = T$.JSArrayOfMapEntryOfString$String().of([]);
    this[S$.files] = T$.JSArrayOfMapEntryOfString$MultipartFile().of([]);
    this[S$.boundary] = form_data.FormData._getBoundary();
    map[S$.$forEach](dart.fn((key, value) => {
      if (value == null) return;
      if (multipart_file.MultipartFile.is(value)) {
        this.files[S$.$add](new (T$.MapEntryOfString$MultipartFile()).__(key, value));
      } else if (T$.ListOfMultipartFile().is(value)) {
        this.files[S$.$addAll](value[S$.$map](T$.MapEntryOfString$MultipartFile(), dart.fn(e => new (T$.MapEntryOfString$MultipartFile()).__(key, e), T$.MultipartFileToMapEntryOfString$MultipartFile())));
      } else if (core.List.is(value)) {
        this.fields[S$.$addAll](value[S$.$map](T$.MapEntryOfString$String(), dart.fn(e => new (T$.MapEntryOfString$String()).__(key, dart.toString(e)), T$.dynamicToMapEntryOfString$String())));
      } else {
        this.fields[S$.$add](new (T$.MapEntryOfString$String()).__(key, dart.toString(value)));
      }
    }, T$.StringAnddynamicTovoid()));
  }).prototype = form_data.FormData.prototype;
  dart.addTypeTests(form_data.FormData);
  dart.addTypeCaches(form_data.FormData);
  dart.setMethodSignature(form_data.FormData, () => ({
    __proto__: dart.getMethods(form_data.FormData.__proto__),
    [S$._fieldHeader]: dart.fnType(core.String, [core.String, core.String]),
    [S$._fileHeader]: dart.fnType(core.String, [core.MapEntry$(core.String, multipart_file.MultipartFile)]),
    toBytes: dart.fnType(async.Future$(core.List$(core.int)), []),
    [S$._encode]: dart.fnType(async.Stream$(core.List$(core.int)), [])
  }));
  dart.setStaticMethodSignature(form_data.FormData, () => ['_getBoundary']);
  dart.setGetterSignature(form_data.FormData, () => ({
    __proto__: dart.getGetters(form_data.FormData.__proto__),
    length: core.int
  }));
  dart.setLibraryUri(form_data.FormData, I[9]);
  dart.setFieldSignature(form_data.FormData, () => ({
    __proto__: dart.getFields(form_data.FormData.__proto__),
    boundary: dart.finalFieldType(core.String),
    fields: dart.finalFieldType(core.List$(core.MapEntry$(core.String, core.String))),
    files: dart.finalFieldType(core.List$(core.MapEntry$(core.String, multipart_file.MultipartFile)))
  }));
  dart.setStaticFieldSignature(form_data.FormData, () => ['_maxBoundaryLength']);
  dart.defineLazy(form_data.FormData, {
    /*form_data.FormData._maxBoundaryLength*/get _maxBoundaryLength() {
      return 70;
    }
  }, false);
  multipart_file.MultipartFile = class MultipartFile extends core.Object {
    get contentType() {
      return this[S$.contentType];
    }
    set contentType(value) {
      super.contentType = value;
    }
    get filename() {
      return this[S$.filename];
    }
    set filename(value) {
      super.filename = value;
    }
    static ['_#new#tearOff'](data, opts) {
      let filename = opts && 'filename' in opts ? opts.filename : null;
      let contentType = opts && 'contentType' in opts ? opts.contentType : "application/octet-stream";
      return new multipart_file.MultipartFile.new(data, {filename: filename, contentType: contentType});
    }
    get stream() {
      return this[S$._stream];
    }
    get length() {
      return this[S$._length];
    }
  };
  (multipart_file.MultipartFile.new = function(data, opts) {
    let filename = opts && 'filename' in opts ? opts.filename : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : "application/octet-stream";
    this[S$._stream] = null;
    this[S$._length] = null;
    this[S$.filename] = filename;
    this[S$.contentType] = contentType;
    this[S$._bytes] = _file_decoder_html.fileToBytes(data);
    this[S$._length] = this[S$._bytes][S$.$length];
    this[S$._stream] = request$['BodyBytesStream|fromBytes'](this[S$._bytes]);
  }).prototype = multipart_file.MultipartFile.prototype;
  dart.addTypeTests(multipart_file.MultipartFile);
  dart.addTypeCaches(multipart_file.MultipartFile);
  dart.setGetterSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getGetters(multipart_file.MultipartFile.__proto__),
    stream: dart.nullable(async.Stream$(core.List$(core.int))),
    length: dart.nullable(core.int)
  }));
  dart.setLibraryUri(multipart_file.MultipartFile, I[10]);
  dart.setFieldSignature(multipart_file.MultipartFile, () => ({
    __proto__: dart.getFields(multipart_file.MultipartFile.__proto__),
    [S$._bytes]: dart.finalFieldType(core.List$(core.int)),
    contentType: dart.finalFieldType(core.String),
    [S$._stream]: dart.fieldType(dart.nullable(async.Stream$(core.List$(core.int)))),
    [S$._length]: dart.fieldType(dart.nullable(core.int)),
    filename: dart.finalFieldType(core.String)
  }));
  get_interface.GetInterface = class GetInterface extends core.Object {
    get smartManagement() {
      return this[S$.smartManagement];
    }
    set smartManagement(value) {
      this[S$.smartManagement] = value;
    }
    get routerDelegate() {
      return this[S$.routerDelegate];
    }
    set routerDelegate(value) {
      this[S$.routerDelegate] = value;
    }
    get routeInformationParser() {
      return this[S$.routeInformationParser];
    }
    set routeInformationParser(value) {
      this[S$.routeInformationParser] = value;
    }
    get isLogEnable() {
      return this[S$.isLogEnable];
    }
    set isLogEnable(value) {
      this[S$.isLogEnable] = value;
    }
    get log() {
      return this[S$.log];
    }
    set log(value) {
      this[S$.log] = value;
    }
  };
  (get_interface.GetInterface.new = function() {
    this[S$.smartManagement] = smart_management.SmartManagement.full;
    this[S$.routerDelegate] = null;
    this[S$.routeInformationParser] = null;
    this[S$.isLogEnable] = true;
    this[S$.log] = C[6] || CT.C6;
    ;
  }).prototype = get_interface.GetInterface.prototype;
  dart.addTypeTests(get_interface.GetInterface);
  dart.addTypeCaches(get_interface.GetInterface);
  dart.setLibraryUri(get_interface.GetInterface, I[11]);
  dart.setFieldSignature(get_interface.GetInterface, () => ({
    __proto__: dart.getFields(get_interface.GetInterface.__proto__),
    smartManagement: dart.fieldType(smart_management.SmartManagement),
    routerDelegate: dart.fieldType(dart.nullable(router.RouterDelegate)),
    routeInformationParser: dart.fieldType(dart.nullable(router.RouteInformationParser)),
    isLogEnable: dart.fieldType(core.bool),
    log: dart.fieldType(dart.fnType(dart.void, [core.String], {isError: core.bool}, {}))
  }));
  get_main._GetImpl = class _GetImpl extends get_interface.GetInterface {
    static ['_#new#tearOff']() {
      return new get_main._GetImpl.new();
    }
  };
  (get_main._GetImpl.new = function() {
    get_main._GetImpl.__proto__.new.call(this);
    ;
  }).prototype = get_main._GetImpl.prototype;
  dart.addTypeTests(get_main._GetImpl);
  dart.addTypeCaches(get_main._GetImpl);
  dart.setLibraryUri(get_main._GetImpl, I[12]);
  dart.defineLazy(get_main, {
    /*get_main.Get*/get Get() {
      return new get_main._GetImpl.new();
    }
  }, false);
  log.defaultLogWriterCallback = function defaultLogWriterCallback(value, opts) {
    let isError = opts && 'isError' in opts ? opts.isError : false;
    if (isError || get_main.Get.isLogEnable) developer.log(value, {name: "GETX"});
  };
  smart_management.SmartManagement = class SmartManagement extends core._Enum {
    [S$._enumToString]() {
      return "SmartManagement." + this[S$._name];
    }
  };
  (smart_management.SmartManagement.new = function(index, name) {
    smart_management.SmartManagement.__proto__.new.call(this, index, name);
    ;
  }).prototype = smart_management.SmartManagement.prototype;
  dart.addTypeTests(smart_management.SmartManagement);
  dart.addTypeCaches(smart_management.SmartManagement);
  dart.setMethodSignature(smart_management.SmartManagement, () => ({
    __proto__: dart.getMethods(smart_management.SmartManagement.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(smart_management.SmartManagement, I[13]);
  dart.setStaticFieldSignature(smart_management.SmartManagement, () => ['values', 'full', 'onlyBuilder', 'keepFactory']);
  dart.defineLazy(smart_management.SmartManagement, {
    /*smart_management.SmartManagement.values*/get values() {
      return C[7] || CT.C7;
    },
    /*smart_management.SmartManagement.full*/get full() {
      return C[8] || CT.C8;
    },
    /*smart_management.SmartManagement.onlyBuilder*/get onlyBuilder() {
      return C[9] || CT.C9;
    },
    /*smart_management.SmartManagement.keepFactory*/get keepFactory() {
      return C[10] || CT.C10;
    }
  }, false);
  bindings_interface.Bindings = class Bindings extends core.Object {};
  (bindings_interface.Bindings.new = function() {
    ;
  }).prototype = bindings_interface.Bindings.prototype;
  dart.addTypeTests(bindings_interface.Bindings);
  dart.addTypeCaches(bindings_interface.Bindings);
  dart.setLibraryUri(bindings_interface.Bindings, I[14]);
  const _is_BindingsBuilder_default = Symbol('_is_BindingsBuilder_default');
  bindings_interface.BindingsBuilder$ = dart.generic(T => {
    class BindingsBuilder extends bindings_interface.Bindings {
      get builder() {
        return this[S$.builder];
      }
      set builder(value) {
        super.builder = value;
      }
      static put(builder, opts) {
        let tag = opts && 'tag' in opts ? opts.tag : null;
        let permanent = opts && 'permanent' in opts ? opts.permanent : false;
        return new (bindings_interface.BindingsBuilder$(T)).new(dart.fn(() => get_instance$.GetInstance.new().put(T, builder(), {tag: tag, permanent: permanent}), T$.VoidTovoid()));
      }
      static ['_#put#tearOff'](T, builder, opts) {
        let tag = opts && 'tag' in opts ? opts.tag : null;
        let permanent = opts && 'permanent' in opts ? opts.permanent : false;
        return bindings_interface.BindingsBuilder$(T).put(builder, {tag: tag, permanent: permanent});
      }
      static ['_#new#tearOff'](T, builder) {
        return new (bindings_interface.BindingsBuilder$(T)).new(builder);
      }
      dependencies() {
        this.builder();
      }
    }
    (BindingsBuilder.new = function(builder) {
      this[S$.builder] = builder;
      ;
    }).prototype = BindingsBuilder.prototype;
    dart.addTypeTests(BindingsBuilder);
    BindingsBuilder.prototype[_is_BindingsBuilder_default] = true;
    dart.addTypeCaches(BindingsBuilder);
    dart.setMethodSignature(BindingsBuilder, () => ({
      __proto__: dart.getMethods(BindingsBuilder.__proto__),
      dependencies: dart.fnType(dart.void, [])
    }));
    dart.setStaticMethodSignature(BindingsBuilder, () => ['put']);
    dart.setLibraryUri(BindingsBuilder, I[14]);
    dart.setFieldSignature(BindingsBuilder, () => ({
      __proto__: dart.getFields(BindingsBuilder.__proto__),
      builder: dart.finalFieldType(dart.fnType(dart.void, []))
    }));
    return BindingsBuilder;
  });
  bindings_interface.BindingsBuilder = bindings_interface.BindingsBuilder$();
  dart.addTypeTests(bindings_interface.BindingsBuilder, _is_BindingsBuilder_default);
  extension_instance['Inst|lazyPut'] = function Inst$124lazyPut(S, $this, builder, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let fenix = opts && 'fenix' in opts ? opts.fenix : false;
    get_instance$.GetInstance.new().lazyPut(S, builder, {tag: tag, fenix: fenix});
  };
  extension_instance['Inst|get#lazyPut'] = function Inst$124get$35lazyPut($this) {
    return dart.fn((S, builder, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : false;
      return extension_instance['Inst|lazyPut'](S, $this, builder, {tag: tag, fenix: fenix});
    }, T$.Fn__Tovoid());
  };
  extension_instance['Inst|putAsync'] = function Inst$124putAsync(S, $this, builder, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let permanent = opts && 'permanent' in opts ? opts.permanent : false;
    return async.async(S, function* Inst$124putAsync() {
      return get_instance$.GetInstance.new().putAsync(S, builder, {tag: tag, permanent: permanent});
    });
  };
  extension_instance['Inst|get#putAsync'] = function Inst$124get$35putAsync($this) {
    return dart.fn((S, builder, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      return extension_instance['Inst|putAsync'](S, $this, builder, {tag: tag, permanent: permanent});
    }, T$.Fn__ToFutureOfS());
  };
  extension_instance['Inst|create'] = function Inst$124create(S, $this, builder, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let permanent = opts && 'permanent' in opts ? opts.permanent : true;
    return get_instance$.GetInstance.new().create(S, builder, {tag: tag, permanent: permanent});
  };
  extension_instance['Inst|get#create'] = function Inst$124get$35create($this) {
    return dart.fn((S, builder, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : true;
      return extension_instance['Inst|create'](S, $this, builder, {tag: tag, permanent: permanent});
    }, T$.Fn__Tovoid$1());
  };
  extension_instance['Inst|find'] = function Inst$124find(S, $this, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    return get_instance$.GetInstance.new().find(S, {tag: tag});
  };
  extension_instance['Inst|get#find'] = function Inst$124get$35find($this) {
    return dart.fn((S, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return extension_instance['Inst|find'](S, $this, {tag: tag});
    }, T$.__ToS());
  };
  extension_instance['Inst|put'] = function Inst$124put(S, $this, dependency, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let permanent = opts && 'permanent' in opts ? opts.permanent : false;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    return get_instance$.GetInstance.new().put(S, dependency, {tag: tag, permanent: permanent});
  };
  extension_instance['Inst|get#put'] = function Inst$124get$35put($this) {
    return dart.fn((S, dependency, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return extension_instance['Inst|put'](S, $this, dependency, {tag: tag, permanent: permanent, builder: builder});
    }, T$.S__ToS());
  };
  extension_instance['Inst|delete'] = function Inst$124delete(S, $this, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let force = opts && 'force' in opts ? opts.force : false;
    return async.async(core.bool, function* Inst$124delete() {
      return get_instance$.GetInstance.new().delete(S, {tag: tag, force: force});
    });
  };
  extension_instance['Inst|get#delete'] = function Inst$124get$35delete($this) {
    return dart.fn((S, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let force = opts && 'force' in opts ? opts.force : false;
      return extension_instance['Inst|delete'](S, $this, {tag: tag, force: force});
    }, T$.__ToFutureOfbool());
  };
  extension_instance['Inst|deleteAll'] = function Inst$124deleteAll($this, opts) {
    let force = opts && 'force' in opts ? opts.force : false;
    return async.async(dart.void, function* Inst$124deleteAll() {
      return get_instance$.GetInstance.new().deleteAll({force: force});
    });
  };
  extension_instance['Inst|get#deleteAll'] = function Inst$124get$35deleteAll($this) {
    return dart.fn(opts => {
      let force = opts && 'force' in opts ? opts.force : false;
      return extension_instance['Inst|deleteAll']($this, {force: force});
    }, T$.__ToFutureOfvoid());
  };
  extension_instance['Inst|reloadAll'] = function Inst$124reloadAll($this, opts) {
    let force = opts && 'force' in opts ? opts.force : false;
    return get_instance$.GetInstance.new().reloadAll({force: force});
  };
  extension_instance['Inst|get#reloadAll'] = function Inst$124get$35reloadAll($this) {
    return dart.fn(opts => {
      let force = opts && 'force' in opts ? opts.force : false;
      return extension_instance['Inst|reloadAll']($this, {force: force});
    }, T$.__Tovoid$1());
  };
  extension_instance['Inst|reload'] = function Inst$124reload(S, $this, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let force = opts && 'force' in opts ? opts.force : false;
    return get_instance$.GetInstance.new().reload(S, {tag: tag, key: key, force: force});
  };
  extension_instance['Inst|get#reload'] = function Inst$124get$35reload($this) {
    return dart.fn((S, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let force = opts && 'force' in opts ? opts.force : false;
      return extension_instance['Inst|reload'](S, $this, {tag: tag, key: key, force: force});
    }, T$.__Tovoid$2());
  };
  extension_instance['Inst|isRegistered'] = function Inst$124isRegistered(S, $this, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    return get_instance$.GetInstance.new().isRegistered(S, {tag: tag});
  };
  extension_instance['Inst|get#isRegistered'] = function Inst$124get$35isRegistered($this) {
    return dart.fn((S, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return extension_instance['Inst|isRegistered'](S, $this, {tag: tag});
    }, T$.__Tobool());
  };
  extension_instance['Inst|isPrepared'] = function Inst$124isPrepared(S, $this, opts) {
    let tag = opts && 'tag' in opts ? opts.tag : null;
    return get_instance$.GetInstance.new().isPrepared(S, {tag: tag});
  };
  extension_instance['Inst|get#isPrepared'] = function Inst$124get$35isPrepared($this) {
    return dart.fn((S, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return extension_instance['Inst|isPrepared'](S, $this, {tag: tag});
    }, T$.__Tobool());
  };
  extension_instance['Inst|replace'] = function Inst$124replace(P, $this, child, opts) {
    let t37;
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let info = get_instance$.GetInstance.new().getInstanceInfo(P, {tag: tag});
    let permanent = (t37 = info.isPermanent, t37 == null ? false : t37);
    extension_instance['Inst|delete'](P, $this, {tag: tag, force: permanent});
    extension_instance['Inst|put'](P, $this, child, {tag: tag, permanent: permanent});
  };
  extension_instance['Inst|get#replace'] = function Inst$124get$35replace($this) {
    return dart.fn((P, child, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return extension_instance['Inst|replace'](P, $this, child, {tag: tag});
    }, T$.P__Tovoid());
  };
  extension_instance['Inst|lazyReplace'] = function Inst$124lazyReplace(P, $this, builder, opts) {
    let t39, t39$;
    let tag = opts && 'tag' in opts ? opts.tag : null;
    let fenix = opts && 'fenix' in opts ? opts.fenix : null;
    let info = get_instance$.GetInstance.new().getInstanceInfo(P, {tag: tag});
    let permanent = (t39 = info.isPermanent, t39 == null ? false : t39);
    extension_instance['Inst|delete'](P, $this, {tag: tag, force: permanent});
    extension_instance['Inst|lazyPut'](P, $this, builder, {tag: tag, fenix: (t39$ = fenix, t39$ == null ? permanent : t39$)});
  };
  extension_instance['Inst|get#lazyReplace'] = function Inst$124get$35lazyReplace($this) {
    return dart.fn((P, builder, opts) => {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : null;
      return extension_instance['Inst|lazyReplace'](P, $this, builder, {tag: tag, fenix: fenix});
    }, T$.Fn__Tovoid$2());
  };
  get_instance$.InstanceInfo = class InstanceInfo extends core.Object {
    get isPermanent() {
      return this[S$.isPermanent];
    }
    set isPermanent(value) {
      super.isPermanent = value;
    }
    get isSingleton() {
      return this[S$.isSingleton];
    }
    set isSingleton(value) {
      super.isSingleton = value;
    }
    get isRegistered() {
      return this[S$.isRegistered];
    }
    set isRegistered(value) {
      super.isRegistered = value;
    }
    get isPrepared() {
      return this[S$.isPrepared];
    }
    set isPrepared(value) {
      super.isPrepared = value;
    }
    get isInit() {
      return this[S$.isInit];
    }
    set isInit(value) {
      super.isInit = value;
    }
    get isCreate() {
      return !dart.nullCheck(this.isSingleton);
    }
    static ['_#new#tearOff'](opts) {
      let isPermanent = opts && 'isPermanent' in opts ? opts.isPermanent : null;
      let isSingleton = opts && 'isSingleton' in opts ? opts.isSingleton : null;
      let isRegistered = opts && 'isRegistered' in opts ? opts.isRegistered : null;
      let isPrepared = opts && 'isPrepared' in opts ? opts.isPrepared : null;
      let isInit = opts && 'isInit' in opts ? opts.isInit : null;
      return new get_instance$.InstanceInfo.new({isPermanent: isPermanent, isSingleton: isSingleton, isRegistered: isRegistered, isPrepared: isPrepared, isInit: isInit});
    }
  };
  (get_instance$.InstanceInfo.new = function(opts) {
    let isPermanent = opts && 'isPermanent' in opts ? opts.isPermanent : null;
    let isSingleton = opts && 'isSingleton' in opts ? opts.isSingleton : null;
    let isRegistered = opts && 'isRegistered' in opts ? opts.isRegistered : null;
    let isPrepared = opts && 'isPrepared' in opts ? opts.isPrepared : null;
    let isInit = opts && 'isInit' in opts ? opts.isInit : null;
    this[S$.isPermanent] = isPermanent;
    this[S$.isSingleton] = isSingleton;
    this[S$.isRegistered] = isRegistered;
    this[S$.isPrepared] = isPrepared;
    this[S$.isInit] = isInit;
    ;
  }).prototype = get_instance$.InstanceInfo.prototype;
  dart.addTypeTests(get_instance$.InstanceInfo);
  dart.addTypeCaches(get_instance$.InstanceInfo);
  dart.setGetterSignature(get_instance$.InstanceInfo, () => ({
    __proto__: dart.getGetters(get_instance$.InstanceInfo.__proto__),
    isCreate: core.bool
  }));
  dart.setLibraryUri(get_instance$.InstanceInfo, I[15]);
  dart.setFieldSignature(get_instance$.InstanceInfo, () => ({
    __proto__: dart.getFields(get_instance$.InstanceInfo.__proto__),
    isPermanent: dart.finalFieldType(dart.nullable(core.bool)),
    isSingleton: dart.finalFieldType(dart.nullable(core.bool)),
    isRegistered: dart.finalFieldType(core.bool),
    isPrepared: dart.finalFieldType(core.bool),
    isInit: dart.finalFieldType(dart.nullable(core.bool))
  }));
  get_instance$.GetInstance = class GetInstance extends core.Object {
    static new() {
      let t40;
      t40 = get_instance$.GetInstance._getInstance;
      return t40 == null ? get_instance$.GetInstance._getInstance = C[11] || CT.C11 : t40;
    }
    static ['_#new#tearOff']() {
      return get_instance$.GetInstance.new();
    }
    static ['_#_#tearOff']() {
      return new get_instance$.GetInstance.__();
    }
    call(T) {
      return this.find(T);
    }
    injector(S, fn, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : false;
      this.lazyPut(S, dart.fn(() => fn(this), dart.fnType(S, [])), {tag: tag, fenix: fenix});
    }
    putAsync(S, builder, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      return async.async(S, (function* putAsync() {
        return this.put(S, yield builder(), {tag: tag, permanent: permanent});
      }).bind(this));
    }
    put(S, dependency, opts) {
      let t40;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      this[S$._insert](S, {isSingleton: true, name: tag, permanent: permanent, builder: (t40 = builder, t40 == null ? dart.fn(() => dependency, dart.fnType(S, [])) : t40)});
      return this.find(S, {tag: tag});
    }
    lazyPut(S, builder, opts) {
      let t40;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      this[S$._insert](S, {isSingleton: true, name: tag, permanent: permanent, builder: builder, fenix: (t40 = fenix, t40 == null ? get_main.Get.smartManagement === smart_management.SmartManagement.keepFactory : t40)});
    }
    create(S, builder, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : true;
      this[S$._insert](S, {isSingleton: false, name: tag, builder: builder, permanent: permanent});
    }
    [S$._insert](S, opts) {
      let isSingleton = opts && 'isSingleton' in opts ? opts.isSingleton : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let permanent = opts && 'permanent' in opts ? opts.permanent : false;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let fenix = opts && 'fenix' in opts ? opts.fenix : false;
      let key = this[S$._getKey](dart.wrapType(S), name);
      if (get_instance$.GetInstance._singl[S$.$containsKey](key)) {
        let dep = get_instance$.GetInstance._singl[S$.$_get](key);
        if (dep != null && dep.isDirty) {
          get_instance$.GetInstance._singl[S$.$_set](key, new (get_instance$._InstanceBuilderFactory$(S)).new(isSingleton, builder, permanent, false, fenix, name, {lateRemove: get_instance$._InstanceBuilderFactory$(S).as(dep)}));
        }
      } else {
        get_instance$.GetInstance._singl[S$.$_set](key, new (get_instance$._InstanceBuilderFactory$(S)).new(isSingleton, builder, permanent, false, fenix, name));
      }
    }
    [S$._initDependencies](S, opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let key = this[S$._getKey](dart.wrapType(S), name);
      let isInit = dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).isInit;
      let i = null;
      if (!isInit) {
        i = this[S$._startController](S, {tag: name});
        if (dart.nullCheck(dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).isSingleton)) {
          dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).isInit = true;
          if (get_main.Get.smartManagement !== smart_management.SmartManagement.onlyBuilder) {
            router_report.RouterReportManager.reportDependencyLinkedToRoute(this[S$._getKey](dart.wrapType(S), name));
          }
        }
      }
      return i;
    }
    getInstanceInfo(S, opts) {
      let t40, t40$, t40$0, t40$1, t40$2;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let build = this[S$._getDependency](S, {tag: tag});
      return new get_instance$.InstanceInfo.new({isPermanent: (t40 = build, t40 == null ? null : t40.permanent), isSingleton: (t40$ = build, t40$ == null ? null : t40$.isSingleton), isRegistered: this.isRegistered(S, {tag: tag}), isPrepared: !dart.test((t40$1 = (t40$0 = build, t40$0 == null ? null : t40$0.isInit), t40$1 == null ? true : t40$1)), isInit: (t40$2 = build, t40$2 == null ? null : t40$2.isInit)});
    }
    [S$._getDependency](S, opts) {
      let t40, t42, t41, t40$;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let newKey = (t40 = key, t40 == null ? this[S$._getKey](dart.wrapType(S), tag) : t40);
      if (!get_instance$.GetInstance._singl[S$.$containsKey](newKey)) {
        t40$ = get_main.Get;
        t41 = "Instance \"" + newKey + "\" is not registered.";
        t42 = true;
        t40$.log(t41, {isError: t42});
        return null;
      } else {
        return get_instance$.GetInstance._singl[S$.$_get](newKey);
      }
    }
    markAsDirty(S, opts) {
      let t40;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let newKey = (t40 = key, t40 == null ? this[S$._getKey](dart.wrapType(S), tag) : t40);
      if (get_instance$.GetInstance._singl[S$.$containsKey](newKey)) {
        let dep = get_instance$.GetInstance._singl[S$.$_get](newKey);
        if (dep != null && !dep.permanent) {
          dep.isDirty = true;
        }
      }
    }
    [S$._startController](S, opts) {
      let t41, t40, t41$, t40$;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[S$._getKey](dart.wrapType(S), tag);
      let i = S.as(dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).getDependency());
      if (lifecycle.GetLifeCycleBase.is(i)) {
        i.onStart.call();
        if (tag == null) {
          t40 = get_main.Get;
          t41 = "Instance \"" + dart.str(dart.wrapType(S)) + "\" has been initialized";
          t40.log(t41);
        } else {
          t40$ = get_main.Get;
          t41$ = "Instance \"" + dart.str(dart.wrapType(S)) + "\" with tag \"" + dart.str(tag) + "\" has been initialized";
          t40$.log(t41$);
        }
        if (!dart.nullCheck(dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).isSingleton)) {
          router_report.RouterReportManager.appendRouteByCreate(i);
        }
      }
      return i;
    }
    putOrFind(S, dep, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[S$._getKey](dart.wrapType(S), tag);
      if (get_instance$.GetInstance._singl[S$.$containsKey](key)) {
        return S.as(dart.nullCheck(get_instance$.GetInstance._singl[S$.$_get](key)).getDependency());
      } else {
        return get_instance$.GetInstance.new().put(S, dep(), {tag: tag});
      }
    }
    find(S, opts) {
      let t40;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = this[S$._getKey](dart.wrapType(S), tag);
      if (this.isRegistered(S, {tag: tag})) {
        let dep = get_instance$.GetInstance._singl[S$.$_get](key);
        if (dep == null) {
          if (tag == null) {
            dart.throw("Class \"" + dart.str(dart.wrapType(S)) + "\" is not registered");
          } else {
            dart.throw("Class \"" + dart.str(dart.wrapType(S)) + "\" with tag \"" + dart.str(tag) + "\" is not registered");
          }
        }
        let i = this[S$._initDependencies](S, {name: tag});
        t40 = i;
        return t40 == null ? S.as(dep.getDependency()) : t40;
      } else {
        dart.throw("\"" + dart.str(dart.wrapType(S)) + "\" not found. You need to call \"Get.put(" + dart.str(dart.wrapType(S)) + "())\" or \"Get.lazyPut(()=>" + dart.str(dart.wrapType(S)) + "())\"");
      }
    }
    [S$._getKey](type, name) {
      return name == null ? type.toString() : type.toString() + dart.notNull(name);
    }
    resetInstance(opts) {
      let clearFactory = opts && 'clearFactory' in opts ? opts.clearFactory : true;
      let clearRouteBindings = opts && 'clearRouteBindings' in opts ? opts.clearRouteBindings : true;
      if (clearRouteBindings) router_report.RouterReportManager.clearRouteKeys();
      get_instance$.GetInstance._singl[S$.$clear]();
      return true;
    }
    delete(S, opts) {
      let t40, t42, t41, t40$, t40$0, t42$, t41$, t40$1, t41$0, t40$2, t41$1, t40$3, t42$0, t41$2, t40$4, t41$3, t40$5;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let force = opts && 'force' in opts ? opts.force : false;
      let newKey = (t40 = key, t40 == null ? this[S$._getKey](dart.wrapType(S), tag) : t40);
      if (!get_instance$.GetInstance._singl[S$.$containsKey](newKey)) {
        t40$ = get_main.Get;
        t41 = "Instance \"" + newKey + "\" already removed.";
        t42 = true;
        t40$.log(t41, {isError: t42});
        return false;
      }
      let dep = get_instance$.GetInstance._singl[S$.$_get](newKey);
      if (dep == null) return false;
      let builder = null;
      if (dep.isDirty) {
        builder = (t40$0 = dep.lateRemove, t40$0 == null ? dep : t40$0);
      } else {
        builder = dep;
      }
      if (builder.permanent && !force) {
        t40$1 = get_main.Get;
        t41$ = "\"" + newKey + "\" has been marked as permanent, SmartManagement is not authorized to delete it.";
        t42$ = true;
        t40$1.log(t41$, {isError: t42$});
        return false;
      }
      let i = builder.dependency;
      if (lifecycle.GetxServiceMixin.is(i) && !force) {
        return false;
      }
      if (lifecycle.GetLifeCycleBase.is(i)) {
        i.onDelete.call();
        t40$2 = get_main.Get;
        t41$0 = "\"" + newKey + "\" onDelete() called";
        t40$2.log(t41$0);
      }
      if (builder.fenix) {
        builder.dependency = null;
        builder.isInit = false;
        return true;
      } else {
        if (dep.lateRemove != null) {
          dep.lateRemove = null;
          t40$3 = get_main.Get;
          t41$1 = "\"" + newKey + "\" deleted from memory";
          t40$3.log(t41$1);
          return false;
        } else {
          get_instance$.GetInstance._singl[S$.$remove](newKey);
          if (get_instance$.GetInstance._singl[S$.$containsKey](newKey)) {
            t40$4 = get_main.Get;
            t41$2 = "Error removing object \"" + newKey + "\"";
            t42$0 = true;
            t40$4.log(t41$2, {isError: t42$0});
          } else {
            t40$5 = get_main.Get;
            t41$3 = "\"" + newKey + "\" deleted from memory";
            t40$5.log(t41$3);
          }
          return true;
        }
      }
    }
    deleteAll(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      let keys = get_instance$.GetInstance._singl[S$.$keys][S$.$toList]();
      for (let key of keys) {
        this.delete(dart.dynamic, {key: key, force: force});
      }
    }
    reloadAll(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      get_instance$.GetInstance._singl[S$.$forEach](dart.fn((key, value) => {
        let t41, t40, t41$, t40$;
        if (value.permanent && !force) {
          t40 = get_main.Get;
          t41 = "Instance \"" + key + "\" is permanent. Skipping reload";
          t40.log(t41);
        } else {
          value.dependency = null;
          value.isInit = false;
          t40$ = get_main.Get;
          t41$ = "Instance \"" + key + "\" was reloaded.";
          t40$.log(t41$);
        }
      }, T$.StringAnd_InstanceBuilderFactoryTovoid()));
    }
    reload(S, opts) {
      let t40, t42, t41, t40$, t41$, t40$0, t41$0, t40$1;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let force = opts && 'force' in opts ? opts.force : false;
      let newKey = (t40 = key, t40 == null ? this[S$._getKey](dart.wrapType(S), tag) : t40);
      let builder = this[S$._getDependency](S, {tag: tag, key: newKey});
      if (builder == null) return;
      if (builder.permanent && !force) {
        t40$ = get_main.Get;
        t41 = "Instance \"" + newKey + "\" is permanent. Use [force = true] to force the restart.";
        t42 = true;
        t40$.log(t41, {isError: t42});
        return;
      }
      let i = builder.dependency;
      if (lifecycle.GetxServiceMixin.is(i) && !force) {
        return;
      }
      if (lifecycle.GetLifeCycleBase.is(i)) {
        i.onDelete.call();
        t40$0 = get_main.Get;
        t41$ = "\"" + newKey + "\" onDelete() called";
        t40$0.log(t41$);
      }
      builder.dependency = null;
      builder.isInit = false;
      t40$1 = get_main.Get;
      t41$0 = "Instance \"" + newKey + "\" was restarted.";
      t40$1.log(t41$0);
    }
    isRegistered(S, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      return get_instance$.GetInstance._singl[S$.$containsKey](this[S$._getKey](dart.wrapType(S), tag));
    }
    isPrepared(S, opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let newKey = this[S$._getKey](dart.wrapType(S), tag);
      let builder = this[S$._getDependency](S, {tag: tag, key: newKey});
      if (builder == null) {
        return false;
      }
      if (!builder.isInit) {
        return true;
      }
      return false;
    }
  };
  (get_instance$.GetInstance.__ = function() {
    ;
  }).prototype = get_instance$.GetInstance.prototype;
  dart.addTypeTests(get_instance$.GetInstance);
  dart.addTypeCaches(get_instance$.GetInstance);
  dart.setMethodSignature(get_instance$.GetInstance, () => ({
    __proto__: dart.getMethods(get_instance$.GetInstance.__proto__),
    call: dart.gFnType(T => [T, []], T => [dart.nullable(core.Object)]),
    injector: dart.gFnType(S => [dart.void, [dart.fnType(S, [get_instance$.GetInstance])], {fenix: core.bool, tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    putAsync: dart.gFnType(S => [async.Future$(S), [dart.fnType(async.Future$(S), [])], {permanent: core.bool, tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    put: dart.gFnType(S => [S, [S], {builder: dart.nullable(dart.fnType(S, [])), permanent: core.bool, tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    lazyPut: dart.gFnType(S => [dart.void, [dart.fnType(S, [])], {fenix: dart.nullable(core.bool), permanent: core.bool, tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    create: dart.gFnType(S => [dart.void, [dart.fnType(S, [])], {permanent: core.bool, tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    [S$._insert]: dart.gFnType(S => [dart.void, [], {fenix: core.bool, isSingleton: dart.nullable(core.bool), name: dart.nullable(core.String), permanent: core.bool}, {builder: dart.fnType(S, [])}], S => [dart.nullable(core.Object)]),
    [S$._initDependencies]: dart.gFnType(S => [dart.nullable(S), [], {name: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    getInstanceInfo: dart.gFnType(S => [get_instance$.InstanceInfo, [], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    [S$._getDependency]: dart.gFnType(S => [dart.nullable(get_instance$._InstanceBuilderFactory), [], {key: dart.nullable(core.String), tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    markAsDirty: dart.gFnType(S => [dart.void, [], {key: dart.nullable(core.String), tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    [S$._startController]: dart.gFnType(S => [S, [], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    putOrFind: dart.gFnType(S => [S, [dart.fnType(S, [])], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    find: dart.gFnType(S => [S, [], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    [S$._getKey]: dart.fnType(core.String, [core.Type, dart.nullable(core.String)]),
    resetInstance: dart.fnType(core.bool, [], {clearFactory: core.bool, clearRouteBindings: core.bool}, {}),
    delete: dart.gFnType(S => [core.bool, [], {force: core.bool, key: dart.nullable(core.String), tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    deleteAll: dart.fnType(dart.void, [], {force: core.bool}, {}),
    reloadAll: dart.fnType(dart.void, [], {force: core.bool}, {}),
    reload: dart.gFnType(S => [dart.void, [], {force: core.bool, key: dart.nullable(core.String), tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    isRegistered: dart.gFnType(S => [core.bool, [], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)]),
    isPrepared: dart.gFnType(S => [core.bool, [], {tag: dart.nullable(core.String)}, {}], S => [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(get_instance$.GetInstance, () => ['new']);
  dart.setLibraryUri(get_instance$.GetInstance, I[15]);
  dart.setStaticFieldSignature(get_instance$.GetInstance, () => ['_getInstance', '_singl']);
  dart.defineLazy(get_instance$.GetInstance, {
    /*get_instance$.GetInstance._getInstance*/get _getInstance() {
      return null;
    },
    set _getInstance(value) {},
    /*get_instance$.GetInstance._singl*/get _singl() {
      return new (T$.IdentityMapOfString$_InstanceBuilderFactory()).new();
    }
  }, false);
  const _is__InstanceBuilderFactory_default = Symbol('_is__InstanceBuilderFactory_default');
  get_instance$._InstanceBuilderFactory$ = dart.generic(S => {
    var __t$SN = () => (__t$SN = dart.constFn(dart.nullable(S)))();
    var __t$VoidToS = () => (__t$VoidToS = dart.constFn(dart.fnType(S, [])))();
    var __t$_InstanceBuilderFactoryOfS = () => (__t$_InstanceBuilderFactoryOfS = dart.constFn(get_instance$._InstanceBuilderFactory$(S)))();
    var __t$_InstanceBuilderFactoryNOfS = () => (__t$_InstanceBuilderFactoryNOfS = dart.constFn(dart.nullable(__t$_InstanceBuilderFactoryOfS())))();
    class _InstanceBuilderFactory extends core.Object {
      get dependency() {
        return this[S$.dependency];
      }
      set dependency(value) {
        this[S$.dependency] = __t$SN().as(value);
      }
      get builderFunc() {
        return this[S$.builderFunc];
      }
      set builderFunc(value) {
        this[S$.builderFunc] = __t$VoidToS().as(value);
      }
      get lateRemove() {
        return this[S$.lateRemove];
      }
      set lateRemove(value) {
        this[S$.lateRemove] = __t$_InstanceBuilderFactoryNOfS().as(value);
      }
      static ['_#new#tearOff'](S, isSingleton, builderFunc, permanent, isInit, fenix, tag, opts) {
        let lateRemove = opts && 'lateRemove' in opts ? opts.lateRemove : null;
        return new (get_instance$._InstanceBuilderFactory$(S)).new(isSingleton, builderFunc, permanent, isInit, fenix, tag, {lateRemove: lateRemove});
      }
      [S$._showInitLog]() {
        let t41, t40, t41$, t40$;
        if (this.tag == null) {
          t40 = get_main.Get;
          t41 = "Instance \"" + dart.str(dart.wrapType(S)) + "\" has been created";
          t40.log(t41);
        } else {
          t40$ = get_main.Get;
          t41$ = "Instance \"" + dart.str(dart.wrapType(S)) + "\" has been created with tag \"" + dart.str(this.tag) + "\"";
          t40$.log(t41$);
        }
      }
      getDependency() {
        if (dart.nullCheck(this.isSingleton)) {
          if (this.dependency == null) {
            this[S$._showInitLog]();
            this.dependency = this.builderFunc();
          }
          return dart.nullCheck(this.dependency);
        } else {
          return this.builderFunc();
        }
      }
    }
    (_InstanceBuilderFactory.new = function(isSingleton, builderFunc, permanent, isInit, fenix, tag, opts) {
      let lateRemove = opts && 'lateRemove' in opts ? opts.lateRemove : null;
      this[S$.dependency] = null;
      this.permanent = false;
      this.isInit = false;
      this.isDirty = false;
      this.isSingleton = isSingleton;
      this[S$.builderFunc] = builderFunc;
      this.permanent = permanent;
      this.isInit = isInit;
      this.fenix = fenix;
      this.tag = tag;
      this[S$.lateRemove] = lateRemove;
      ;
    }).prototype = _InstanceBuilderFactory.prototype;
    dart.addTypeTests(_InstanceBuilderFactory);
    _InstanceBuilderFactory.prototype[_is__InstanceBuilderFactory_default] = true;
    dart.addTypeCaches(_InstanceBuilderFactory);
    dart.setMethodSignature(_InstanceBuilderFactory, () => ({
      __proto__: dart.getMethods(_InstanceBuilderFactory.__proto__),
      [S$._showInitLog]: dart.fnType(dart.void, []),
      getDependency: dart.fnType(S, [])
    }));
    dart.setLibraryUri(_InstanceBuilderFactory, I[15]);
    dart.setFieldSignature(_InstanceBuilderFactory, () => ({
      __proto__: dart.getFields(_InstanceBuilderFactory.__proto__),
      isSingleton: dart.fieldType(dart.nullable(core.bool)),
      fenix: dart.fieldType(core.bool),
      dependency: dart.fieldType(dart.nullable(S)),
      builderFunc: dart.fieldType(dart.fnType(S, [])),
      permanent: dart.fieldType(core.bool),
      isInit: dart.fieldType(core.bool),
      lateRemove: dart.fieldType(dart.nullable(get_instance$._InstanceBuilderFactory$(S))),
      isDirty: dart.fieldType(core.bool),
      tag: dart.fieldType(dart.nullable(core.String))
    }));
    return _InstanceBuilderFactory;
  });
  get_instance$._InstanceBuilderFactory = get_instance$._InstanceBuilderFactory$();
  dart.addTypeTests(get_instance$._InstanceBuilderFactory, _is__InstanceBuilderFactory_default);
  const _is_GetModalBottomSheetRoute_default = Symbol('_is_GetModalBottomSheetRoute_default');
  bottomsheet$.GetModalBottomSheetRoute$ = dart.generic(T => {
    var __t$_GetModalBottomSheetOfT = () => (__t$_GetModalBottomSheetOfT = dart.constFn(bottomsheet$._GetModalBottomSheet$(T)))();
    class GetModalBottomSheetRoute extends routes.PopupRoute$(T) {
      get isPersistent() {
        return this[S$.isPersistent];
      }
      set isPersistent(value) {
        super.isPersistent = value;
      }
      get builder() {
        return this[S$.builder$1];
      }
      set builder(value) {
        super.builder = value;
      }
      get theme() {
        return this[S$.theme];
      }
      set theme(value) {
        super.theme = value;
      }
      get isScrollControlled() {
        return this[S$.isScrollControlled];
      }
      set isScrollControlled(value) {
        super.isScrollControlled = value;
      }
      get backgroundColor() {
        return this[S$.backgroundColor];
      }
      set backgroundColor(value) {
        super.backgroundColor = value;
      }
      get elevation() {
        return this[S$.elevation];
      }
      set elevation(value) {
        super.elevation = value;
      }
      get shape() {
        return this[S$.shape];
      }
      set shape(value) {
        super.shape = value;
      }
      get clipBehavior() {
        return this[S$.clipBehavior];
      }
      set clipBehavior(value) {
        super.clipBehavior = value;
      }
      get modalBarrierColor() {
        return this[S$.modalBarrierColor];
      }
      set modalBarrierColor(value) {
        super.modalBarrierColor = value;
      }
      get isDismissible() {
        return this[S$.isDismissible];
      }
      set isDismissible(value) {
        super.isDismissible = value;
      }
      get enableDrag() {
        return this[S$.enableDrag];
      }
      set enableDrag(value) {
        super.enableDrag = value;
      }
      get enterBottomSheetDuration() {
        return this[S$.enterBottomSheetDuration];
      }
      set enterBottomSheetDuration(value) {
        super.enterBottomSheetDuration = value;
      }
      get exitBottomSheetDuration() {
        return this[S$.exitBottomSheetDuration];
      }
      set exitBottomSheetDuration(value) {
        super.exitBottomSheetDuration = value;
      }
      get removeTop() {
        return this[S$.removeTop];
      }
      set removeTop(value) {
        super.removeTop = value;
      }
      get barrierLabel() {
        return this[S$.barrierLabel];
      }
      set barrierLabel(value) {
        super.barrierLabel = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let theme = opts && 'theme' in opts ? opts.theme : null;
        let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
        let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
        let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : null;
        let elevation = opts && 'elevation' in opts ? opts.elevation : null;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let removeTop = opts && 'removeTop' in opts ? opts.removeTop : true;
        let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
        let modalBarrierColor = opts && 'modalBarrierColor' in opts ? opts.modalBarrierColor : null;
        let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
        let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
        let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : null;
        let settings = opts && 'settings' in opts ? opts.settings : null;
        let enterBottomSheetDuration = opts && 'enterBottomSheetDuration' in opts ? opts.enterBottomSheetDuration : C[12] || CT.C12;
        let exitBottomSheetDuration = opts && 'exitBottomSheetDuration' in opts ? opts.exitBottomSheetDuration : C[13] || CT.C13;
        return new (bottomsheet$.GetModalBottomSheetRoute$(T)).new({builder: builder, theme: theme, barrierLabel: barrierLabel, backgroundColor: backgroundColor, isPersistent: isPersistent, elevation: elevation, shape: shape, removeTop: removeTop, clipBehavior: clipBehavior, modalBarrierColor: modalBarrierColor, isDismissible: isDismissible, enableDrag: enableDrag, isScrollControlled: isScrollControlled, settings: settings, enterBottomSheetDuration: enterBottomSheetDuration, exitBottomSheetDuration: exitBottomSheetDuration});
      }
      get transitionDuration() {
        return C[14] || CT.C14;
      }
      get barrierDismissible() {
        return this.isDismissible;
      }
      get barrierColor() {
        let t40;
        t40 = this.modalBarrierColor;
        return t40 == null ? colors.Colors.black54 : t40;
      }
      dispose() {
        router_report.RouterReportManager.reportRouteDispose(this);
        super.dispose();
      }
      createAnimationController() {
        if (!(this[S$._animationController] == null)) dart.assertFailed(null, I[16], 66, 12, "_animationController == null");
        this[S$._animationController] = bottom_sheet.BottomSheet.createAnimationController(dart.nullCheck(dart.nullCheck(extension_navigation.navigator).overlay));
        dart.nullCheck(this[S$._animationController]).duration = this.enterBottomSheetDuration;
        dart.nullCheck(this[S$._animationController]).reverseDuration = this.exitBottomSheetDuration;
        return dart.nullCheck(this[S$._animationController]);
      }
      buildPage(context, animation, secondaryAnimation) {
        let t40, t40$, t40$0, t40$1, t40$2, t40$3;
        let sheetTheme = (t40$ = (t40 = this.theme, t40 == null ? null : t40.bottomSheetTheme), t40$ == null ? theme$.Theme.of(context).bottomSheetTheme : t40$);
        let bottomSheet = media_query.MediaQuery.removePadding({context: context, removeTop: this.removeTop, child: new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({bottom: media_query.MediaQuery.of(context).viewInsets.bottom}), child: new (__t$_GetModalBottomSheetOfT()).new({route: this, backgroundColor: (t40$1 = (t40$0 = this.backgroundColor, t40$0 == null ? sheetTheme.modalBackgroundColor : t40$0), t40$1 == null ? sheetTheme.backgroundColor : t40$1), elevation: (t40$3 = (t40$2 = this.elevation, t40$2 == null ? sheetTheme.modalElevation : t40$2), t40$3 == null ? sheetTheme.elevation : t40$3), shape: this.shape, clipBehavior: this.clipBehavior, isScrollControlled: this.isScrollControlled, enableDrag: this.enableDrag})})});
        if (this.theme != null) bottomSheet = new theme$.Theme.new({data: dart.nullCheck(this.theme), child: bottomSheet});
        return bottomSheet;
      }
    }
    (GetModalBottomSheetRoute.new = function(opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let removeTop = opts && 'removeTop' in opts ? opts.removeTop : true;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let modalBarrierColor = opts && 'modalBarrierColor' in opts ? opts.modalBarrierColor : null;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
      let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
      let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : null;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let enterBottomSheetDuration = opts && 'enterBottomSheetDuration' in opts ? opts.enterBottomSheetDuration : C[12] || CT.C12;
      let exitBottomSheetDuration = opts && 'exitBottomSheetDuration' in opts ? opts.exitBottomSheetDuration : C[13] || CT.C13;
      this[S$._animationController] = null;
      this[S$.builder$1] = builder;
      this[S$.theme] = theme;
      this[S$.barrierLabel] = barrierLabel;
      this[S$.backgroundColor] = backgroundColor;
      this[S$.isPersistent] = isPersistent;
      this[S$.elevation] = elevation;
      this[S$.shape] = shape;
      this[S$.removeTop] = removeTop;
      this[S$.clipBehavior] = clipBehavior;
      this[S$.modalBarrierColor] = modalBarrierColor;
      this[S$.isDismissible] = isDismissible;
      this[S$.enableDrag] = enableDrag;
      this[S$.isScrollControlled] = isScrollControlled;
      this[S$.enterBottomSheetDuration] = enterBottomSheetDuration;
      this[S$.exitBottomSheetDuration] = exitBottomSheetDuration;
      GetModalBottomSheetRoute.__proto__.new.call(this, {settings: settings});
      router_report.RouterReportManager.reportCurrentRoute(this);
    }).prototype = GetModalBottomSheetRoute.prototype;
    dart.addTypeTests(GetModalBottomSheetRoute);
    GetModalBottomSheetRoute.prototype[_is_GetModalBottomSheetRoute_default] = true;
    dart.addTypeCaches(GetModalBottomSheetRoute);
    dart.setMethodSignature(GetModalBottomSheetRoute, () => ({
      __proto__: dart.getMethods(GetModalBottomSheetRoute.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setGetterSignature(GetModalBottomSheetRoute, () => ({
      __proto__: dart.getGetters(GetModalBottomSheetRoute.__proto__),
      transitionDuration: core.Duration,
      barrierDismissible: core.bool,
      barrierColor: ui.Color
    }));
    dart.setLibraryUri(GetModalBottomSheetRoute, I[17]);
    dart.setFieldSignature(GetModalBottomSheetRoute, () => ({
      __proto__: dart.getFields(GetModalBottomSheetRoute.__proto__),
      isPersistent: dart.finalFieldType(dart.nullable(core.bool)),
      builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext]))),
      theme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
      isScrollControlled: dart.finalFieldType(core.bool),
      backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
      elevation: dart.finalFieldType(dart.nullable(core.double)),
      shape: dart.finalFieldType(dart.nullable(borders.ShapeBorder)),
      clipBehavior: dart.finalFieldType(dart.nullable(ui.Clip)),
      modalBarrierColor: dart.finalFieldType(dart.nullable(ui.Color)),
      isDismissible: dart.finalFieldType(core.bool),
      enableDrag: dart.finalFieldType(core.bool),
      enterBottomSheetDuration: dart.finalFieldType(core.Duration),
      exitBottomSheetDuration: dart.finalFieldType(core.Duration),
      removeTop: dart.finalFieldType(core.bool),
      barrierLabel: dart.finalFieldType(dart.nullable(core.String)),
      [S$._animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController))
    }));
    return GetModalBottomSheetRoute;
  });
  bottomsheet$.GetModalBottomSheetRoute = bottomsheet$.GetModalBottomSheetRoute$();
  dart.addTypeTests(bottomsheet$.GetModalBottomSheetRoute, _is_GetModalBottomSheetRoute_default);
  const _is__GetModalBottomSheet_default = Symbol('_is__GetModalBottomSheet_default');
  bottomsheet$._GetModalBottomSheet$ = dart.generic(T => {
    var __t$_GetModalBottomSheetStateOfT = () => (__t$_GetModalBottomSheetStateOfT = dart.constFn(bottomsheet$._GetModalBottomSheetState$(T)))();
    class _GetModalBottomSheet extends framework.StatefulWidget {
      get isPersistent() {
        return this[S$.isPersistent$1];
      }
      set isPersistent(value) {
        super.isPersistent = value;
      }
      get route() {
        return this[S$.route];
      }
      set route(value) {
        super.route = value;
      }
      get isScrollControlled() {
        return this[S$.isScrollControlled$1];
      }
      set isScrollControlled(value) {
        super.isScrollControlled = value;
      }
      get backgroundColor() {
        return this[S$.backgroundColor$1];
      }
      set backgroundColor(value) {
        super.backgroundColor = value;
      }
      get elevation() {
        return this[S$.elevation$1];
      }
      set elevation(value) {
        super.elevation = value;
      }
      get shape() {
        return this[S$.shape$1];
      }
      set shape(value) {
        super.shape = value;
      }
      get clipBehavior() {
        return this[S$.clipBehavior$1];
      }
      set clipBehavior(value) {
        super.clipBehavior = value;
      }
      get enableDrag() {
        return this[S$.enableDrag$1];
      }
      set enableDrag(value) {
        super.enableDrag = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let route = opts && 'route' in opts ? opts.route : null;
        let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
        let elevation = opts && 'elevation' in opts ? opts.elevation : null;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
        let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
        let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
        let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : false;
        return new (bottomsheet$._GetModalBottomSheet$(T)).new({key: key, route: route, backgroundColor: backgroundColor, elevation: elevation, shape: shape, clipBehavior: clipBehavior, isScrollControlled: isScrollControlled, enableDrag: enableDrag, isPersistent: isPersistent});
      }
      createState() {
        return new (__t$_GetModalBottomSheetStateOfT()).new();
      }
    }
    (_GetModalBottomSheet.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let route = opts && 'route' in opts ? opts.route : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
      let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
      let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : false;
      this[S$.route] = route;
      this[S$.backgroundColor$1] = backgroundColor;
      this[S$.elevation$1] = elevation;
      this[S$.shape$1] = shape;
      this[S$.clipBehavior$1] = clipBehavior;
      this[S$.isScrollControlled$1] = isScrollControlled;
      this[S$.enableDrag$1] = enableDrag;
      this[S$.isPersistent$1] = isPersistent;
      _GetModalBottomSheet.__proto__.new.call(this, {key: key});
      ;
    }).prototype = _GetModalBottomSheet.prototype;
    dart.addTypeTests(_GetModalBottomSheet);
    _GetModalBottomSheet.prototype[_is__GetModalBottomSheet_default] = true;
    dart.addTypeCaches(_GetModalBottomSheet);
    dart.setMethodSignature(_GetModalBottomSheet, () => ({
      __proto__: dart.getMethods(_GetModalBottomSheet.__proto__),
      createState: dart.fnType(bottomsheet$._GetModalBottomSheetState$(T), [])
    }));
    dart.setLibraryUri(_GetModalBottomSheet, I[17]);
    dart.setFieldSignature(_GetModalBottomSheet, () => ({
      __proto__: dart.getFields(_GetModalBottomSheet.__proto__),
      isPersistent: dart.finalFieldType(core.bool),
      route: dart.finalFieldType(dart.nullable(bottomsheet$.GetModalBottomSheetRoute$(T))),
      isScrollControlled: dart.finalFieldType(core.bool),
      backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
      elevation: dart.finalFieldType(dart.nullable(core.double)),
      shape: dart.finalFieldType(dart.nullable(borders.ShapeBorder)),
      clipBehavior: dart.finalFieldType(dart.nullable(ui.Clip)),
      enableDrag: dart.finalFieldType(core.bool)
    }));
    return _GetModalBottomSheet;
  });
  bottomsheet$._GetModalBottomSheet = bottomsheet$._GetModalBottomSheet$();
  dart.addTypeTests(bottomsheet$._GetModalBottomSheet, _is__GetModalBottomSheet_default);
  const _is__GetModalBottomSheetState_default = Symbol('_is__GetModalBottomSheetState_default');
  bottomsheet$._GetModalBottomSheetState$ = dart.generic(T => {
    class _GetModalBottomSheetState extends framework.State$(bottomsheet$._GetModalBottomSheet$(T)) {
      [S$._getRouteLabel](localizations) {
        if (theme$.Theme.of(this.context).platform === platform.TargetPlatform.android || theme$.Theme.of(this.context).platform === platform.TargetPlatform.fuchsia) {
          return localizations.dialogLabel;
        } else {
          return "";
        }
      }
      build(context) {
        if (!debug.debugCheckHasMediaQuery(context)) dart.assertFailed(null, I[16], 143, 12, "debugCheckHasMediaQuery(context)");
        if (!debug$.debugCheckHasMaterialLocalizations(context)) dart.assertFailed(null, I[16], 144, 12, "debugCheckHasMaterialLocalizations(context)");
        let mediaQuery = media_query.MediaQuery.of(context);
        let localizations = material_localizations.MaterialLocalizations.of(context);
        let routeLabel = this[S$._getRouteLabel](localizations);
        return new transitions.AnimatedBuilder.new({animation: dart.nullCheck(dart.nullCheck(this.widget.route).animation), builder: dart.fn((context, child) => {
            let animationValue = mediaQuery.accessibleNavigation ? 1 : dart.nullCheck(dart.nullCheck(this.widget.route).animation).value;
            return new basic.Semantics.new({scopesRoute: true, namesRoute: true, label: routeLabel, explicitChildNodes: true, child: new basic.ClipRect.new({child: new basic.CustomSingleChildLayout.new({delegate: new bottomsheet$._GetModalBottomSheetLayout.new(animationValue, this.widget.isScrollControlled), child: this.widget.isPersistent === false ? new bottom_sheet.BottomSheet.new({animationController: dart.nullCheck(this.widget.route)[S$._animationController], onClosing: dart.fn(() => {
                      if (dart.nullCheck(this.widget.route).isCurrent) {
                        navigator.Navigator.pop(T$.ObjectN(), context);
                      }
                    }, T$.VoidTovoid()), builder: dart.nullCheck(dart.nullCheck(this.widget.route).builder), backgroundColor: this.widget.backgroundColor, elevation: this.widget.elevation, shape: this.widget.shape, clipBehavior: this.widget.clipBehavior, enableDrag: this.widget.enableDrag}) : new scaffold.Scaffold.new({bottomSheet: new bottom_sheet.BottomSheet.new({animationController: dart.nullCheck(this.widget.route)[S$._animationController], onClosing: dart.fn(() => {
                      }, T$.VoidTovoid()), builder: dart.nullCheck(dart.nullCheck(this.widget.route).builder), backgroundColor: this.widget.backgroundColor, elevation: this.widget.elevation, shape: this.widget.shape, clipBehavior: this.widget.clipBehavior, enableDrag: this.widget.enableDrag})})})})});
          }, T$.BuildContextAndWidgetNToSemantics())});
      }
      static ['_#new#tearOff'](T) {
        return new (bottomsheet$._GetModalBottomSheetState$(T)).new();
      }
    }
    (_GetModalBottomSheetState.new = function() {
      _GetModalBottomSheetState.__proto__.new.call(this);
      ;
    }).prototype = _GetModalBottomSheetState.prototype;
    dart.addTypeTests(_GetModalBottomSheetState);
    _GetModalBottomSheetState.prototype[_is__GetModalBottomSheetState_default] = true;
    dart.addTypeCaches(_GetModalBottomSheetState);
    dart.setMethodSignature(_GetModalBottomSheetState, () => ({
      __proto__: dart.getMethods(_GetModalBottomSheetState.__proto__),
      [S$._getRouteLabel]: dart.fnType(core.String, [material_localizations.MaterialLocalizations]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(_GetModalBottomSheetState, I[17]);
    return _GetModalBottomSheetState;
  });
  bottomsheet$._GetModalBottomSheetState = bottomsheet$._GetModalBottomSheetState$();
  dart.addTypeTests(bottomsheet$._GetModalBottomSheetState, _is__GetModalBottomSheetState_default);
  const _is__GetPerModalBottomSheet_default = Symbol('_is__GetPerModalBottomSheet_default');
  bottomsheet$._GetPerModalBottomSheet$ = dart.generic(T => {
    var __t$_GetPerModalBottomSheetStateOfT = () => (__t$_GetPerModalBottomSheetStateOfT = dart.constFn(bottomsheet$._GetPerModalBottomSheetState$(T)))();
    class _GetPerModalBottomSheet extends framework.StatefulWidget {
      get isPersistent() {
        return this[S$.isPersistent$2];
      }
      set isPersistent(value) {
        super.isPersistent = value;
      }
      get route() {
        return this[S$.route$1];
      }
      set route(value) {
        super.route = value;
      }
      get isScrollControlled() {
        return this[S$.isScrollControlled$2];
      }
      set isScrollControlled(value) {
        super.isScrollControlled = value;
      }
      get backgroundColor() {
        return this[S$.backgroundColor$2];
      }
      set backgroundColor(value) {
        super.backgroundColor = value;
      }
      get elevation() {
        return this[S$.elevation$2];
      }
      set elevation(value) {
        super.elevation = value;
      }
      get shape() {
        return this[S$.shape$2];
      }
      set shape(value) {
        super.shape = value;
      }
      get clipBehavior() {
        return this[S$.clipBehavior$2];
      }
      set clipBehavior(value) {
        super.clipBehavior = value;
      }
      get enableDrag() {
        return this[S$.enableDrag$2];
      }
      set enableDrag(value) {
        super.enableDrag = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let route = opts && 'route' in opts ? opts.route : null;
        let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : null;
        let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
        let elevation = opts && 'elevation' in opts ? opts.elevation : null;
        let shape = opts && 'shape' in opts ? opts.shape : null;
        let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
        let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
        let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
        return new (bottomsheet$._GetPerModalBottomSheet$(T)).new({key: key, route: route, isPersistent: isPersistent, backgroundColor: backgroundColor, elevation: elevation, shape: shape, clipBehavior: clipBehavior, isScrollControlled: isScrollControlled, enableDrag: enableDrag});
      }
      createState() {
        return new (__t$_GetPerModalBottomSheetStateOfT()).new();
      }
    }
    (_GetPerModalBottomSheet.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let route = opts && 'route' in opts ? opts.route : null;
      let isPersistent = opts && 'isPersistent' in opts ? opts.isPersistent : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
      let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
      this[S$.route$1] = route;
      this[S$.isPersistent$2] = isPersistent;
      this[S$.backgroundColor$2] = backgroundColor;
      this[S$.elevation$2] = elevation;
      this[S$.shape$2] = shape;
      this[S$.clipBehavior$2] = clipBehavior;
      this[S$.isScrollControlled$2] = isScrollControlled;
      this[S$.enableDrag$2] = enableDrag;
      _GetPerModalBottomSheet.__proto__.new.call(this, {key: key});
      ;
    }).prototype = _GetPerModalBottomSheet.prototype;
    dart.addTypeTests(_GetPerModalBottomSheet);
    _GetPerModalBottomSheet.prototype[_is__GetPerModalBottomSheet_default] = true;
    dart.addTypeCaches(_GetPerModalBottomSheet);
    dart.setMethodSignature(_GetPerModalBottomSheet, () => ({
      __proto__: dart.getMethods(_GetPerModalBottomSheet.__proto__),
      createState: dart.fnType(bottomsheet$._GetPerModalBottomSheetState$(T), [])
    }));
    dart.setLibraryUri(_GetPerModalBottomSheet, I[17]);
    dart.setFieldSignature(_GetPerModalBottomSheet, () => ({
      __proto__: dart.getFields(_GetPerModalBottomSheet.__proto__),
      isPersistent: dart.finalFieldType(dart.nullable(core.bool)),
      route: dart.finalFieldType(dart.nullable(bottomsheet$.GetModalBottomSheetRoute$(T))),
      isScrollControlled: dart.finalFieldType(core.bool),
      backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
      elevation: dart.finalFieldType(dart.nullable(core.double)),
      shape: dart.finalFieldType(dart.nullable(borders.ShapeBorder)),
      clipBehavior: dart.finalFieldType(dart.nullable(ui.Clip)),
      enableDrag: dart.finalFieldType(core.bool)
    }));
    return _GetPerModalBottomSheet;
  });
  bottomsheet$._GetPerModalBottomSheet = bottomsheet$._GetPerModalBottomSheet$();
  dart.addTypeTests(bottomsheet$._GetPerModalBottomSheet, _is__GetPerModalBottomSheet_default);
  const _is__GetPerModalBottomSheetState_default = Symbol('_is__GetPerModalBottomSheetState_default');
  bottomsheet$._GetPerModalBottomSheetState$ = dart.generic(T => {
    class _GetPerModalBottomSheetState extends framework.State$(bottomsheet$._GetPerModalBottomSheet$(T)) {
      [S$._getRouteLabel](localizations) {
        if (theme$.Theme.of(this.context).platform === platform.TargetPlatform.android || theme$.Theme.of(this.context).platform === platform.TargetPlatform.fuchsia) {
          return localizations.dialogLabel;
        } else {
          return "";
        }
      }
      build(context) {
        if (!debug.debugCheckHasMediaQuery(context)) dart.assertFailed(null, I[16], 246, 12, "debugCheckHasMediaQuery(context)");
        if (!debug$.debugCheckHasMaterialLocalizations(context)) dart.assertFailed(null, I[16], 247, 12, "debugCheckHasMaterialLocalizations(context)");
        let mediaQuery = media_query.MediaQuery.of(context);
        let localizations = material_localizations.MaterialLocalizations.of(context);
        let routeLabel = this[S$._getRouteLabel](localizations);
        return new transitions.AnimatedBuilder.new({animation: dart.nullCheck(dart.nullCheck(this.widget.route).animation), builder: dart.fn((context, child) => {
            let animationValue = mediaQuery.accessibleNavigation ? 1 : dart.nullCheck(dart.nullCheck(this.widget.route).animation).value;
            return new basic.Semantics.new({scopesRoute: true, namesRoute: true, label: routeLabel, explicitChildNodes: true, child: new basic.ClipRect.new({child: new basic.CustomSingleChildLayout.new({delegate: new bottomsheet$._GetModalBottomSheetLayout.new(animationValue, this.widget.isScrollControlled), child: this.widget.isPersistent === false ? new bottom_sheet.BottomSheet.new({animationController: dart.nullCheck(this.widget.route)[S$._animationController], onClosing: dart.fn(() => {
                      if (dart.nullCheck(this.widget.route).isCurrent) {
                        navigator.Navigator.pop(T$.ObjectN(), context);
                      }
                    }, T$.VoidTovoid()), builder: dart.nullCheck(dart.nullCheck(this.widget.route).builder), backgroundColor: this.widget.backgroundColor, elevation: this.widget.elevation, shape: this.widget.shape, clipBehavior: this.widget.clipBehavior, enableDrag: this.widget.enableDrag}) : new scaffold.Scaffold.new({bottomSheet: new bottom_sheet.BottomSheet.new({animationController: dart.nullCheck(this.widget.route)[S$._animationController], onClosing: dart.fn(() => {
                      }, T$.VoidTovoid()), builder: dart.nullCheck(dart.nullCheck(this.widget.route).builder), backgroundColor: this.widget.backgroundColor, elevation: this.widget.elevation, shape: this.widget.shape, clipBehavior: this.widget.clipBehavior, enableDrag: this.widget.enableDrag})})})})});
          }, T$.BuildContextAndWidgetNToSemantics())});
      }
      static ['_#new#tearOff'](T) {
        return new (bottomsheet$._GetPerModalBottomSheetState$(T)).new();
      }
    }
    (_GetPerModalBottomSheetState.new = function() {
      _GetPerModalBottomSheetState.__proto__.new.call(this);
      ;
    }).prototype = _GetPerModalBottomSheetState.prototype;
    dart.addTypeTests(_GetPerModalBottomSheetState);
    _GetPerModalBottomSheetState.prototype[_is__GetPerModalBottomSheetState_default] = true;
    dart.addTypeCaches(_GetPerModalBottomSheetState);
    dart.setMethodSignature(_GetPerModalBottomSheetState, () => ({
      __proto__: dart.getMethods(_GetPerModalBottomSheetState.__proto__),
      [S$._getRouteLabel]: dart.fnType(core.String, [material_localizations.MaterialLocalizations]),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(_GetPerModalBottomSheetState, I[17]);
    return _GetPerModalBottomSheetState;
  });
  bottomsheet$._GetPerModalBottomSheetState = bottomsheet$._GetPerModalBottomSheetState$();
  dart.addTypeTests(bottomsheet$._GetPerModalBottomSheetState, _is__GetPerModalBottomSheetState_default);
  bottomsheet$._GetModalBottomSheetLayout = class _GetModalBottomSheetLayout extends shifted_box.SingleChildLayoutDelegate {
    static ['_#new#tearOff'](progress, isScrollControlled) {
      return new bottomsheet$._GetModalBottomSheetLayout.new(progress, isScrollControlled);
    }
    getConstraintsForChild(constraints) {
      return new box$.BoxConstraints.new({minWidth: constraints.maxWidth, maxWidth: constraints.maxWidth, minHeight: 0, maxHeight: this.isScrollControlled ? constraints.maxHeight : constraints.maxHeight * 9 / 16});
    }
    getPositionForChild(size, childSize) {
      return new ui.Offset.new(0, size.height - childSize.height * this.progress);
    }
    shouldRelayout(oldDelegate) {
      bottomsheet$._GetModalBottomSheetLayout.as(oldDelegate);
      return this.progress !== oldDelegate.progress;
    }
  };
  (bottomsheet$._GetModalBottomSheetLayout.new = function(progress, isScrollControlled) {
    this.progress = progress;
    this.isScrollControlled = isScrollControlled;
    bottomsheet$._GetModalBottomSheetLayout.__proto__.new.call(this);
    ;
  }).prototype = bottomsheet$._GetModalBottomSheetLayout.prototype;
  dart.addTypeTests(bottomsheet$._GetModalBottomSheetLayout);
  dart.addTypeCaches(bottomsheet$._GetModalBottomSheetLayout);
  dart.setMethodSignature(bottomsheet$._GetModalBottomSheetLayout, () => ({
    __proto__: dart.getMethods(bottomsheet$._GetModalBottomSheetLayout.__proto__),
    shouldRelayout: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(bottomsheet$._GetModalBottomSheetLayout, I[17]);
  dart.setFieldSignature(bottomsheet$._GetModalBottomSheetLayout, () => ({
    __proto__: dart.getFields(bottomsheet$._GetModalBottomSheetLayout.__proto__),
    progress: dart.finalFieldType(core.double),
    isScrollControlled: dart.finalFieldType(core.bool)
  }));
  extension_navigation['ExtensionBottomSheet|bottomSheet'] = function ExtensionBottomSheet$124bottomSheet(T, $this, bottomsheet, opts) {
    let t41, t41$, t41$0, t41$1;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let persistent = opts && 'persistent' in opts ? opts.persistent : true;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
    let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
    let ignoreSafeArea = opts && 'ignoreSafeArea' in opts ? opts.ignoreSafeArea : null;
    let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
    let useRootNavigator = opts && 'useRootNavigator' in opts ? opts.useRootNavigator : false;
    let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
    let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    let enterBottomSheetDuration = opts && 'enterBottomSheetDuration' in opts ? opts.enterBottomSheetDuration : null;
    let exitBottomSheetDuration = opts && 'exitBottomSheetDuration' in opts ? opts.exitBottomSheetDuration : null;
    return navigator.Navigator.of(dart.nullCheck(extension_navigation['GetNavigation|get#overlayContext']($this)), {rootNavigator: useRootNavigator}).push(T, new (bottomsheet$.GetModalBottomSheetRoute$(T)).new({builder: dart.fn(_ => bottomsheet, T$.BuildContextToWidget()), isPersistent: persistent, theme: theme$.Theme.of(dart.nullCheck(extension_navigation['GetNavigation|get#key']($this).currentContext)), isScrollControlled: isScrollControlled, barrierLabel: material_localizations.MaterialLocalizations.of(dart.nullCheck(extension_navigation['GetNavigation|get#key']($this).currentContext)).modalBarrierDismissLabel, backgroundColor: (t41 = backgroundColor, t41 == null ? colors.Colors.transparent : t41), elevation: elevation, shape: shape, removeTop: (t41$ = ignoreSafeArea, t41$ == null ? true : t41$), clipBehavior: clipBehavior, isDismissible: isDismissible, modalBarrierColor: barrierColor, settings: settings, enableDrag: enableDrag, enterBottomSheetDuration: (t41$0 = enterBottomSheetDuration, t41$0 == null ? C[12] || CT.C12 : t41$0), exitBottomSheetDuration: (t41$1 = exitBottomSheetDuration, t41$1 == null ? C[13] || CT.C13 : t41$1)}));
  };
  extension_navigation['ExtensionBottomSheet|get#bottomSheet'] = function ExtensionBottomSheet$124get$35bottomSheet($this) {
    return dart.fn((T, bottomsheet, opts) => {
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let persistent = opts && 'persistent' in opts ? opts.persistent : true;
      let shape = opts && 'shape' in opts ? opts.shape : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let ignoreSafeArea = opts && 'ignoreSafeArea' in opts ? opts.ignoreSafeArea : null;
      let isScrollControlled = opts && 'isScrollControlled' in opts ? opts.isScrollControlled : false;
      let useRootNavigator = opts && 'useRootNavigator' in opts ? opts.useRootNavigator : false;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
      let enableDrag = opts && 'enableDrag' in opts ? opts.enableDrag : true;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let enterBottomSheetDuration = opts && 'enterBottomSheetDuration' in opts ? opts.enterBottomSheetDuration : null;
      let exitBottomSheetDuration = opts && 'exitBottomSheetDuration' in opts ? opts.exitBottomSheetDuration : null;
      return extension_navigation['ExtensionBottomSheet|bottomSheet'](T, $this, bottomsheet, {backgroundColor: backgroundColor, elevation: elevation, persistent: persistent, shape: shape, clipBehavior: clipBehavior, barrierColor: barrierColor, ignoreSafeArea: ignoreSafeArea, isScrollControlled: isScrollControlled, useRootNavigator: useRootNavigator, isDismissible: isDismissible, enableDrag: enableDrag, settings: settings, enterBottomSheetDuration: enterBottomSheetDuration, exitBottomSheetDuration: exitBottomSheetDuration});
    }, T$.Widget__ToFutureOfTN());
  };
  extension_navigation['ExtensionDialog|dialog'] = function ExtensionDialog$124dialog(T, $this, widget, opts) {
    let t43, t43$, t43$0;
    let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
    let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
    let useSafeArea = opts && 'useSafeArea' in opts ? opts.useSafeArea : true;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let transitionCurve = opts && 'transitionCurve' in opts ? opts.transitionCurve : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let routeSettings = opts && 'routeSettings' in opts ? opts.routeSettings : null;
    if (!debug$.debugCheckHasMaterialLocalizations(dart.nullCheck(extension_navigation['GetNavigation|get#context']($this)))) dart.assertFailed(null, I[18], 81, 12, "debugCheckHasMaterialLocalizations(context!)");
    let theme = theme$.Theme.of(dart.nullCheck(extension_navigation['GetNavigation|get#context']($this)));
    return extension_navigation['ExtensionDialog|generalDialog'](T, $this, {pageBuilder: dart.fn((buildContext, animation, secondaryAnimation) => {
        let pageChild = widget;
        let dialog = new basic.Builder.new({builder: dart.fn(context => new theme$.Theme.new({data: theme, child: pageChild}), T$.BuildContextToTheme())});
        if (useSafeArea) {
          dialog = new safe_area.SafeArea.new({child: dialog});
        }
        return dialog;
      }, T$.BuildContextAndAnimationOfdoubleAndAnimationOfdoubleToWidget()), barrierDismissible: barrierDismissible, barrierLabel: material_localizations.MaterialLocalizations.of(dart.nullCheck(extension_navigation['GetNavigation|get#context']($this))).modalBarrierDismissLabel, barrierColor: (t43 = barrierColor, t43 == null ? colors.Colors.black54 : t43), transitionDuration: (t43$ = transitionDuration, t43$ == null ? extension_navigation['GetNavigation|get#defaultDialogTransitionDuration']($this) : t43$), transitionBuilder: dart.fn((context, animation, secondaryAnimation, child) => {
        let t43;
        return new transitions.FadeTransition.new({opacity: new animations.CurvedAnimation.new({parent: animation, curve: (t43 = transitionCurve, t43 == null ? extension_navigation['GetNavigation|get#defaultDialogTransitionCurve']($this) : t43)}), child: child});
      }, T$.BuildContextAndAnimationOfdoubleAndAnimationOfdouble__ToFadeTransition()), navigatorKey: navigatorKey, routeSettings: (t43$0 = routeSettings, t43$0 == null ? new navigator.RouteSettings.new({arguments: $arguments, name: name}) : t43$0)});
  };
  extension_navigation['ExtensionDialog|get#dialog'] = function ExtensionDialog$124get$35dialog($this) {
    return dart.fn((T, widget, opts) => {
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let useSafeArea = opts && 'useSafeArea' in opts ? opts.useSafeArea : true;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let transitionCurve = opts && 'transitionCurve' in opts ? opts.transitionCurve : null;
      let name = opts && 'name' in opts ? opts.name : null;
      let routeSettings = opts && 'routeSettings' in opts ? opts.routeSettings : null;
      return extension_navigation['ExtensionDialog|dialog'](T, $this, widget, {barrierDismissible: barrierDismissible, barrierColor: barrierColor, useSafeArea: useSafeArea, navigatorKey: navigatorKey, arguments: $arguments, transitionDuration: transitionDuration, transitionCurve: transitionCurve, name: name, routeSettings: routeSettings});
    }, T$.Widget__ToFutureOfTN$1());
  };
  extension_navigation['ExtensionDialog|generalDialog'] = function ExtensionDialog$124generalDialog(T, $this, opts) {
    let t45, t45$;
    let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
    let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
    let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
    let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[15] || CT.C15;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[13] || CT.C13;
    let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let routeSettings = opts && 'routeSettings' in opts ? opts.routeSettings : null;
    if (!(!barrierDismissible || barrierLabel != null)) dart.assertFailed(null, I[18], 126, 12, "!barrierDismissible || barrierLabel != null");
    let nav = (t45$ = (t45 = navigatorKey, t45 == null ? null : t45.currentState), t45$ == null ? navigator.Navigator.of(dart.nullCheck(extension_navigation['GetNavigation|get#overlayContext']($this)), {rootNavigator: true}) : t45$);
    return nav.push(T, new (dialog_route.GetDialogRoute$(T)).new({pageBuilder: pageBuilder, barrierDismissible: barrierDismissible, barrierLabel: barrierLabel, barrierColor: barrierColor, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder, settings: routeSettings}));
  };
  extension_navigation['ExtensionDialog|get#generalDialog'] = function ExtensionDialog$124get$35generalDialog($this) {
    return dart.fn((T, opts) => {
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[15] || CT.C15;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[13] || CT.C13;
      let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let routeSettings = opts && 'routeSettings' in opts ? opts.routeSettings : null;
      return extension_navigation['ExtensionDialog|generalDialog'](T, $this, {pageBuilder: pageBuilder, barrierDismissible: barrierDismissible, barrierLabel: barrierLabel, barrierColor: barrierColor, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder, navigatorKey: navigatorKey, routeSettings: routeSettings});
    }, T$.__ToFutureOfTN());
  };
  extension_navigation['ExtensionDialog|defaultDialog'] = function ExtensionDialog$124defaultDialog(T, $this, opts) {
    let t47, t47$, t47$0, t47$1, t47$2, t47$3, t47$4, t47$5, t47$6, t47$7;
    let title = opts && 'title' in opts ? opts.title : "Alert";
    let titlePadding = opts && 'titlePadding' in opts ? opts.titlePadding : null;
    let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let contentPadding = opts && 'contentPadding' in opts ? opts.contentPadding : null;
    let onConfirm = opts && 'onConfirm' in opts ? opts.onConfirm : null;
    let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
    let onCustom = opts && 'onCustom' in opts ? opts.onCustom : null;
    let cancelTextColor = opts && 'cancelTextColor' in opts ? opts.cancelTextColor : null;
    let confirmTextColor = opts && 'confirmTextColor' in opts ? opts.confirmTextColor : null;
    let textConfirm = opts && 'textConfirm' in opts ? opts.textConfirm : null;
    let textCancel = opts && 'textCancel' in opts ? opts.textCancel : null;
    let textCustom = opts && 'textCustom' in opts ? opts.textCustom : null;
    let confirm = opts && 'confirm' in opts ? opts.confirm : null;
    let cancel = opts && 'cancel' in opts ? opts.cancel : null;
    let custom = opts && 'custom' in opts ? opts.custom : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
    let buttonColor = opts && 'buttonColor' in opts ? opts.buttonColor : null;
    let middleText = opts && 'middleText' in opts ? opts.middleText : "Dialog made in 3 lines of code";
    let middleTextStyle = opts && 'middleTextStyle' in opts ? opts.middleTextStyle : null;
    let radius = opts && 'radius' in opts ? opts.radius : 20;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let onWillPop = opts && 'onWillPop' in opts ? opts.onWillPop : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let leanCancel = onCancel != null || textCancel != null;
    let leanConfirm = onConfirm != null || textConfirm != null;
    actions == null ? actions = T$.JSArrayOfWidget().of([]) : null;
    if (cancel != null) {
      actions[S$.$add](cancel);
    } else {
      if (leanCancel) {
        actions[S$.$add](new text_button.TextButton.new({style: text_button.TextButton.styleFrom({tapTargetSize: theme_data.MaterialTapTargetSize.shrinkWrap, padding: C[16] || CT.C16, shape: new rounded_rectangle_border.RoundedRectangleBorder.new({side: new borders.BorderSide.new({color: (t47 = buttonColor, t47 == null ? extension_navigation['GetNavigation|get#theme']($this).colorScheme.secondary : t47), width: 2, style: borders.BorderStyle.solid}), borderRadius: new border_radius.BorderRadius.circular(100)})}), onPressed: dart.fn(() => {
            let t47;
            t47 = onCancel;
            t47 == null ? null : t47();
            extension_navigation['GetNavigation|back'](dart.dynamic, $this);
          }, T$.VoidTovoid()), child: new text.Text.new((t47$ = textCancel, t47$ == null ? "Cancel" : t47$), {style: new text_style.TextStyle.new({color: (t47$0 = cancelTextColor, t47$0 == null ? extension_navigation['GetNavigation|get#theme']($this).colorScheme.secondary : t47$0)})})}));
      }
    }
    if (confirm != null) {
      actions[S$.$add](confirm);
    } else {
      if (leanConfirm) {
        actions[S$.$add](new text_button.TextButton.new({style: text_button.TextButton.styleFrom({tapTargetSize: theme_data.MaterialTapTargetSize.shrinkWrap, backgroundColor: (t47$1 = buttonColor, t47$1 == null ? extension_navigation['GetNavigation|get#theme']($this).colorScheme.secondary : t47$1), shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.circular(100)})}), child: new text.Text.new((t47$2 = textConfirm, t47$2 == null ? "Ok" : t47$2), {style: new text_style.TextStyle.new({color: (t47$3 = confirmTextColor, t47$3 == null ? extension_navigation['GetNavigation|get#theme']($this).backgroundColor : t47$3)})}), onPressed: dart.fn(() => {
            let t47;
            t47 = onConfirm;
            t47 == null ? null : t47();
          }, T$.VoidTovoid())}));
      }
    }
    let baseAlertDialog = new dialog.AlertDialog.new({titlePadding: (t47$4 = titlePadding, t47$4 == null ? C[17] || CT.C17 : t47$4), contentPadding: (t47$5 = contentPadding, t47$5 == null ? C[17] || CT.C17 : t47$5), backgroundColor: (t47$6 = backgroundColor, t47$6 == null ? extension_navigation['GetNavigation|get#theme']($this).dialogBackgroundColor : t47$6), shape: new rounded_rectangle_border.RoundedRectangleBorder.new({borderRadius: new border_radius.BorderRadius.all(new ui.Radius.circular(radius))}), title: new text.Text.new(title, {textAlign: ui.TextAlign.center, style: titleStyle}), content: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.center, mainAxisSize: flex.MainAxisSize.min, children: T$.JSArrayOfWidget().of([(t47$7 = content, t47$7 == null ? new text.Text.new(middleText, {textAlign: ui.TextAlign.center, style: middleTextStyle}) : t47$7), C[18] || CT.C18, new button_theme.ButtonTheme.new({minWidth: 78, height: 34, child: new basic.Wrap.new({alignment: wrap.WrapAlignment.center, spacing: 8, runSpacing: 8, children: actions})})])}), buttonPadding: edge_insets.EdgeInsets.zero});
    return extension_navigation['ExtensionDialog|dialog'](T, $this, onWillPop != null ? new will_pop_scope.WillPopScope.new({onWillPop: onWillPop, child: baseAlertDialog}) : baseAlertDialog, {barrierDismissible: barrierDismissible, navigatorKey: navigatorKey});
  };
  extension_navigation['ExtensionDialog|get#defaultDialog'] = function ExtensionDialog$124get$35defaultDialog($this) {
    return dart.fn((T, opts) => {
      let title = opts && 'title' in opts ? opts.title : "Alert";
      let titlePadding = opts && 'titlePadding' in opts ? opts.titlePadding : null;
      let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
      let content = opts && 'content' in opts ? opts.content : null;
      let contentPadding = opts && 'contentPadding' in opts ? opts.contentPadding : null;
      let onConfirm = opts && 'onConfirm' in opts ? opts.onConfirm : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      let onCustom = opts && 'onCustom' in opts ? opts.onCustom : null;
      let cancelTextColor = opts && 'cancelTextColor' in opts ? opts.cancelTextColor : null;
      let confirmTextColor = opts && 'confirmTextColor' in opts ? opts.confirmTextColor : null;
      let textConfirm = opts && 'textConfirm' in opts ? opts.textConfirm : null;
      let textCancel = opts && 'textCancel' in opts ? opts.textCancel : null;
      let textCustom = opts && 'textCustom' in opts ? opts.textCustom : null;
      let confirm = opts && 'confirm' in opts ? opts.confirm : null;
      let cancel = opts && 'cancel' in opts ? opts.cancel : null;
      let custom = opts && 'custom' in opts ? opts.custom : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
      let buttonColor = opts && 'buttonColor' in opts ? opts.buttonColor : null;
      let middleText = opts && 'middleText' in opts ? opts.middleText : "Dialog made in 3 lines of code";
      let middleTextStyle = opts && 'middleTextStyle' in opts ? opts.middleTextStyle : null;
      let radius = opts && 'radius' in opts ? opts.radius : 20;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let onWillPop = opts && 'onWillPop' in opts ? opts.onWillPop : null;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      return extension_navigation['ExtensionDialog|defaultDialog'](T, $this, {title: title, titlePadding: titlePadding, titleStyle: titleStyle, content: content, contentPadding: contentPadding, onConfirm: onConfirm, onCancel: onCancel, onCustom: onCustom, cancelTextColor: cancelTextColor, confirmTextColor: confirmTextColor, textConfirm: textConfirm, textCancel: textCancel, textCustom: textCustom, confirm: confirm, cancel: cancel, custom: custom, backgroundColor: backgroundColor, barrierDismissible: barrierDismissible, buttonColor: buttonColor, middleText: middleText, middleTextStyle: middleTextStyle, radius: radius, actions: actions, onWillPop: onWillPop, navigatorKey: navigatorKey});
    }, T$.__ToFutureOfTN$1());
  };
  extension_navigation['ExtensionSnackbar|rawSnackbar'] = function ExtensionSnackbar$124rawSnackbar($this, opts) {
    let t49;
    let title = opts && 'title' in opts ? opts.title : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let messageText = opts && 'messageText' in opts ? opts.messageText : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let instantInit = opts && 'instantInit' in opts ? opts.instantInit : true;
    let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
    let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
    let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
    let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
    let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
    let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let duration = opts && 'duration' in opts ? opts.duration : C[22] || CT.C22;
    let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
    let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
    let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
    let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
    let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
    let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
    let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
    let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
    let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
    let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
    let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
    let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
    let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
    let getSnackBar = new snackbar.GetSnackBar.new({snackbarStatus: snackbarStatus, title: title, message: message, titleText: titleText, messageText: messageText, snackPosition: snackPosition, borderRadius: borderRadius, margin: margin, duration: duration, barBlur: barBlur, backgroundColor: backgroundColor, icon: icon, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, padding: padding, borderColor: borderColor, borderWidth: borderWidth, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, isDismissible: isDismissible, dismissDirection: dismissDirection, showProgressIndicator: showProgressIndicator, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, overlayBlur: overlayBlur, overlayColor: overlayColor, userInputForm: userInputForm});
    let controller = new snackbar_controller.SnackbarController.new(getSnackBar);
    if (instantInit) {
      controller.show();
    } else {
      t49 = get_core.ambiguate(binding$.SchedulerBinding, binding$.SchedulerBinding.instance);
      t49 == null ? null : t49.addPostFrameCallback(dart.fn(_ => {
        controller.show();
      }, T$.DurationTovoid()));
    }
    return controller;
  };
  extension_navigation['ExtensionSnackbar|get#rawSnackbar'] = function ExtensionSnackbar$124get$35rawSnackbar($this) {
    return dart.fn(opts => {
      let title = opts && 'title' in opts ? opts.title : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let titleText = opts && 'titleText' in opts ? opts.titleText : null;
      let messageText = opts && 'messageText' in opts ? opts.messageText : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let instantInit = opts && 'instantInit' in opts ? opts.instantInit : true;
      let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
      let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
      let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
      let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
      let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
      let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let duration = opts && 'duration' in opts ? opts.duration : C[22] || CT.C22;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
      let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
      let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
      let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
      let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
      let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
      let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
      let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
      let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
      let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
      let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
      let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
      let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
      return extension_navigation['ExtensionSnackbar|rawSnackbar']($this, {title: title, message: message, titleText: titleText, messageText: messageText, icon: icon, instantInit: instantInit, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, margin: margin, padding: padding, borderRadius: borderRadius, borderColor: borderColor, borderWidth: borderWidth, backgroundColor: backgroundColor, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, duration: duration, isDismissible: isDismissible, dismissDirection: dismissDirection, showProgressIndicator: showProgressIndicator, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackPosition: snackPosition, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, snackbarStatus: snackbarStatus, barBlur: barBlur, overlayBlur: overlayBlur, overlayColor: overlayColor, userInputForm: userInputForm});
    }, T$.__ToSnackbarController());
  };
  extension_navigation['ExtensionSnackbar|showSnackbar'] = function ExtensionSnackbar$124showSnackbar($this, snackbar) {
    let controller = new snackbar_controller.SnackbarController.new(snackbar);
    controller.show();
    return controller;
  };
  extension_navigation['ExtensionSnackbar|get#showSnackbar'] = function ExtensionSnackbar$124get$35showSnackbar($this) {
    return dart.fn(snackbar => extension_navigation['ExtensionSnackbar|showSnackbar']($this, snackbar), T$.GetSnackBarToSnackbarController());
  };
  extension_navigation['ExtensionSnackbar|get#snackbar'] = function ExtensionSnackbar$124get$35snackbar($this) {
    return dart.fn((title, message, opts) => {
      let colorText = opts && 'colorText' in opts ? opts.colorText : null;
      let duration = opts && 'duration' in opts ? opts.duration : C[22] || CT.C22;
      let instantInit = opts && 'instantInit' in opts ? opts.instantInit : true;
      let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : null;
      let titleText = opts && 'titleText' in opts ? opts.titleText : null;
      let messageText = opts && 'messageText' in opts ? opts.messageText : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : null;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let margin = opts && 'margin' in opts ? opts.margin : null;
      let padding = opts && 'padding' in opts ? opts.padding : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
      let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
      let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
      let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : null;
      let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : null;
      let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
      let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
      let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
      let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
      let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : null;
      let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : null;
      let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : null;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
      let barBlur = opts && 'barBlur' in opts ? opts.barBlur : null;
      let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : null;
      let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
      let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
      return extension_navigation['ExtensionSnackbar|snackbar']($this, title, message, {colorText: colorText, duration: duration, instantInit: instantInit, snackPosition: snackPosition, titleText: titleText, messageText: messageText, icon: icon, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, margin: margin, padding: padding, borderRadius: borderRadius, borderColor: borderColor, borderWidth: borderWidth, backgroundColor: backgroundColor, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, isDismissible: isDismissible, showProgressIndicator: showProgressIndicator, dismissDirection: dismissDirection, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, barBlur: barBlur, overlayBlur: overlayBlur, snackbarStatus: snackbarStatus, overlayColor: overlayColor, userInputForm: userInputForm});
    }, T$.StringAndString__ToSnackbarController());
  };
  extension_navigation['ExtensionSnackbar|snackbar'] = function ExtensionSnackbar$124snackbar($this, title, message, opts) {
    let t55, t55$, t54, t55$0, t55$1, t54$, t54$0, t54$1, t54$2, t54$3, t54$4, t54$5, t54$6, t54$7, t54$8, t54$9, t54$10, t54$11, t54$12, t54$13, t54$14, t54$15;
    let colorText = opts && 'colorText' in opts ? opts.colorText : null;
    let duration = opts && 'duration' in opts ? opts.duration : C[22] || CT.C22;
    let instantInit = opts && 'instantInit' in opts ? opts.instantInit : true;
    let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let messageText = opts && 'messageText' in opts ? opts.messageText : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : null;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
    let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
    let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
    let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : null;
    let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : null;
    let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
    let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
    let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
    let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
    let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : null;
    let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : null;
    let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : null;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : null;
    let barBlur = opts && 'barBlur' in opts ? opts.barBlur : null;
    let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : null;
    let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : null;
    let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
    let getSnackBar = new snackbar.GetSnackBar.new({snackbarStatus: snackbarStatus, titleText: (t54 = titleText, t54 == null ? new text.Text.new(title, {style: new text_style.TextStyle.new({color: (t55$ = (t55 = colorText, t55 == null ? extension_navigation['GetNavigation|get#iconColor']($this) : t55), t55$ == null ? colors.Colors.black : t55$), fontWeight: ui.FontWeight.w800, fontSize: 16})}) : t54), messageText: (t54$ = messageText, t54$ == null ? new text.Text.new(message, {style: new text_style.TextStyle.new({color: (t55$1 = (t55$0 = colorText, t55$0 == null ? extension_navigation['GetNavigation|get#iconColor']($this) : t55$0), t55$1 == null ? colors.Colors.black : t55$1), fontWeight: ui.FontWeight.w300, fontSize: 14})}) : t54$), snackPosition: (t54$0 = snackPosition, t54$0 == null ? snackbar.SnackPosition.TOP : t54$0), borderRadius: (t54$1 = borderRadius, t54$1 == null ? 15 : t54$1), margin: (t54$2 = margin, t54$2 == null ? C[27] || CT.C27 : t54$2), duration: duration, barBlur: (t54$3 = barBlur, t54$3 == null ? 7 : t54$3), backgroundColor: (t54$4 = backgroundColor, t54$4 == null ? colors.Colors.grey.withOpacity(0.2) : t54$4), icon: icon, shouldIconPulse: (t54$5 = shouldIconPulse, t54$5 == null ? true : t54$5), maxWidth: maxWidth, padding: (t54$6 = padding, t54$6 == null ? C[20] || CT.C20 : t54$6), borderColor: borderColor, borderWidth: borderWidth, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, isDismissible: (t54$7 = isDismissible, t54$7 == null ? true : t54$7), dismissDirection: dismissDirection, showProgressIndicator: (t54$8 = showProgressIndicator, t54$8 == null ? false : t54$8), progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackStyle: (t54$9 = snackStyle, t54$9 == null ? snackbar.SnackStyle.FLOATING : t54$9), forwardAnimationCurve: (t54$10 = forwardAnimationCurve, t54$10 == null ? curves.Curves.easeOutCirc : t54$10), reverseAnimationCurve: (t54$11 = reverseAnimationCurve, t54$11 == null ? curves.Curves.easeOutCirc : t54$11), animationDuration: (t54$12 = animationDuration, t54$12 == null ? C[26] || CT.C26 : t54$12), overlayBlur: (t54$13 = overlayBlur, t54$13 == null ? 0 : t54$13), overlayColor: (t54$14 = overlayColor, t54$14 == null ? colors.Colors.transparent : t54$14), userInputForm: userInputForm});
    let controller = new snackbar_controller.SnackbarController.new(getSnackBar);
    if (instantInit) {
      controller.show();
    } else {
      t54$15 = get_core.ambiguate(binding$.SchedulerBinding, binding$.SchedulerBinding.instance);
      t54$15 == null ? null : t54$15.addPostFrameCallback(dart.fn(_ => {
        controller.show();
      }, T$.DurationTovoid()));
    }
    return controller;
  };
  extension_navigation['GetNavigation|to'] = function GetNavigation$124to(T, $this, page, opts) {
    let t56, t56$, t56$0, t56$1, t56$2, t55;
    let opaque = opts && 'opaque' in opts ? opts.opaque : null;
    let transition = opts && 'transition' in opts ? opts.transition : null;
    let curve = opts && 'curve' in opts ? opts.curve : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let routeName = opts && 'routeName' in opts ? opts.routeName : null;
    let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let binding = opts && 'binding' in opts ? opts.binding : null;
    let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
    routeName == null ? routeName = "/" + dart.str(dart.runtimeType(page)) : null;
    routeName = extension_navigation['GetNavigation|_cleanRouteName']($this, routeName);
    if (preventDuplicates && routeName === extension_navigation['GetNavigation|get#currentRoute']($this)) {
      return null;
    }
    t55 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t55 == null ? null : t55.push(T, new (default_route.GetPageRoute$(T)).new({opaque: (t56 = opaque, t56 == null ? true : t56), page: extension_navigation['GetNavigation|_resolvePage']($this, page, "to"), routeName: routeName, gestureWidth: gestureWidth, settings: new navigator.RouteSettings.new({name: routeName, arguments: $arguments}), popGesture: (t56$ = popGesture, t56$ == null ? extension_navigation['GetNavigation|get#defaultPopGesture']($this) : t56$), transition: (t56$0 = transition, t56$0 == null ? extension_navigation['GetNavigation|get#defaultTransition']($this) : t56$0), curve: (t56$1 = curve, t56$1 == null ? extension_navigation['GetNavigation|get#defaultTransitionCurve']($this) : t56$1), fullscreenDialog: fullscreenDialog, binding: binding, transitionDuration: (t56$2 = duration, t56$2 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration']($this) : t56$2)}));
  };
  extension_navigation['GetNavigation|get#to'] = function GetNavigation$124get$35to($this) {
    return dart.fn((T, page, opts) => {
      let opaque = opts && 'opaque' in opts ? opts.opaque : null;
      let transition = opts && 'transition' in opts ? opts.transition : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let routeName = opts && 'routeName' in opts ? opts.routeName : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let binding = opts && 'binding' in opts ? opts.binding : null;
      let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      return extension_navigation['GetNavigation|to'](T, $this, page, {opaque: opaque, transition: transition, curve: curve, duration: duration, id: id, routeName: routeName, fullscreenDialog: fullscreenDialog, arguments: $arguments, binding: binding, preventDuplicates: preventDuplicates, popGesture: popGesture, gestureWidth: gestureWidth});
    }, T$.dynamic__ToFutureNOfTN());
  };
  extension_navigation['GetNavigation|_resolvePage'] = function GetNavigation$124_resolvePage($this, page, method) {
    let t58, t57;
    if (T$.VoidToWidget().is(page)) {
      return page;
    } else if (framework.Widget.is(page)) {
      t57 = get_main.Get;
      t58 = "WARNING, consider using: \"Get." + method + "(() => Page())\" instead of \"Get." + method + "(Page())\".\nUsing a widget function instead of a widget fully guarantees that the widget and its controllers will be removed from memory when they are no longer used.\n      ";
      t57.log(t58);
      return dart.fn(() => page, T$.VoidToWidget());
    } else if (typeof page == 'string') {
      dart.throw("Unexpected String,\nuse toNamed() instead");
    } else {
      dart.throw("Unexpected format,\nyou can only use widgets and widget functions here");
    }
  };
  extension_navigation['GetNavigation|get#_resolvePage'] = function GetNavigation$124get$35_resolvePage($this) {
    return dart.fn((page, method) => extension_navigation['GetNavigation|_resolvePage']($this, page, method), T$.dynamicAndStringToFn());
  };
  extension_navigation['GetNavigation|toNamed'] = function GetNavigation$124toNamed(T, $this, page, opts) {
    let t59;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    if (preventDuplicates && page === extension_navigation['GetNavigation|get#currentRoute']($this)) {
      return null;
    }
    if (parameters != null) {
      let uri = core._Uri.new({path: page, queryParameters: parameters});
      page = uri.toString();
    }
    t59 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t59 == null ? null : t59.pushNamed(T, page, {arguments: $arguments});
  };
  extension_navigation['GetNavigation|get#toNamed'] = function GetNavigation$124get$35toNamed($this) {
    return dart.fn((T, page, opts) => {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return extension_navigation['GetNavigation|toNamed'](T, $this, page, {arguments: $arguments, id: id, preventDuplicates: preventDuplicates, parameters: parameters});
    }, T$.String__ToFutureNOfTN());
  };
  extension_navigation['GetNavigation|offNamed'] = function GetNavigation$124offNamed(T, $this, page, opts) {
    let t61;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    if (preventDuplicates && page === extension_navigation['GetNavigation|get#currentRoute']($this)) {
      return null;
    }
    if (parameters != null) {
      let uri = core._Uri.new({path: page, queryParameters: parameters});
      page = uri.toString();
    }
    t61 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t61 == null ? null : t61.pushReplacementNamed(T, T$.ObjectN(), page, {arguments: $arguments});
  };
  extension_navigation['GetNavigation|get#offNamed'] = function GetNavigation$124get$35offNamed($this) {
    return dart.fn((T, page, opts) => {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return extension_navigation['GetNavigation|offNamed'](T, $this, page, {arguments: $arguments, id: id, preventDuplicates: preventDuplicates, parameters: parameters});
    }, T$.String__ToFutureNOfTN());
  };
  extension_navigation['GetNavigation|until'] = function GetNavigation$124until($this, predicate, opts) {
    let t63;
    let id = opts && 'id' in opts ? opts.id : null;
    t63 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t63 == null ? null : t63.popUntil(predicate);
  };
  extension_navigation['GetNavigation|get#until'] = function GetNavigation$124get$35until($this) {
    return dart.fn((predicate, opts) => {
      let id = opts && 'id' in opts ? opts.id : null;
      return extension_navigation['GetNavigation|until']($this, predicate, {id: id});
    }, T$.Fn__Tovoid$3());
  };
  extension_navigation['GetNavigation|offUntil'] = function GetNavigation$124offUntil(T, $this, page, predicate, opts) {
    let t65;
    let id = opts && 'id' in opts ? opts.id : null;
    t65 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t65 == null ? null : t65.pushAndRemoveUntil(T, page, predicate);
  };
  extension_navigation['GetNavigation|get#offUntil'] = function GetNavigation$124get$35offUntil($this) {
    return dart.fn((T, page, predicate, opts) => {
      let id = opts && 'id' in opts ? opts.id : null;
      return extension_navigation['GetNavigation|offUntil'](T, $this, page, predicate, {id: id});
    }, T$.RouteOfTAndFn__ToFutureNOfTN());
  };
  extension_navigation['GetNavigation|offNamedUntil'] = function GetNavigation$124offNamedUntil(T, $this, page, predicate, opts) {
    let t67;
    let id = opts && 'id' in opts ? opts.id : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    if (parameters != null) {
      let uri = core._Uri.new({path: page, queryParameters: parameters});
      page = uri.toString();
    }
    t67 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t67 == null ? null : t67.pushNamedAndRemoveUntil(T, page, predicate, {arguments: $arguments});
  };
  extension_navigation['GetNavigation|get#offNamedUntil'] = function GetNavigation$124get$35offNamedUntil($this) {
    return dart.fn((T, page, predicate, opts) => {
      let id = opts && 'id' in opts ? opts.id : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return extension_navigation['GetNavigation|offNamedUntil'](T, $this, page, predicate, {id: id, arguments: $arguments, parameters: parameters});
    }, T$.StringAndFn__ToFutureNOfTN());
  };
  extension_navigation['GetNavigation|offAndToNamed'] = function GetNavigation$124offAndToNamed(T, $this, page, opts) {
    let t69;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let result = opts && 'result' in opts ? opts.result : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    if (parameters != null) {
      let uri = core._Uri.new({path: page, queryParameters: parameters});
      page = uri.toString();
    }
    t69 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t69 == null ? null : t69.popAndPushNamed(T, core.Object, page, {arguments: $arguments, result: result});
  };
  extension_navigation['GetNavigation|get#offAndToNamed'] = function GetNavigation$124get$35offAndToNamed($this) {
    return dart.fn((T, page, opts) => {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let result = opts && 'result' in opts ? opts.result : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return extension_navigation['GetNavigation|offAndToNamed'](T, $this, page, {arguments: $arguments, id: id, result: result, parameters: parameters});
    }, T$.String__ToFutureNOfTN$1());
  };
  extension_navigation['GetNavigation|removeRoute'] = function GetNavigation$124removeRoute($this, route, opts) {
    let t71;
    let id = opts && 'id' in opts ? opts.id : null;
    t71 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t71 == null ? null : t71.removeRoute(route);
  };
  extension_navigation['GetNavigation|get#removeRoute'] = function GetNavigation$124get$35removeRoute($this) {
    return dart.fn((route, opts) => {
      let id = opts && 'id' in opts ? opts.id : null;
      return extension_navigation['GetNavigation|removeRoute']($this, route, {id: id});
    }, T$.Route__Tovoid());
  };
  extension_navigation['GetNavigation|offAllNamed'] = function GetNavigation$124offAllNamed(T, $this, newRouteName, opts) {
    let t74, t73;
    let predicate = opts && 'predicate' in opts ? opts.predicate : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let parameters = opts && 'parameters' in opts ? opts.parameters : null;
    if (parameters != null) {
      let uri = core._Uri.new({path: newRouteName, queryParameters: parameters});
      newRouteName = uri.toString();
    }
    t73 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t73 == null ? null : t73.pushNamedAndRemoveUntil(T, newRouteName, (t74 = predicate, t74 == null ? dart.fn(_ => false, T$.RouteTobool()) : t74), {arguments: $arguments});
  };
  extension_navigation['GetNavigation|get#offAllNamed'] = function GetNavigation$124get$35offAllNamed($this) {
    return dart.fn((T, newRouteName, opts) => {
      let predicate = opts && 'predicate' in opts ? opts.predicate : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return extension_navigation['GetNavigation|offAllNamed'](T, $this, newRouteName, {predicate: predicate, arguments: $arguments, id: id, parameters: parameters});
    }, T$.String__ToFutureNOfTN$2());
  };
  extension_navigation['GetNavigation|get#isOverlaysOpen'] = function GetNavigation$124get$35isOverlaysOpen($this) {
    return extension_navigation['GetNavigation|get#isSnackbarOpen']($this) || dart.nullCheck(extension_navigation['GetNavigation|get#isDialogOpen']($this)) || dart.nullCheck(extension_navigation['GetNavigation|get#isBottomSheetOpen']($this));
  };
  extension_navigation['GetNavigation|get#isOverlaysClosed'] = function GetNavigation$124get$35isOverlaysClosed($this) {
    return !extension_navigation['GetNavigation|get#isSnackbarOpen']($this) && !dart.nullCheck(extension_navigation['GetNavigation|get#isDialogOpen']($this)) && !dart.nullCheck(extension_navigation['GetNavigation|get#isBottomSheetOpen']($this));
  };
  extension_navigation['GetNavigation|back'] = function GetNavigation$124back(T, $this, opts) {
    let t77, t77$, t77$0, t77$1;
    let result = opts && 'result' in opts ? opts.result : null;
    let closeOverlays = opts && 'closeOverlays' in opts ? opts.closeOverlays : false;
    let canPop = opts && 'canPop' in opts ? opts.canPop : true;
    let id = opts && 'id' in opts ? opts.id : null;
    if (extension_navigation['GetNavigation|get#isSnackbarOpen']($this) && !closeOverlays) {
      extension_navigation['GetNavigation|closeCurrentSnackbar']($this);
      return;
    }
    if (closeOverlays && extension_navigation['GetNavigation|get#isOverlaysOpen']($this)) {
      if (extension_navigation['GetNavigation|get#isSnackbarOpen']($this)) {
        extension_navigation['GetNavigation|closeAllSnackbars']($this);
      }
      t77 = extension_navigation.navigator;
      t77 == null ? null : t77.popUntil(dart.fn(route => !dart.nullCheck(extension_navigation['GetNavigation|get#isDialogOpen']($this)) && !dart.nullCheck(extension_navigation['GetNavigation|get#isBottomSheetOpen']($this)), T$.RouteTobool()));
    }
    if (canPop) {
      if ((t77$ = extension_navigation['GetNavigation|global']($this, id).currentState, t77$ == null ? null : t77$.canPop()) === true) {
        t77$0 = extension_navigation['GetNavigation|global']($this, id).currentState;
        t77$0 == null ? null : t77$0.pop(T, result);
      }
    } else {
      t77$1 = extension_navigation['GetNavigation|global']($this, id).currentState;
      t77$1 == null ? null : t77$1.pop(T, result);
    }
  };
  extension_navigation['GetNavigation|get#back'] = function GetNavigation$124get$35back($this) {
    return dart.fn((T, opts) => {
      let result = opts && 'result' in opts ? opts.result : null;
      let closeOverlays = opts && 'closeOverlays' in opts ? opts.closeOverlays : false;
      let canPop = opts && 'canPop' in opts ? opts.canPop : true;
      let id = opts && 'id' in opts ? opts.id : null;
      return extension_navigation['GetNavigation|back'](T, $this, {result: result, closeOverlays: closeOverlays, canPop: canPop, id: id});
    }, T$.__Tovoid$3());
  };
  extension_navigation['GetNavigation|close'] = function GetNavigation$124close($this, times, id = null) {
    let t79;
    if (times < 1) {
      times = 1;
    }
    let count = 0;
    let back = (t79 = extension_navigation['GetNavigation|global']($this, id).currentState, t79 == null ? null : t79.popUntil(dart.fn(route => {
      let t80;
      return (t80 = count, count = t80 + 1, t80) === times;
    }, T$.RouteTobool())));
    return back;
  };
  extension_navigation['GetNavigation|get#close'] = function GetNavigation$124get$35close($this) {
    return dart.fn((times, id = null) => extension_navigation['GetNavigation|close']($this, times, id), T$.intAndintNTovoid());
  };
  extension_navigation['GetNavigation|off'] = function GetNavigation$124off(T, $this, page, opts) {
    let t82, t82$, t82$0, t82$1, t81;
    let opaque = opts && 'opaque' in opts ? opts.opaque : false;
    let transition = opts && 'transition' in opts ? opts.transition : null;
    let curve = opts && 'curve' in opts ? opts.curve : null;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let routeName = opts && 'routeName' in opts ? opts.routeName : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let binding = opts && 'binding' in opts ? opts.binding : null;
    let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
    let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
    routeName == null ? routeName = "/" + dart.runtimeType(page).toString() : null;
    routeName = extension_navigation['GetNavigation|_cleanRouteName']($this, routeName);
    if (preventDuplicates && routeName === extension_navigation['GetNavigation|get#currentRoute']($this)) {
      return null;
    }
    t81 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t81 == null ? null : t81.pushReplacement(T, T$.ObjectN(), new (default_route.GetPageRoute$(T)).new({opaque: opaque, gestureWidth: gestureWidth, page: extension_navigation['GetNavigation|_resolvePage']($this, page, "off"), binding: binding, settings: new navigator.RouteSettings.new({arguments: $arguments, name: routeName}), routeName: routeName, fullscreenDialog: fullscreenDialog, popGesture: (t82 = popGesture, t82 == null ? extension_navigation['GetNavigation|get#defaultPopGesture']($this) : t82), transition: (t82$ = transition, t82$ == null ? extension_navigation['GetNavigation|get#defaultTransition']($this) : t82$), curve: (t82$0 = curve, t82$0 == null ? extension_navigation['GetNavigation|get#defaultTransitionCurve']($this) : t82$0), transitionDuration: (t82$1 = duration, t82$1 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration']($this) : t82$1)}));
  };
  extension_navigation['GetNavigation|get#off'] = function GetNavigation$124get$35off($this) {
    return dart.fn((T, page, opts) => {
      let opaque = opts && 'opaque' in opts ? opts.opaque : false;
      let transition = opts && 'transition' in opts ? opts.transition : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let routeName = opts && 'routeName' in opts ? opts.routeName : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let binding = opts && 'binding' in opts ? opts.binding : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      return extension_navigation['GetNavigation|off'](T, $this, page, {opaque: opaque, transition: transition, curve: curve, popGesture: popGesture, id: id, routeName: routeName, arguments: $arguments, binding: binding, fullscreenDialog: fullscreenDialog, preventDuplicates: preventDuplicates, duration: duration, gestureWidth: gestureWidth});
    }, T$.dynamic__ToFutureNOfTN$1());
  };
  extension_navigation['GetNavigation|offAll'] = function GetNavigation$124offAll(T, $this, page, opts) {
    let t84, t84$, t84$0, t84$1, t84$2, t83;
    let predicate = opts && 'predicate' in opts ? opts.predicate : null;
    let opaque = opts && 'opaque' in opts ? opts.opaque : false;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let id = opts && 'id' in opts ? opts.id : null;
    let routeName = opts && 'routeName' in opts ? opts.routeName : null;
    let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
    let binding = opts && 'binding' in opts ? opts.binding : null;
    let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
    let transition = opts && 'transition' in opts ? opts.transition : null;
    let curve = opts && 'curve' in opts ? opts.curve : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
    routeName == null ? routeName = "/" + dart.runtimeType(page).toString() : null;
    routeName = extension_navigation['GetNavigation|_cleanRouteName']($this, routeName);
    t83 = extension_navigation['GetNavigation|global']($this, id).currentState;
    return t83 == null ? null : t83.pushAndRemoveUntil(T, new (default_route.GetPageRoute$(T)).new({opaque: opaque, popGesture: (t84 = popGesture, t84 == null ? extension_navigation['GetNavigation|get#defaultPopGesture']($this) : t84), page: extension_navigation['GetNavigation|_resolvePage']($this, page, "offAll"), binding: binding, gestureWidth: gestureWidth, settings: new navigator.RouteSettings.new({name: routeName, arguments: $arguments}), fullscreenDialog: fullscreenDialog, routeName: routeName, transition: (t84$ = transition, t84$ == null ? extension_navigation['GetNavigation|get#defaultTransition']($this) : t84$), curve: (t84$0 = curve, t84$0 == null ? extension_navigation['GetNavigation|get#defaultTransitionCurve']($this) : t84$0), transitionDuration: (t84$1 = duration, t84$1 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration']($this) : t84$1)}), (t84$2 = predicate, t84$2 == null ? dart.fn(route => false, T$.RouteTobool()) : t84$2));
  };
  extension_navigation['GetNavigation|get#offAll'] = function GetNavigation$124get$35offAll($this) {
    return dart.fn((T, page, opts) => {
      let predicate = opts && 'predicate' in opts ? opts.predicate : null;
      let opaque = opts && 'opaque' in opts ? opts.opaque : false;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let routeName = opts && 'routeName' in opts ? opts.routeName : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let binding = opts && 'binding' in opts ? opts.binding : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let transition = opts && 'transition' in opts ? opts.transition : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      return extension_navigation['GetNavigation|offAll'](T, $this, page, {predicate: predicate, opaque: opaque, popGesture: popGesture, id: id, routeName: routeName, arguments: $arguments, binding: binding, fullscreenDialog: fullscreenDialog, transition: transition, curve: curve, duration: duration, gestureWidth: gestureWidth});
    }, T$.dynamic__ToFutureNOfTN$2());
  };
  extension_navigation['GetNavigation|_cleanRouteName'] = function GetNavigation$124_cleanRouteName($this, name) {
    let t85, t85$;
    name = name[S$.$replaceAll]("() => ", "");
    if (!name[S$.$startsWith]("/")) {
      name = "/" + name;
    }
    t85$ = (t85 = core.Uri.tryParse(name), t85 == null ? null : dart.toString(t85));
    return t85$ == null ? name : t85$;
  };
  extension_navigation['GetNavigation|get#_cleanRouteName'] = function GetNavigation$124get$35_cleanRouteName($this) {
    return dart.fn(name => extension_navigation['GetNavigation|_cleanRouteName']($this, name), T$.StringToString());
  };
  extension_navigation['GetNavigation|config'] = function GetNavigation$124config($this, opts) {
    let enableLog = opts && 'enableLog' in opts ? opts.enableLog : null;
    let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
    let defaultPopGesture = opts && 'defaultPopGesture' in opts ? opts.defaultPopGesture : null;
    let defaultOpaqueRoute = opts && 'defaultOpaqueRoute' in opts ? opts.defaultOpaqueRoute : null;
    let defaultDurationTransition = opts && 'defaultDurationTransition' in opts ? opts.defaultDurationTransition : null;
    let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
    let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
    if (enableLog != null) {
      get_main.Get.isLogEnable = enableLog;
    }
    if (logWriterCallback != null) {
      get_main.Get.log = logWriterCallback;
    }
    if (defaultPopGesture != null) {
      extension_navigation['GetNavigation|_getxController'].defaultPopGesture = defaultPopGesture;
    }
    if (defaultOpaqueRoute != null) {
      extension_navigation['GetNavigation|_getxController'].defaultOpaqueRoute = defaultOpaqueRoute;
    }
    if (defaultTransition != null) {
      extension_navigation['GetNavigation|_getxController'].defaultTransition = defaultTransition;
    }
    if (defaultDurationTransition != null) {
      extension_navigation['GetNavigation|_getxController'].defaultTransitionDuration = defaultDurationTransition;
    }
  };
  extension_navigation['GetNavigation|get#config'] = function GetNavigation$124get$35config($this) {
    return dart.fn(opts => {
      let enableLog = opts && 'enableLog' in opts ? opts.enableLog : null;
      let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
      let defaultPopGesture = opts && 'defaultPopGesture' in opts ? opts.defaultPopGesture : null;
      let defaultOpaqueRoute = opts && 'defaultOpaqueRoute' in opts ? opts.defaultOpaqueRoute : null;
      let defaultDurationTransition = opts && 'defaultDurationTransition' in opts ? opts.defaultDurationTransition : null;
      let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
      let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
      return extension_navigation['GetNavigation|config']($this, {enableLog: enableLog, logWriterCallback: logWriterCallback, defaultPopGesture: defaultPopGesture, defaultOpaqueRoute: defaultOpaqueRoute, defaultDurationTransition: defaultDurationTransition, defaultGlobalState: defaultGlobalState, defaultTransition: defaultTransition});
    }, T$.__Tovoid$4());
  };
  extension_navigation['GetNavigation|updateLocale'] = function GetNavigation$124updateLocale($this, l) {
    return async.async(dart.void, function* GetNavigation$124updateLocale() {
      internacionalization$['LocalesIntl|set#locale'](get_main.Get, l);
      yield extension_navigation['GetNavigation|forceAppUpdate']($this);
    });
  };
  extension_navigation['GetNavigation|get#updateLocale'] = function GetNavigation$124get$35updateLocale($this) {
    return dart.fn(l => extension_navigation['GetNavigation|updateLocale']($this, l), T$.LocaleToFutureOfvoid());
  };
  extension_navigation['GetNavigation|forceAppUpdate'] = function GetNavigation$124forceAppUpdate($this) {
    return async.async(dart.void, function* GetNavigation$124forceAppUpdate() {
      yield extension_navigation['GetNavigation|get#engine']($this).performReassemble();
    });
  };
  extension_navigation['GetNavigation|get#forceAppUpdate'] = function GetNavigation$124get$35forceAppUpdate($this) {
    return dart.fn(() => extension_navigation['GetNavigation|forceAppUpdate']($this), T$.VoidToFutureOfvoid());
  };
  extension_navigation['GetNavigation|appUpdate'] = function GetNavigation$124appUpdate($this) {
    return extension_navigation['GetNavigation|_getxController'].update();
  };
  extension_navigation['GetNavigation|get#appUpdate'] = function GetNavigation$124get$35appUpdate($this) {
    return dart.fn(() => extension_navigation['GetNavigation|appUpdate']($this), T$.VoidTovoid());
  };
  extension_navigation['GetNavigation|changeTheme'] = function GetNavigation$124changeTheme($this, theme) {
    extension_navigation['GetNavigation|_getxController'].setTheme(theme);
  };
  extension_navigation['GetNavigation|get#changeTheme'] = function GetNavigation$124get$35changeTheme($this) {
    return dart.fn(theme => extension_navigation['GetNavigation|changeTheme']($this, theme), T$.ThemeDataTovoid());
  };
  extension_navigation['GetNavigation|get#changeThemeMode'] = function GetNavigation$124get$35changeThemeMode($this) {
    return dart.fn(themeMode => extension_navigation['GetNavigation|changeThemeMode']($this, themeMode), T$.ThemeModeTovoid());
  };
  extension_navigation['GetNavigation|changeThemeMode'] = function GetNavigation$124changeThemeMode($this, themeMode) {
    extension_navigation['GetNavigation|_getxController'].setThemeMode(themeMode);
  };
  extension_navigation['GetNavigation|addKey'] = function GetNavigation$124addKey($this, newKey) {
    return extension_navigation['GetNavigation|_getxController'].addKey(newKey);
  };
  extension_navigation['GetNavigation|get#addKey'] = function GetNavigation$124get$35addKey($this) {
    return dart.fn(newKey => extension_navigation['GetNavigation|addKey']($this, newKey), T$.GlobalKeyOfNavigatorStateToGlobalKeyNOfNavigatorState());
  };
  extension_navigation['GetNavigation|nestedKey'] = function GetNavigation$124nestedKey($this, key) {
    extension_navigation['GetNavigation|get#keys']($this)[S$.$putIfAbsent](key, dart.fn(() => T$.GlobalKeyOfNavigatorState().new({debugLabel: "Getx nested key: " + dart.toString(key)}), T$.VoidToGlobalKeyOfNavigatorState()));
    return extension_navigation['GetNavigation|get#keys']($this)[S$.$_get](key);
  };
  extension_navigation['GetNavigation|get#nestedKey'] = function GetNavigation$124get$35nestedKey($this) {
    return dart.fn(key => extension_navigation['GetNavigation|nestedKey']($this, key), T$.dynamicToGlobalKeyNOfNavigatorState());
  };
  extension_navigation['GetNavigation|global'] = function GetNavigation$124global($this, k) {
    let newKey = null;
    if (k == null) {
      newKey = extension_navigation['GetNavigation|get#key']($this);
    } else {
      if (!extension_navigation['GetNavigation|get#keys']($this)[S$.$containsKey](k)) {
        dart.throw("Route id (" + dart.str(k) + ") not found");
      }
      newKey = dart.nullCheck(extension_navigation['GetNavigation|get#keys']($this)[S$.$_get](k));
    }
    if (newKey.currentContext == null && !extension_navigation['GetNavigation|get#testMode']($this)) {
      dart.throw("You are trying to use contextless navigation without\n      a GetMaterialApp or Get.key.\n      If you are testing your app, you can use:\n      [Get.testMode = true], or if you are running your app on\n      a physical device or emulator, you must exchange your [MaterialApp]\n      for a [GetMaterialApp].\n      ");
    }
    return newKey;
  };
  extension_navigation['GetNavigation|get#global'] = function GetNavigation$124get$35global($this) {
    return dart.fn(k => extension_navigation['GetNavigation|global']($this, k), T$.intNToGlobalKeyOfNavigatorState());
  };
  extension_navigation['GetNavigation|get#arguments'] = function GetNavigation$124get$35arguments($this) {
    return extension_navigation['GetNavigation|get#routing']($this).args;
  };
  extension_navigation['GetNavigation|get#currentRoute'] = function GetNavigation$124get$35currentRoute($this) {
    return extension_navigation['GetNavigation|get#routing']($this).current;
  };
  extension_navigation['GetNavigation|get#previousRoute'] = function GetNavigation$124get$35previousRoute($this) {
    return extension_navigation['GetNavigation|get#routing']($this).previous;
  };
  extension_navigation['GetNavigation|get#isSnackbarOpen'] = function GetNavigation$124get$35isSnackbarOpen($this) {
    return snackbar_controller.SnackbarController.isSnackbarBeingShown;
  };
  extension_navigation['GetNavigation|closeAllSnackbars'] = function GetNavigation$124closeAllSnackbars($this) {
    snackbar_controller.SnackbarController.cancelAllSnackbars();
  };
  extension_navigation['GetNavigation|get#closeAllSnackbars'] = function GetNavigation$124get$35closeAllSnackbars($this) {
    return dart.fn(() => extension_navigation['GetNavigation|closeAllSnackbars']($this), T$.VoidTovoid());
  };
  extension_navigation['GetNavigation|closeCurrentSnackbar'] = function GetNavigation$124closeCurrentSnackbar($this) {
    return async.async(dart.void, function* GetNavigation$124closeCurrentSnackbar() {
      yield snackbar_controller.SnackbarController.closeCurrentSnackbar();
    });
  };
  extension_navigation['GetNavigation|get#closeCurrentSnackbar'] = function GetNavigation$124get$35closeCurrentSnackbar($this) {
    return dart.fn(() => extension_navigation['GetNavigation|closeCurrentSnackbar']($this), T$.VoidToFutureOfvoid());
  };
  extension_navigation['GetNavigation|get#isDialogOpen'] = function GetNavigation$124get$35isDialogOpen($this) {
    return extension_navigation['GetNavigation|get#routing']($this).isDialog;
  };
  extension_navigation['GetNavigation|get#isBottomSheetOpen'] = function GetNavigation$124get$35isBottomSheetOpen($this) {
    return extension_navigation['GetNavigation|get#routing']($this).isBottomSheet;
  };
  extension_navigation['GetNavigation|get#rawRoute'] = function GetNavigation$124get$35rawRoute($this) {
    return extension_navigation['GetNavigation|get#routing']($this).route;
  };
  extension_navigation['GetNavigation|get#isPopGestureEnable'] = function GetNavigation$124get$35isPopGestureEnable($this) {
    return extension_navigation['GetNavigation|get#defaultPopGesture']($this);
  };
  extension_navigation['GetNavigation|get#isOpaqueRouteDefault'] = function GetNavigation$124get$35isOpaqueRouteDefault($this) {
    return extension_navigation['GetNavigation|get#defaultOpaqueRoute']($this);
  };
  extension_navigation['GetNavigation|get#context'] = function GetNavigation$124get$35context($this) {
    return extension_navigation['GetNavigation|get#key']($this).currentContext;
  };
  extension_navigation['GetNavigation|get#overlayContext'] = function GetNavigation$124get$35overlayContext($this) {
    let t120, t119;
    let overlay = null;
    t119 = extension_navigation['GetNavigation|get#key']($this).currentState;
    t119 == null ? null : (t120 = t119.overlay, t120 == null ? null : t120.context.visitChildElements(dart.fn(element => {
      overlay = element;
    }, T$.ElementTovoid())));
    return overlay;
  };
  extension_navigation['GetNavigation|get#theme'] = function GetNavigation$124get$35theme($this) {
    let theme = theme_data.ThemeData.fallback();
    if (extension_navigation['GetNavigation|get#context']($this) != null) {
      theme = theme$.Theme.of(dart.nullCheck(extension_navigation['GetNavigation|get#context']($this)));
    }
    return theme;
  };
  extension_navigation['GetNavigation|get#engine'] = function GetNavigation$124get$35engine($this) {
    return binding.WidgetsFlutterBinding.ensureInitialized();
  };
  extension_navigation['GetNavigation|get#window'] = function GetNavigation$124get$35window($this) {
    return ui.window;
  };
  extension_navigation['GetNavigation|get#deviceLocale'] = function GetNavigation$124get$35deviceLocale($this) {
    return ui.window.locale;
  };
  extension_navigation['GetNavigation|get#pixelRatio'] = function GetNavigation$124get$35pixelRatio($this) {
    return ui.window.devicePixelRatio;
  };
  extension_navigation['GetNavigation|get#size'] = function GetNavigation$124get$35size($this) {
    return ui.window.physicalSize['/'](extension_navigation['GetNavigation|get#pixelRatio']($this));
  };
  extension_navigation['GetNavigation|get#width'] = function GetNavigation$124get$35width($this) {
    return extension_navigation['GetNavigation|get#size']($this).width;
  };
  extension_navigation['GetNavigation|get#height'] = function GetNavigation$124get$35height($this) {
    return extension_navigation['GetNavigation|get#size']($this).height;
  };
  extension_navigation['GetNavigation|get#statusBarHeight'] = function GetNavigation$124get$35statusBarHeight($this) {
    return ui.window.padding.top;
  };
  extension_navigation['GetNavigation|get#bottomBarHeight'] = function GetNavigation$124get$35bottomBarHeight($this) {
    return ui.window.padding.bottom;
  };
  extension_navigation['GetNavigation|get#textScaleFactor'] = function GetNavigation$124get$35textScaleFactor($this) {
    return ui.window.textScaleFactor;
  };
  extension_navigation['GetNavigation|get#textTheme'] = function GetNavigation$124get$35textTheme($this) {
    return extension_navigation['GetNavigation|get#theme']($this).textTheme;
  };
  extension_navigation['GetNavigation|get#mediaQuery'] = function GetNavigation$124get$35mediaQuery($this) {
    return media_query.MediaQuery.of(dart.nullCheck(extension_navigation['GetNavigation|get#context']($this)));
  };
  extension_navigation['GetNavigation|get#isDarkMode'] = function GetNavigation$124get$35isDarkMode($this) {
    return extension_navigation['GetNavigation|get#theme']($this).brightness === ui.Brightness.dark;
  };
  extension_navigation['GetNavigation|get#isPlatformDarkMode'] = function GetNavigation$124get$35isPlatformDarkMode($this) {
    return ui.window.platformBrightness === ui.Brightness.dark;
  };
  extension_navigation['GetNavigation|get#iconColor'] = function GetNavigation$124get$35iconColor($this) {
    return extension_navigation['GetNavigation|get#theme']($this).iconTheme.color;
  };
  extension_navigation['GetNavigation|get#focusScope'] = function GetNavigation$124get$35focusScope($this) {
    return focus_manager.FocusManager.instance.primaryFocus;
  };
  extension_navigation['GetNavigation|get#key'] = function GetNavigation$124get$35key($this) {
    return extension_navigation['GetNavigation|_getxController'].key;
  };
  extension_navigation['GetNavigation|get#keys'] = function GetNavigation$124get$35keys($this) {
    return extension_navigation['GetNavigation|_getxController'].keys;
  };
  extension_navigation['GetNavigation|get#rootController'] = function GetNavigation$124get$35rootController($this) {
    return extension_navigation['GetNavigation|_getxController'];
  };
  extension_navigation['GetNavigation|get#defaultPopGesture'] = function GetNavigation$124get$35defaultPopGesture($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultPopGesture;
  };
  extension_navigation['GetNavigation|get#defaultOpaqueRoute'] = function GetNavigation$124get$35defaultOpaqueRoute($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultOpaqueRoute;
  };
  extension_navigation['GetNavigation|get#defaultTransition'] = function GetNavigation$124get$35defaultTransition($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultTransition;
  };
  extension_navigation['GetNavigation|get#defaultTransitionDuration'] = function GetNavigation$124get$35defaultTransitionDuration($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultTransitionDuration;
  };
  extension_navigation['GetNavigation|get#defaultTransitionCurve'] = function GetNavigation$124get$35defaultTransitionCurve($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultTransitionCurve;
  };
  extension_navigation['GetNavigation|get#defaultDialogTransitionCurve'] = function GetNavigation$124get$35defaultDialogTransitionCurve($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultDialogTransitionCurve;
  };
  extension_navigation['GetNavigation|get#defaultDialogTransitionDuration'] = function GetNavigation$124get$35defaultDialogTransitionDuration($this) {
    return extension_navigation['GetNavigation|_getxController'].defaultDialogTransitionDuration;
  };
  extension_navigation['GetNavigation|get#routing'] = function GetNavigation$124get$35routing($this) {
    return extension_navigation['GetNavigation|_getxController'].routing;
  };
  extension_navigation['GetNavigation|get#parameters'] = function GetNavigation$124get$35parameters($this) {
    return extension_navigation['GetNavigation|_getxController'].parameters;
  };
  extension_navigation['GetNavigation|set#parameters'] = function GetNavigation$124set$35parameters($this, newParameters) {
    return extension_navigation['GetNavigation|_getxController'].parameters = newParameters;
  };
  extension_navigation['GetNavigation|get#customTransition'] = function GetNavigation$124get$35customTransition($this) {
    return extension_navigation['GetNavigation|_getxController'].customTransition;
  };
  extension_navigation['GetNavigation|set#customTransition'] = function GetNavigation$124set$35customTransition($this, newTransition) {
    return extension_navigation['GetNavigation|_getxController'].customTransition = newTransition;
  };
  extension_navigation['GetNavigation|get#testMode'] = function GetNavigation$124get$35testMode($this) {
    return extension_navigation['GetNavigation|_getxController'].testMode;
  };
  extension_navigation['GetNavigation|set#testMode'] = function GetNavigation$124set$35testMode($this, isTest) {
    return extension_navigation['GetNavigation|_getxController'].testMode = isTest;
  };
  extension_navigation['GetNavigation|resetRootNavigator'] = function GetNavigation$124resetRootNavigator($this) {
    extension_navigation['GetNavigation|_getxController'] = new root_controller.GetMaterialController.new();
  };
  extension_navigation['GetNavigation|get#resetRootNavigator'] = function GetNavigation$124get$35resetRootNavigator($this) {
    return dart.fn(() => extension_navigation['GetNavigation|resetRootNavigator']($this), T$.VoidTovoid());
  };
  extension_navigation['NavTwoExt|get#addPages'] = function NavTwoExt$124get$35addPages($this) {
    return dart.fn(getPages => extension_navigation['NavTwoExt|addPages']($this, getPages), T$.ListOfGetPageTovoid());
  };
  extension_navigation['NavTwoExt|addPages'] = function NavTwoExt$124addPages($this, getPages) {
    extension_navigation['NavTwoExt|get#routeTree']($this).addRoutes(getPages);
  };
  extension_navigation['NavTwoExt|clearRouteTree'] = function NavTwoExt$124clearRouteTree($this) {
    extension_navigation['NavTwoExt|_routeTree'].routes[S$.$clear]();
  };
  extension_navigation['NavTwoExt|get#clearRouteTree'] = function NavTwoExt$124get$35clearRouteTree($this) {
    return dart.fn(() => extension_navigation['NavTwoExt|clearRouteTree']($this), T$.VoidTovoid());
  };
  extension_navigation['NavTwoExt|get#routeTree'] = function NavTwoExt$124get$35routeTree($this) {
    return extension_navigation['NavTwoExt|_routeTree'];
  };
  extension_navigation['NavTwoExt|addPage'] = function NavTwoExt$124addPage($this, getPage) {
    extension_navigation['NavTwoExt|get#routeTree']($this).addRoute(getPage);
  };
  extension_navigation['NavTwoExt|get#addPage'] = function NavTwoExt$124get$35addPage($this) {
    return dart.fn(getPage => extension_navigation['NavTwoExt|addPage']($this, getPage), T$.GetPageTovoid());
  };
  extension_navigation['NavTwoExt|delegate'] = function NavTwoExt$124delegate(TDelegate, TPage, $this) {
    return dart.nullable(TDelegate).as($this.routerDelegate);
  };
  extension_navigation['NavTwoExt|get#delegate'] = function NavTwoExt$124get$35delegate($this) {
    return dart.fn((TDelegate, TPage) => extension_navigation['NavTwoExt|delegate'](TDelegate, TPage, $this), T$.VoidToTDelegateN());
  };
  extension_navigation['NavTwoExt|createInformationParser'] = function NavTwoExt$124createInformationParser($this, opts) {
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : "/";
    if ($this.routeInformationParser == null) {
      return $this.routeInformationParser = new get_information_parser.GetInformationParser.new({initialRoute: initialRoute});
    } else {
      return get_information_parser.GetInformationParser.as($this.routeInformationParser);
    }
  };
  extension_navigation['NavTwoExt|get#createInformationParser'] = function NavTwoExt$124get$35createInformationParser($this) {
    return dart.fn(opts => {
      let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : "/";
      return extension_navigation['NavTwoExt|createInformationParser']($this, {initialRoute: initialRoute});
    }, T$.__ToGetInformationParser());
  };
  extension_navigation['NavTwoExt|get#rootDelegate'] = function NavTwoExt$124get$35rootDelegate($this) {
    return extension_navigation['NavTwoExt|createDelegate']($this);
  };
  extension_navigation['NavTwoExt|createDelegate'] = function NavTwoExt$124createDelegate($this, opts) {
    let notFoundRoute = opts && 'notFoundRoute' in opts ? opts.notFoundRoute : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
    let backButtonPopMode = opts && 'backButtonPopMode' in opts ? opts.backButtonPopMode : C[28] || CT.C28;
    let preventDuplicateHandlingMode = opts && 'preventDuplicateHandlingMode' in opts ? opts.preventDuplicateHandlingMode : C[29] || CT.C29;
    if ($this.routerDelegate == null) {
      return $this.routerDelegate = new get_router_delegate.GetDelegate.new({notFoundRoute: notFoundRoute, navigatorObservers: navigatorObservers, transitionDelegate: transitionDelegate, backButtonPopMode: backButtonPopMode, preventDuplicateHandlingMode: preventDuplicateHandlingMode});
    } else {
      return get_router_delegate.GetDelegate.as($this.routerDelegate);
    }
  };
  extension_navigation['NavTwoExt|get#createDelegate'] = function NavTwoExt$124get$35createDelegate($this) {
    return dart.fn(opts => {
      let notFoundRoute = opts && 'notFoundRoute' in opts ? opts.notFoundRoute : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
      let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
      let backButtonPopMode = opts && 'backButtonPopMode' in opts ? opts.backButtonPopMode : C[28] || CT.C28;
      let preventDuplicateHandlingMode = opts && 'preventDuplicateHandlingMode' in opts ? opts.preventDuplicateHandlingMode : C[29] || CT.C29;
      return extension_navigation['NavTwoExt|createDelegate']($this, {notFoundRoute: notFoundRoute, navigatorObservers: navigatorObservers, transitionDelegate: transitionDelegate, backButtonPopMode: backButtonPopMode, preventDuplicateHandlingMode: preventDuplicateHandlingMode});
    }, T$.__ToGetDelegate());
  };
  extension_navigation['OverlayExt|showOverlay'] = function OverlayExt$124showOverlay(T, $this, opts) {
    let asyncFunction = opts && 'asyncFunction' in opts ? opts.asyncFunction : null;
    let opacityColor = opts && 'opacityColor' in opts ? opts.opacityColor : C[30] || CT.C30;
    let loadingWidget = opts && 'loadingWidget' in opts ? opts.loadingWidget : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : 0.5;
    return async.async(T, function* OverlayExt$124showOverlay() {
      let navigatorState = navigator.Navigator.of(dart.nullCheck(extension_navigation['GetNavigation|get#overlayContext'](get_main.Get)), {rootNavigator: false});
      let overlayState = dart.nullCheck(navigatorState.overlay);
      let overlayEntryOpacity = new overlay.OverlayEntry.new({builder: dart.fn(context => new basic.Opacity.new({opacity: opacity, child: new container.Container.new({color: opacityColor})}), T$.BuildContextToOpacity())});
      let overlayEntryLoader = new overlay.OverlayEntry.new({builder: dart.fn(context => {
          let t170;
          t170 = loadingWidget;
          return t170 == null ? C[31] || CT.C31 : t170;
        }, T$.BuildContextToWidget())});
      overlayState.insert(overlayEntryOpacity);
      overlayState.insert(overlayEntryLoader);
      let data = null;
      try {
        data = (yield asyncFunction());
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Exception.is(_)) {
          overlayEntryLoader.remove();
          overlayEntryOpacity.remove();
          dart.rethrow(e);
        } else
          throw e;
      }
      overlayEntryLoader.remove();
      overlayEntryOpacity.remove();
      return data;
    });
  };
  extension_navigation['OverlayExt|get#showOverlay'] = function OverlayExt$124get$35showOverlay($this) {
    return dart.fn((T, opts) => {
      let asyncFunction = opts && 'asyncFunction' in opts ? opts.asyncFunction : null;
      let opacityColor = opts && 'opacityColor' in opts ? opts.opacityColor : C[30] || CT.C30;
      let loadingWidget = opts && 'loadingWidget' in opts ? opts.loadingWidget : null;
      let opacity = opts && 'opacity' in opts ? opts.opacity : 0.5;
      return extension_navigation['OverlayExt|showOverlay'](T, $this, {asyncFunction: asyncFunction, opacityColor: opacityColor, loadingWidget: loadingWidget, opacity: opacity});
    }, T$.__ToFutureOfT());
  };
  dart.copyProperties(extension_navigation, {
    get navigator() {
      return extension_navigation['GetNavigation|get#key'](get_main.Get).currentState;
    }
  });
  dart.defineLazy(extension_navigation, {
    /*extension_navigation['GetNavigation|_getxController']*/get ['GetNavigation|_getxController']() {
      return new root_controller.GetMaterialController.new();
    },
    set ['GetNavigation|_getxController'](value) {},
    /*extension_navigation['NavTwoExt|_routeTree']*/get ['NavTwoExt|_routeTree']() {
      return new parse_route.ParseRouteTree.new({routes: T$.JSArrayOfGetPage().of([])});
    }
  }, false);
  get_nav_config.GetNavConfig = class GetNavConfig extends router.RouteInformation {
    get currentTreeBranch() {
      return this[S$.currentTreeBranch];
    }
    set currentTreeBranch(value) {
      super.currentTreeBranch = value;
    }
    get currentPage() {
      return this.currentTreeBranch[S$.$last];
    }
    static ['_#new#tearOff'](opts) {
      let currentTreeBranch = opts && 'currentTreeBranch' in opts ? opts.currentTreeBranch : null;
      let location = opts && 'location' in opts ? opts.location : null;
      let state = opts && 'state' in opts ? opts.state : null;
      return new get_nav_config.GetNavConfig.new({currentTreeBranch: currentTreeBranch, location: location, state: state});
    }
    copyWith(opts) {
      let t172, t172$, t172$0;
      let currentTreeBranch = opts && 'currentTreeBranch' in opts ? opts.currentTreeBranch : null;
      let location = opts && 'location' in opts ? opts.location : null;
      let state = opts && 'state' in opts ? opts.state : null;
      return new get_nav_config.GetNavConfig.new({currentTreeBranch: (t172 = currentTreeBranch, t172 == null ? this.currentTreeBranch : t172), location: (t172$ = location, t172$ == null ? this.location : t172$), state: (t172$0 = state, t172$0 == null ? this.state : t172$0)});
    }
    static fromRoute(route) {
      let res = extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).matchRoute(route);
      if (res.treeBranch[S$.$isEmpty]) return null;
      return new get_nav_config.GetNavConfig.new({currentTreeBranch: res.treeBranch, location: route, state: null});
    }
    toString() {
      return "======GetNavConfig=====\ncurrentTreeBranch: " + dart.str(this.currentTreeBranch) + "\ncurrentPage: " + dart.str(this.currentPage) + "\n======GetNavConfig=====";
    }
  };
  (get_nav_config.GetNavConfig.new = function(opts) {
    let currentTreeBranch = opts && 'currentTreeBranch' in opts ? opts.currentTreeBranch : null;
    let location = opts && 'location' in opts ? opts.location : null;
    let state = opts && 'state' in opts ? opts.state : null;
    this[S$.currentTreeBranch] = currentTreeBranch;
    get_nav_config.GetNavConfig.__proto__.new.call(this, {location: location, state: state});
    ;
  }).prototype = get_nav_config.GetNavConfig.prototype;
  dart.addTypeTests(get_nav_config.GetNavConfig);
  dart.addTypeCaches(get_nav_config.GetNavConfig);
  dart.setMethodSignature(get_nav_config.GetNavConfig, () => ({
    __proto__: dart.getMethods(get_nav_config.GetNavConfig.__proto__),
    copyWith: dart.fnType(get_nav_config.GetNavConfig, [], {currentTreeBranch: dart.nullable(core.List$(get_route.GetPage))}, {location: dart.nullable(core.String), state: dart.nullable(core.Object)})
  }));
  dart.setStaticMethodSignature(get_nav_config.GetNavConfig, () => ['fromRoute']);
  dart.setGetterSignature(get_nav_config.GetNavConfig, () => ({
    __proto__: dart.getGetters(get_nav_config.GetNavConfig.__proto__),
    currentPage: dart.nullable(get_route.GetPage)
  }));
  dart.setLibraryUri(get_nav_config.GetNavConfig, I[19]);
  dart.setFieldSignature(get_nav_config.GetNavConfig, () => ({
    __proto__: dart.getFields(get_nav_config.GetNavConfig.__proto__),
    currentTreeBranch: dart.finalFieldType(core.List$(get_route.GetPage))
  }));
  dart.defineExtensionMethods(get_nav_config.GetNavConfig, ['toString']);
  get_information_parser.GetInformationParser = class GetInformationParser extends router.RouteInformationParser$(get_nav_config.GetNavConfig) {
    get initialRoute() {
      return this[S$.initialRoute];
    }
    set initialRoute(value) {
      super.initialRoute = value;
    }
    static ['_#new#tearOff'](opts) {
      let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : "/";
      return new get_information_parser.GetInformationParser.new({initialRoute: initialRoute});
    }
    parseRouteInformation(routeInformation) {
      let t173, t172, t172$;
      let location = routeInformation.location;
      if (location === "/") {
        if (!extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).routes[S$.$any](dart.fn(element => element.name === "/", T$.GetPageTobool()))) {
          location = this.initialRoute;
        }
      }
      t172 = get_main.Get;
      t173 = "GetInformationParser: route location: " + dart.str(location);
      t172.log(t173);
      let matchResult = extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).matchRoute((t172$ = location, t172$ == null ? this.initialRoute : t172$));
      return new (T$.SynchronousFutureOfGetNavConfig()).new(new get_nav_config.GetNavConfig.new({currentTreeBranch: matchResult.treeBranch, location: location, state: routeInformation.state}));
    }
    restoreRouteInformation(configuration) {
      get_nav_config.GetNavConfig.as(configuration);
      return new router.RouteInformation.new({location: configuration.location, state: configuration.state});
    }
  };
  (get_information_parser.GetInformationParser.new = function(opts) {
    let t173, t172;
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : "/";
    this[S$.initialRoute] = initialRoute;
    get_information_parser.GetInformationParser.__proto__.new.call(this);
    t172 = get_main.Get;
    t173 = "GetInformationParser is created !";
    t172.log(t173);
  }).prototype = get_information_parser.GetInformationParser.prototype;
  dart.addTypeTests(get_information_parser.GetInformationParser);
  dart.addTypeCaches(get_information_parser.GetInformationParser);
  dart.setMethodSignature(get_information_parser.GetInformationParser, () => ({
    __proto__: dart.getMethods(get_information_parser.GetInformationParser.__proto__),
    parseRouteInformation: dart.fnType(synchronous_future.SynchronousFuture$(get_nav_config.GetNavConfig), [router.RouteInformation]),
    restoreRouteInformation: dart.fnType(router.RouteInformation, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(get_information_parser.GetInformationParser, I[20]);
  dart.setFieldSignature(get_information_parser.GetInformationParser, () => ({
    __proto__: dart.getFields(get_information_parser.GetInformationParser.__proto__),
    initialRoute: dart.finalFieldType(core.String)
  }));
  list_notifier.ListenableMixin = class ListenableMixin extends core.Object {};
  list_notifier.ListenableMixin[dart.mixinOn] = Object => class ListenableMixin extends Object {};
  (list_notifier.ListenableMixin[dart.mixinNew] = function() {
  }).prototype = list_notifier.ListenableMixin.prototype;
  dart.addTypeTests(list_notifier.ListenableMixin);
  dart.addTypeCaches(list_notifier.ListenableMixin);
  list_notifier.ListenableMixin[dart.implements] = () => [change_notifier.Listenable, core.Object];
  dart.setLibraryUri(list_notifier.ListenableMixin, I[21]);
  list_notifier.ListNotifierMixin = class ListNotifierMixin extends list_notifier.ListenableMixin {};
  list_notifier.ListNotifierMixin[dart.mixinOn] = ListenableMixin => class ListNotifierMixin extends ListenableMixin {
    get [S$._updaters$1]() {
      return this[S$._updaters];
    }
    set [S$._updaters$1](value) {
      this[S$._updaters] = value;
    }
    get [S$._updatersGroupIds$1]() {
      return this[S$._updatersGroupIds];
    }
    set [S$._updatersGroupIds$1](value) {
      this[S$._updatersGroupIds] = value;
    }
    refresh() {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 29, 12, "_debugAssertNotDisposed()");
      this[S$._notifyUpdate]();
    }
    [S$._notifyUpdate]() {
      for (let element of dart.nullCheck(this[S$._updaters$1])) {
        dart.nullCheck(element)();
      }
    }
    [S$._notifyIdUpdate](id) {
      if (dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$containsKey](id)) {
        let listGroup = dart.nullCheck(dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$_get](id));
        for (let item of listGroup) {
          item();
        }
      }
    }
    refreshGroup(id) {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 60, 12, "_debugAssertNotDisposed()");
      this[S$._notifyIdUpdate](id);
    }
    [S$._debugAssertNotDisposed]() {
      if (!dart.fn(() => {
        if (this[S$._updaters$1] == null) {
          dart.throw(assertions.FlutterError.new("A " + dart.str(this[S$.$runtimeType]) + " was used after being disposed.\n\n'Once you have called dispose() on a " + dart.str(this[S$.$runtimeType]) + ", it can no longer be used."));
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[22], 75, 12, "() {\n      if (_updaters == null) {\n        throw FlutterError('''A $runtimeType was used after being disposed.\\n\n'Once you have called dispose() on a $runtimeType, it can no longer be used.''');\n      }\n      return true;\n    }()");
      return true;
    }
    notifyChildrens() {
      list_notifier.TaskManager.instance.notify(this[S$._updaters$1]);
    }
    get hasListeners() {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 91, 12, "_debugAssertNotDisposed()");
      return dart.nullCheck(this[S$._updaters$1])[S$.$isNotEmpty];
    }
    get listeners() {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 96, 12, "_debugAssertNotDisposed()");
      return dart.nullCheck(this[S$._updaters$1])[S$.$length];
    }
    removeListener(listener) {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 102, 12, "_debugAssertNotDisposed()");
      dart.nullCheck(this[S$._updaters$1])[S$.$remove](listener);
    }
    removeListenerId(id, listener) {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 107, 12, "_debugAssertNotDisposed()");
      if (dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$containsKey](id)) {
        dart.nullCheck(dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$_get](id))[S$.$remove](listener);
      }
      dart.nullCheck(this[S$._updaters$1])[S$.$remove](listener);
    }
    dispose() {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 116, 12, "_debugAssertNotDisposed()");
      this[S$._updaters$1] = null;
      this[S$._updatersGroupIds$1] = null;
    }
    addListener(listener) {
      if (!this[S$._debugAssertNotDisposed]()) dart.assertFailed(null, I[22], 123, 12, "_debugAssertNotDisposed()");
      dart.nullCheck(this[S$._updaters$1])[S$.$add](listener);
      return dart.fn(() => dart.nullCheck(this[S$._updaters$1])[S$.$remove](listener), T$.VoidTovoid());
    }
    addListenerId(key, listener) {
      let t174, t173;
      t173 = dart.nullCheck(this[S$._updatersGroupIds$1]);
      t174 = key;
      t173[S$.$_get](t174) == null ? t173[S$.$_set](t174, T$.JSArrayOfVoidTovoid().of([])) : null;
      dart.nullCheck(dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$_get](key))[S$.$add](listener);
      return dart.fn(() => dart.nullCheck(dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$_get](key))[S$.$remove](listener), T$.VoidTovoid());
    }
    disposeId(id) {
      dart.nullCheck(this[S$._updatersGroupIds$1])[S$.$remove](id);
    }
  };
  (list_notifier.ListNotifierMixin[dart.mixinNew] = function() {
    this[S$._updaters] = T$.JSArrayOfVoidToNvoid().of([]);
    this[S$._updatersGroupIds] = new (T$.LinkedMapOfObjectN$ListOfVoidTovoid()).new();
  }).prototype = list_notifier.ListNotifierMixin.prototype;
  dart.addTypeTests(list_notifier.ListNotifierMixin);
  dart.addTypeCaches(list_notifier.ListNotifierMixin);
  list_notifier.ListNotifierMixin[dart.implements] = () => [list_notifier.ListenableMixin];
  dart.setMethodSignature(list_notifier.ListNotifierMixin, () => ({
    __proto__: dart.getMethods(list_notifier.ListNotifierMixin.__proto__),
    refresh: dart.fnType(dart.void, []),
    [S$._notifyUpdate]: dart.fnType(dart.void, []),
    [S$._notifyIdUpdate]: dart.fnType(dart.void, [core.Object]),
    refreshGroup: dart.fnType(dart.void, [core.Object]),
    [S$._debugAssertNotDisposed]: dart.fnType(core.bool, []),
    notifyChildrens: dart.fnType(dart.void, []),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    removeListenerId: dart.fnType(dart.void, [core.Object, dart.fnType(dart.void, [])]),
    dispose: dart.fnType(dart.void, []),
    addListener: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
    addListenerId: dart.fnType(dart.fnType(dart.void, []), [dart.nullable(core.Object), dart.fnType(dart.void, [])]),
    disposeId: dart.fnType(dart.void, [core.Object])
  }));
  dart.setGetterSignature(list_notifier.ListNotifierMixin, () => ({
    __proto__: dart.getGetters(list_notifier.ListNotifierMixin.__proto__),
    hasListeners: core.bool,
    listeners: core.int
  }));
  dart.setLibraryUri(list_notifier.ListNotifierMixin, I[21]);
  dart.setFieldSignature(list_notifier.ListNotifierMixin, () => ({
    __proto__: dart.getFields(list_notifier.ListNotifierMixin.__proto__),
    [S$._updaters$1]: dart.fieldType(dart.nullable(core.List$(dart.nullable(dart.fnType(dart.void, []))))),
    [S$._updatersGroupIds$1]: dart.fieldType(dart.nullable(collection.HashMap$(dart.nullable(core.Object), core.List$(dart.fnType(dart.void, [])))))
  }));
  const RouterDelegate_ListenableMixin$36 = class RouterDelegate_ListenableMixin extends router.RouterDelegate$(get_nav_config.GetNavConfig) {};
  (RouterDelegate_ListenableMixin$36.new = function() {
    RouterDelegate_ListenableMixin$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_ListenableMixin$36.prototype;
  dart.applyMixin(RouterDelegate_ListenableMixin$36, list_notifier.ListenableMixin);
  const RouterDelegate_ListNotifierMixin$36 = class RouterDelegate_ListNotifierMixin extends RouterDelegate_ListenableMixin$36 {};
  (RouterDelegate_ListNotifierMixin$36.new = function() {
    list_notifier.ListNotifierMixin[dart.mixinNew].call(this);
    RouterDelegate_ListNotifierMixin$36.__proto__.new.call(this);
  }).prototype = RouterDelegate_ListNotifierMixin$36.prototype;
  dart.applyMixin(RouterDelegate_ListNotifierMixin$36, list_notifier.ListNotifierMixin);
  get_router_delegate.GetDelegate = class GetDelegate extends RouterDelegate_ListNotifierMixin$36 {
    get history() {
      return this[S$.history];
    }
    set history(value) {
      super.history = value;
    }
    get backButtonPopMode() {
      return this[S$.backButtonPopMode];
    }
    set backButtonPopMode(value) {
      super.backButtonPopMode = value;
    }
    get preventDuplicateHandlingMode() {
      return this[S$.preventDuplicateHandlingMode];
    }
    set preventDuplicateHandlingMode(value) {
      super.preventDuplicateHandlingMode = value;
    }
    get notFoundRoute() {
      return this[S$.notFoundRoute];
    }
    set notFoundRoute(value) {
      super.notFoundRoute = value;
    }
    get navigatorObservers() {
      return this[S$.navigatorObservers];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get transitionDelegate() {
      return this[S$.transitionDelegate];
    }
    set transitionDelegate(value) {
      super.transitionDelegate = value;
    }
    static ['_#new#tearOff'](opts) {
      let notFoundRoute = opts && 'notFoundRoute' in opts ? opts.notFoundRoute : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
      let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
      let backButtonPopMode = opts && 'backButtonPopMode' in opts ? opts.backButtonPopMode : C[28] || CT.C28;
      let preventDuplicateHandlingMode = opts && 'preventDuplicateHandlingMode' in opts ? opts.preventDuplicateHandlingMode : C[29] || CT.C29;
      return new get_router_delegate.GetDelegate.new({notFoundRoute: notFoundRoute, navigatorObservers: navigatorObservers, transitionDelegate: transitionDelegate, backButtonPopMode: backButtonPopMode, preventDuplicateHandlingMode: preventDuplicateHandlingMode});
    }
    get currentConfiguration() {
      if (this.history[S$.$isEmpty]) return null;
      let route = this.history[S$.$last];
      return route;
    }
    get navigatorKey() {
      return extension_navigation['GetNavigation|get#key'](get_main.Get);
    }
    get parameters() {
      let t173, t172, t172$;
      t172$ = (t172 = this.currentConfiguration, t172 == null ? null : (t173 = t172.currentPage, t173 == null ? null : t173.parameters));
      return t172$ == null ? new (T$.IdentityMapOfString$String()).new() : t172$;
    }
    arguments(T) {
      let t173, t172;
      return T.as((t172 = this.currentConfiguration, t172 == null ? null : (t173 = t172.currentPage, t173 == null ? null : t173.arguments)));
    }
    backUntil(fullRoute, opts) {
      let popMode = opts && 'popMode' in opts ? opts.popMode : C[39] || CT.C39;
      return async.async(dart.void, (function* backUntil() {
        let iterator = this.currentConfiguration;
        while (this[S$._canPop](popMode) && iterator != null && iterator.location !== fullRoute) {
          yield this[S$._pop](popMode);
          iterator = this.currentConfiguration;
        }
        this.refresh();
      }).bind(this));
    }
    build(context) {
      let t173;
      let pages = this.getVisualPages();
      if (pages[S$.$isEmpty]) return C[40] || CT.C40;
      let extraObservers = this.navigatorObservers;
      return new get_router_delegate.GetNavigator.new({key: this.navigatorKey, onPopPage: dart.bind(this, S$._onPopVisualRoute), pages: pages, observers: (() => {
          let t172 = T$.JSArrayOfNavigatorObserver().of([new route_observer.GetObserver.new()]);
          if (extraObservers != null) t172[S$.$addAll](extraObservers);
          return t172;
        })(), transitionDelegate: (t173 = this.transitionDelegate, t173 == null ? C[41] || CT.C41 : t173)});
    }
    canPopHistory() {
      return new (T$.SynchronousFutureOfbool()).new(this[S$._canPopHistory]());
    }
    canPopPage() {
      return new (T$.SynchronousFutureOfbool()).new(this[S$._canPopPage]());
    }
    getVisualPages() {
      let currentHistory = this.currentConfiguration;
      if (currentHistory == null) return T$.JSArrayOfGetPage().of([]);
      let res = currentHistory.currentTreeBranch[S$.$where](dart.fn(r => r.participatesInRootNavigator != null, T$.GetPageTobool()));
      if (res[S$.$isEmpty]) {
        return this.history[S$.$map](get_route.GetPage, dart.fn(e => dart.nullCheck(e.currentPage), T$.GetNavConfigToGetPage()))[S$.$toList]();
      } else {
        return res[S$.$where](dart.fn(element => element.participatesInRootNavigator === true, T$.GetPageTobool()))[S$.$toList]();
      }
    }
    handlePopupRoutes(opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      return async.async(core.bool, (function* handlePopupRoutes() {
        let currentRoute = null;
        dart.nullCheck(this.navigatorKey.currentState).popUntil(dart.fn(route => {
          currentRoute = route;
          return true;
        }, T$.RouteTobool()));
        if (routes.PopupRoute.is(currentRoute)) {
          return yield dart.nullCheck(this.navigatorKey.currentState).maybePop(core.Object, result);
        }
        return false;
      }).bind(this));
    }
    offAndToNamed(T, page, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let result = opts && 'result' in opts ? opts.result : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let popMode = opts && 'popMode' in opts ? opts.popMode : C[28] || CT.C28;
      return async.async(dart.nullable(T), (function* offAndToNamed() {
        if (parameters != null) {
          let uri = core._Uri.new({path: page, queryParameters: parameters});
          page = uri.toString();
        }
        yield this.popRoute({result: result});
        return this.toNamed(dart.nullable(T), page, {arguments: $arguments, parameters: parameters});
      }).bind(this));
    }
    offNamed(T, page, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return async.async(T, (function* offNamed() {
        this.history[S$.$removeLast]();
        return this.toNamed(T, page, {arguments: $arguments, parameters: parameters});
      }).bind(this));
    }
    popHistory() {
      return async.async(T$.GetNavConfigN(), (function* popHistory() {
        return yield this[S$._popHistory]();
      }).bind(this));
    }
    popRoute(opts) {
      let result = opts && 'result' in opts ? opts.result : null;
      let popMode = opts && 'popMode' in opts ? opts.popMode : C[39] || CT.C39;
      return async.async(core.bool, (function* popRoute() {
        let wasPopup = (yield this.handlePopupRoutes({result: result}));
        if (wasPopup) return true;
        let popped = (yield this[S$._pop](popMode));
        this.refresh();
        if (popped != null) {
          return true;
        }
        return false;
      }).bind(this));
    }
    pushHistory(config, opts) {
      let rebuildStack = opts && 'rebuildStack' in opts ? opts.rebuildStack : true;
      return async.async(dart.void, (function* pushHistory() {
        yield this[S$._pushHistory](config);
        if (rebuildStack) {
          this.refresh();
        }
      }).bind(this));
    }
    runMiddleware(config) {
      return async.async(T$.GetNavConfigN(), function* runMiddleware() {
        let middlewares = config.currentTreeBranch[S$.$last].middlewares;
        if (middlewares == null) {
          return config;
        }
        let iterator = config;
        for (let item of middlewares) {
          let redirectRes = (yield item.redirectDelegate(iterator));
          if (redirectRes == null) return null;
          iterator = redirectRes;
        }
        return iterator;
      });
    }
    setNewRoutePath(configuration) {
      get_nav_config.GetNavConfig.as(configuration);
      return async.async(dart.void, (function* setNewRoutePath() {
        yield this.pushHistory(configuration);
      }).bind(this));
    }
    toNamed(T, page, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      return async.async(T, (function* toNamed() {
        if (parameters != null) {
          let uri = core._Uri.new({path: page, queryParameters: parameters});
          page = uri.toString();
        }
        let decoder = extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).matchRoute(page, {arguments: $arguments});
        decoder.replaceArguments($arguments);
        let completer = async.Completer$(T).new();
        if (decoder.route != null) {
          this[S$._allCompleters][S$.$_set](dart.nullCheck(decoder.route), completer);
          yield this.pushHistory(new get_nav_config.GetNavConfig.new({currentTreeBranch: decoder.treeBranch, location: page, state: null}));
          return completer.future;
        } else {
          return async.Future$(T).value();
        }
      }).bind(this));
    }
    [S$._canPop](mode) {
      switch (mode) {
        case C[28] || CT.C28:
          {
            return this[S$._canPopHistory]();
          }
        case C[39] || CT.C39:
        default:
          {
            return this[S$._canPopPage]();
          }
      }
    }
    [S$._canPopHistory]() {
      return this.history[S$.$length] > 1;
    }
    [S$._canPopPage]() {
      let t173;
      let currentTreeBranch = (t173 = this.currentConfiguration, t173 == null ? null : t173.currentTreeBranch);
      if (currentTreeBranch == null) return false;
      return currentTreeBranch[S$.$length] > 1 ? true : this[S$._canPopHistory]();
    }
    [S$._doPopHistory]() {
      return async.async(T$.GetNavConfigN(), (function* _doPopHistory() {
        return yield this[S$._unsafeHistoryRemoveAt](this.history[S$.$length] - 1);
      }).bind(this));
    }
    [S$._doPopPage]() {
      return async.async(T$.GetNavConfigN(), (function* _doPopPage() {
        let t173;
        let currentBranch = (t173 = this.currentConfiguration, t173 == null ? null : t173.currentTreeBranch);
        if (currentBranch != null && currentBranch[S$.$length] > 1) {
          let remaining = currentBranch[S$.$take](currentBranch[S$.$length] - 1);
          let prevHistoryEntry = this.history[S$.$length] > 1 ? this.history[S$.$_get](this.history[S$.$length] - 2) : null;
          if (prevHistoryEntry != null) {
            let newLocation = remaining[S$.$last].name;
            let prevLocation = prevHistoryEntry.location;
            if (newLocation === prevLocation) {
              return yield this[S$._popHistory]();
            }
          }
          let res = (yield this[S$._popHistory]());
          yield this[S$._pushHistory](new get_nav_config.GetNavConfig.new({currentTreeBranch: remaining[S$.$toList](), location: remaining[S$.$last].name, state: null}));
          return res;
        } else {
          return yield this[S$._popHistory]();
        }
      }).bind(this));
    }
    [S$._onPopVisualRoute](route, result) {
      let t173;
      let didPop = route.didPop(result);
      if (!didPop) {
        return false;
      }
      let settings = route.settings;
      if (get_route.GetPage.is(settings)) {
        let config = this.history[S$.$cast](T$.GetNavConfigN())[S$.$firstWhere](dart.fn(element => {
          let t173;
          return dart.equals((t173 = element, t173 == null ? null : t173.currentPage), settings);
        }, T$.GetNavConfigNTobool()), {orElse: dart.fn(() => null, T$.VoidToNull())});
        if (config != null) {
          this[S$._removeHistoryEntry](config);
        }
        if (this[S$._allCompleters][S$.$containsKey](settings)) {
          t173 = this[S$._allCompleters][S$.$_get](settings);
          t173 == null ? null : t173.complete(route.popped);
        }
      }
      this.refresh();
      return true;
    }
    [S$._pop](mode) {
      return async.async(T$.GetNavConfigN(), (function* _pop() {
        switch (mode) {
          case C[28] || CT.C28:
            {
              return yield this[S$._popHistory]();
            }
          case C[39] || CT.C39:
            {
              return yield this[S$._popPage]();
            }
          default:
            {
              return null;
            }
        }
      }).bind(this));
    }
    [S$._popHistory]() {
      return async.async(T$.GetNavConfigN(), (function* _popHistory() {
        if (!this[S$._canPopHistory]()) return null;
        return yield this[S$._doPopHistory]();
      }).bind(this));
    }
    [S$._popPage]() {
      return async.async(T$.GetNavConfigN(), (function* _popPage() {
        if (!this[S$._canPopPage]()) return null;
        return yield this[S$._doPopPage]();
      }).bind(this));
    }
    [S$._pushHistory](config) {
      return async.async(dart.void, (function* _pushHistory() {
        if (dart.nullCheck(config.currentPage).preventDuplicates) {
          let originalEntryIndex = this.history[S$.$indexWhere](dart.fn(element => element.location == config.location, T$.GetNavConfigTobool()));
          if (originalEntryIndex >= 0) {
            switch (this.preventDuplicateHandlingMode) {
              case C[42] || CT.C42:
                {
                  yield this.backUntil(dart.nullCheck(config.location), {popMode: get_router_delegate.PopMode.Page});
                  break;
                }
              case C[29] || CT.C29:
                {
                  yield this[S$._unsafeHistoryRemoveAt](originalEntryIndex);
                  yield this[S$._unsafeHistoryAdd](config);
                  break;
                }
              case C[43] || CT.C43:
              default:
                {
                  break;
                }
            }
            return;
          }
        }
        yield this[S$._unsafeHistoryAdd](config);
      }).bind(this));
    }
    [S$._removeHistoryEntry](entry) {
      return async.async(dart.void, (function* _removeHistoryEntry() {
        yield this[S$._unsafeHistoryRemove](entry);
      }).bind(this));
    }
    [S$._unsafeHistoryAdd](config) {
      return async.async(dart.void, (function* _unsafeHistoryAdd() {
        let res = (yield this.runMiddleware(config));
        if (res == null) return;
        this.history[S$.$add](res);
      }).bind(this));
    }
    [S$._unsafeHistoryRemove](config) {
      return async.async(dart.void, (function* _unsafeHistoryRemove() {
        let index = this.history[S$.$indexOf](config);
        if (index >= 0) yield this[S$._unsafeHistoryRemoveAt](index);
      }).bind(this));
    }
    [S$._unsafeHistoryRemoveAt](index) {
      return async.async(T$.GetNavConfigN(), (function* _unsafeHistoryRemoveAt() {
        if (index === this.history[S$.$length] - 1 && this.history[S$.$length] > 1) {
          let toCheck = this.history[S$.$_get](this.history[S$.$length] - 2);
          let resMiddleware = (yield this.runMiddleware(toCheck));
          if (resMiddleware == null) return null;
          this.history[S$.$_set](this.history[S$.$length] - 2, resMiddleware);
        }
        return this.history[S$.$removeAt](index);
      }).bind(this));
    }
  };
  (get_router_delegate.GetDelegate.new = function(opts) {
    let t172, t173, t172$;
    let notFoundRoute = opts && 'notFoundRoute' in opts ? opts.notFoundRoute : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
    let backButtonPopMode = opts && 'backButtonPopMode' in opts ? opts.backButtonPopMode : C[28] || CT.C28;
    let preventDuplicateHandlingMode = opts && 'preventDuplicateHandlingMode' in opts ? opts.preventDuplicateHandlingMode : C[29] || CT.C29;
    this[S$.history] = T$.JSArrayOfGetNavConfig().of([]);
    this[S$._allCompleters] = new (T$.LinkedMapOfGetPage$Completer()).new();
    this[S$.navigatorObservers] = navigatorObservers;
    this[S$.transitionDelegate] = transitionDelegate;
    this[S$.backButtonPopMode] = backButtonPopMode;
    this[S$.preventDuplicateHandlingMode] = preventDuplicateHandlingMode;
    this[S$.notFoundRoute] = (t172 = notFoundRoute, t172 == null ? new get_route.GetPage.new({name: "/404", page: dart.fn(() => C[35] || CT.C35, T$.VoidToScaffold())}) : t172);
    get_router_delegate.GetDelegate.__proto__.new.call(this);
    t172$ = get_main.Get;
    t173 = "GetDelegate is created !";
    t172$.log(t173);
  }).prototype = get_router_delegate.GetDelegate.prototype;
  dart.addTypeTests(get_router_delegate.GetDelegate);
  dart.addTypeCaches(get_router_delegate.GetDelegate);
  dart.setMethodSignature(get_router_delegate.GetDelegate, () => ({
    __proto__: dart.getMethods(get_router_delegate.GetDelegate.__proto__),
    arguments: dart.gFnType(T => [T, []], T => [dart.nullable(core.Object)]),
    backUntil: dart.fnType(async.Future$(dart.void), [core.String], {popMode: get_router_delegate.PopMode}, {}),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    canPopHistory: dart.fnType(async.Future$(core.bool), []),
    canPopPage: dart.fnType(async.Future$(core.bool), []),
    getVisualPages: dart.fnType(core.List$(get_route.GetPage), []),
    handlePopupRoutes: dart.fnType(async.Future$(core.bool), [], {result: dart.nullable(core.Object)}, {}),
    offAndToNamed: dart.gFnType(T => [dart.nullable(async.Future$(dart.nullable(T))), [core.String], {arguments: dart.dynamic, id: dart.nullable(core.int), parameters: dart.nullable(core.Map$(core.String, core.String)), popMode: get_router_delegate.PopMode, result: dart.dynamic}, {}], T => [dart.nullable(core.Object)]),
    offNamed: dart.gFnType(T => [async.Future$(T), [core.String], {arguments: dart.dynamic, parameters: dart.nullable(core.Map$(core.String, core.String))}, {}], T => [dart.nullable(core.Object)]),
    popHistory: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), []),
    popRoute: dart.fnType(async.Future$(core.bool), [], {popMode: get_router_delegate.PopMode, result: dart.nullable(core.Object)}, {}),
    pushHistory: dart.fnType(async.Future$(dart.void), [get_nav_config.GetNavConfig], {rebuildStack: core.bool}, {}),
    runMiddleware: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), [get_nav_config.GetNavConfig]),
    setNewRoutePath: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
    toNamed: dart.gFnType(T => [async.Future$(T), [core.String], {arguments: dart.dynamic, parameters: dart.nullable(core.Map$(core.String, core.String))}, {}], T => [dart.nullable(core.Object)]),
    [S$._canPop]: dart.fnType(core.bool, [get_router_delegate.PopMode]),
    [S$._canPopHistory]: dart.fnType(core.bool, []),
    [S$._canPopPage]: dart.fnType(core.bool, []),
    [S$._doPopHistory]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), []),
    [S$._doPopPage]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), []),
    [S$._onPopVisualRoute]: dart.fnType(core.bool, [navigator.Route, dart.dynamic]),
    [S$._pop]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), [get_router_delegate.PopMode]),
    [S$._popHistory]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), []),
    [S$._popPage]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), []),
    [S$._pushHistory]: dart.fnType(async.Future$(dart.void), [get_nav_config.GetNavConfig]),
    [S$._removeHistoryEntry]: dart.fnType(async.Future$(dart.void), [get_nav_config.GetNavConfig]),
    [S$._unsafeHistoryAdd]: dart.fnType(async.Future$(dart.void), [get_nav_config.GetNavConfig]),
    [S$._unsafeHistoryRemove]: dart.fnType(async.Future$(dart.void), [get_nav_config.GetNavConfig]),
    [S$._unsafeHistoryRemoveAt]: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), [core.int])
  }));
  dart.setGetterSignature(get_router_delegate.GetDelegate, () => ({
    __proto__: dart.getGetters(get_router_delegate.GetDelegate.__proto__),
    navigatorKey: framework.GlobalKey$(navigator.NavigatorState),
    parameters: core.Map$(core.String, core.String)
  }));
  dart.setLibraryUri(get_router_delegate.GetDelegate, I[23]);
  dart.setFieldSignature(get_router_delegate.GetDelegate, () => ({
    __proto__: dart.getFields(get_router_delegate.GetDelegate.__proto__),
    history: dart.finalFieldType(core.List$(get_nav_config.GetNavConfig)),
    backButtonPopMode: dart.finalFieldType(get_router_delegate.PopMode),
    preventDuplicateHandlingMode: dart.finalFieldType(get_router_delegate.PreventDuplicateHandlingMode),
    notFoundRoute: dart.finalFieldType(get_route.GetPage),
    navigatorObservers: dart.finalFieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    transitionDelegate: dart.finalFieldType(dart.nullable(navigator.TransitionDelegate)),
    [S$._allCompleters]: dart.finalFieldType(core.Map$(get_route.GetPage, async.Completer))
  }));
  get_router_delegate.GetNavigator = class GetNavigator extends navigator.Navigator {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let onPopPage = opts && 'onPopPage' in opts ? opts.onPopPage : null;
      let pages = opts && 'pages' in opts ? opts.pages : null;
      let observers = opts && 'observers' in opts ? opts.observers : null;
      let reportsRouteUpdateToEngine = opts && 'reportsRouteUpdateToEngine' in opts ? opts.reportsRouteUpdateToEngine : false;
      let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
      return new get_router_delegate.GetNavigator.new({key: key, onPopPage: onPopPage, pages: pages, observers: observers, reportsRouteUpdateToEngine: reportsRouteUpdateToEngine, transitionDelegate: transitionDelegate});
    }
  };
  (get_router_delegate.GetNavigator.new = function(opts) {
    let t173, t174;
    let key = opts && 'key' in opts ? opts.key : null;
    let onPopPage = opts && 'onPopPage' in opts ? opts.onPopPage : null;
    let pages = opts && 'pages' in opts ? opts.pages : null;
    let observers = opts && 'observers' in opts ? opts.observers : null;
    let reportsRouteUpdateToEngine = opts && 'reportsRouteUpdateToEngine' in opts ? opts.reportsRouteUpdateToEngine : false;
    let transitionDelegate = opts && 'transitionDelegate' in opts ? opts.transitionDelegate : null;
    get_router_delegate.GetNavigator.__proto__.new.call(this, {key: key, onPopPage: (t173 = onPopPage, t173 == null ? dart.fn((route, result) => {
        let didPop = route.didPop(result);
        if (!didPop) {
          return false;
        }
        return true;
      }, T$.RouteAnddynamicTobool()) : t173), reportsRouteUpdateToEngine: reportsRouteUpdateToEngine, pages: pages, observers: (() => {
        let t173 = T$.JSArrayOfNavigatorObserver().of([]);
        if (observers != null) t173[S$.$addAll](observers);
        return t173;
      })(), transitionDelegate: (t174 = transitionDelegate, t174 == null ? C[41] || CT.C41 : t174)});
    ;
  }).prototype = get_router_delegate.GetNavigator.prototype;
  dart.addTypeTests(get_router_delegate.GetNavigator);
  dart.addTypeCaches(get_router_delegate.GetNavigator);
  dart.setLibraryUri(get_router_delegate.GetNavigator, I[23]);
  get_router_delegate.PopMode = class PopMode extends core._Enum {
    [S$._enumToString]() {
      return "PopMode." + this[S$._name];
    }
  };
  (get_router_delegate.PopMode.new = function(index, name) {
    get_router_delegate.PopMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = get_router_delegate.PopMode.prototype;
  dart.addTypeTests(get_router_delegate.PopMode);
  dart.addTypeCaches(get_router_delegate.PopMode);
  dart.setMethodSignature(get_router_delegate.PopMode, () => ({
    __proto__: dart.getMethods(get_router_delegate.PopMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(get_router_delegate.PopMode, I[23]);
  dart.setStaticFieldSignature(get_router_delegate.PopMode, () => ['values', 'History', 'Page']);
  dart.defineLazy(get_router_delegate.PopMode, {
    /*get_router_delegate.PopMode.values*/get values() {
      return C[44] || CT.C44;
    },
    /*get_router_delegate.PopMode.History*/get History() {
      return C[28] || CT.C28;
    },
    /*get_router_delegate.PopMode.Page*/get Page() {
      return C[39] || CT.C39;
    }
  }, false);
  get_router_delegate.PreventDuplicateHandlingMode = class PreventDuplicateHandlingMode extends core._Enum {
    [S$._enumToString]() {
      return "PreventDuplicateHandlingMode." + this[S$._name];
    }
  };
  (get_router_delegate.PreventDuplicateHandlingMode.new = function(index, name) {
    get_router_delegate.PreventDuplicateHandlingMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = get_router_delegate.PreventDuplicateHandlingMode.prototype;
  dart.addTypeTests(get_router_delegate.PreventDuplicateHandlingMode);
  dart.addTypeCaches(get_router_delegate.PreventDuplicateHandlingMode);
  dart.setMethodSignature(get_router_delegate.PreventDuplicateHandlingMode, () => ({
    __proto__: dart.getMethods(get_router_delegate.PreventDuplicateHandlingMode.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(get_router_delegate.PreventDuplicateHandlingMode, I[23]);
  dart.setStaticFieldSignature(get_router_delegate.PreventDuplicateHandlingMode, () => ['values', 'PopUntilOriginalRoute', 'DoNothing', 'ReorderRoutes']);
  dart.defineLazy(get_router_delegate.PreventDuplicateHandlingMode, {
    /*get_router_delegate.PreventDuplicateHandlingMode.values*/get values() {
      return C[45] || CT.C45;
    },
    /*get_router_delegate.PreventDuplicateHandlingMode.PopUntilOriginalRoute*/get PopUntilOriginalRoute() {
      return C[42] || CT.C42;
    },
    /*get_router_delegate.PreventDuplicateHandlingMode.DoNothing*/get DoNothing() {
      return C[43] || CT.C43;
    },
    /*get_router_delegate.PreventDuplicateHandlingMode.ReorderRoutes*/get ReorderRoutes() {
      return C[29] || CT.C29;
    }
  }, false);
  const _is_RouterOutlet_default = Symbol('_is_RouterOutlet_default');
  router_outlet.RouterOutlet$ = dart.generic((TDelegate, T) => {
    var __t$BuildContextAndTDelegateAndTNToWidget = () => (__t$BuildContextAndTDelegateAndTNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, TDelegate, __t$TN()])))();
    var __t$RouterOutletStateOfTDelegate$T = () => (__t$RouterOutletStateOfTDelegate$T = dart.constFn(router_outlet.RouterOutletState$(TDelegate, T)))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class RouterOutlet extends framework.StatefulWidget {
      get routerDelegate() {
        return this[S$.routerDelegate$1];
      }
      set routerDelegate(value) {
        super.routerDelegate = value;
      }
      get builder() {
        return this[S$.builder$2];
      }
      set builder(value) {
        super.builder = value;
      }
      static ['_#builder#tearOff'](TDelegate, T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let delegate = opts && 'delegate' in opts ? opts.delegate : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        return new (router_outlet.RouterOutlet$(TDelegate, T)).builder({key: key, delegate: delegate, builder: builder});
      }
      static ['_#new#tearOff'](TDelegate, T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let delegate = opts && 'delegate' in opts ? opts.delegate : null;
        let pickPages = opts && 'pickPages' in opts ? opts.pickPages : null;
        let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
        return new (router_outlet.RouterOutlet$(TDelegate, T)).new({key: key, delegate: delegate, pickPages: pickPages, pageBuilder: pageBuilder});
      }
      createState() {
        return new (__t$RouterOutletStateOfTDelegate$T()).new();
      }
    }
    (RouterOutlet.builder = function(opts) {
      let t178;
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      this[S$.builder$2] = builder;
      this[S$.routerDelegate$1] = (t178 = delegate, t178 == null ? dart.nullCheck(extension_navigation['NavTwoExt|delegate'](TDelegate, T, get_main.Get)) : t178);
      RouterOutlet.__proto__.new.call(this, {key: key});
      ;
    }).prototype = RouterOutlet.prototype;
    (RouterOutlet.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      let pickPages = opts && 'pickPages' in opts ? opts.pickPages : null;
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      RouterOutlet.builder.call(this, {builder: dart.fn((context, rDelegate, currentConfig) => {
          let t178, t178$;
          let picked = currentConfig == null ? null : pickPages(currentConfig);
          if (dart.test((t178$ = (t178 = picked, t178 == null ? null : t178[S$.$isEmpty]), t178$ == null ? false : t178$))) {
            picked = null;
          }
          return pageBuilder(context, rDelegate, picked);
        }, __t$BuildContextAndTDelegateAndTNToWidget()), delegate: delegate});
    }).prototype = RouterOutlet.prototype;
    dart.addTypeTests(RouterOutlet);
    RouterOutlet.prototype[_is_RouterOutlet_default] = true;
    dart.addTypeCaches(RouterOutlet);
    dart.setMethodSignature(RouterOutlet, () => ({
      __proto__: dart.getMethods(RouterOutlet.__proto__),
      createState: dart.fnType(router_outlet.RouterOutletState$(TDelegate, T), [])
    }));
    dart.setLibraryUri(RouterOutlet, I[24]);
    dart.setFieldSignature(RouterOutlet, () => ({
      __proto__: dart.getFields(RouterOutlet.__proto__),
      routerDelegate: dart.finalFieldType(TDelegate),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, TDelegate, dart.nullable(T)]))
    }));
    return RouterOutlet;
  });
  router_outlet.RouterOutlet = router_outlet.RouterOutlet$();
  dart.addTypeTests(router_outlet.RouterOutlet, _is_RouterOutlet_default);
  const _is_RouterOutletState_default = Symbol('_is_RouterOutletState_default');
  router_outlet.RouterOutletState$ = dart.generic((TDelegate, T) => {
    var __t$BuildContextAndTDelegateAndTNToWidget = () => (__t$BuildContextAndTDelegateAndTNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, TDelegate, __t$TN()])))();
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class RouterOutletState extends framework.State$(router_outlet.RouterOutlet$(TDelegate, T)) {
      get currentRoute() {
        return this[S$.currentRoute];
      }
      set currentRoute(value) {
        this[S$.currentRoute] = __t$TN().as(value);
      }
      get delegate() {
        return this.widget.routerDelegate;
      }
      initState() {
        super.initState();
        this[S$._getCurrentRoute]();
        this.delegate.addListener(dart.bind(this, 'onRouterDelegateChanged'));
      }
      dispose() {
        this.delegate.removeListener(dart.bind(this, 'onRouterDelegateChanged'));
        super.dispose();
      }
      [S$._getCurrentRoute]() {
        this.currentRoute = this.delegate.currentConfiguration;
      }
      onRouterDelegateChanged() {
        this.setState(dart.bind(this, S$._getCurrentRoute));
      }
      build(context) {
        let t181, t180, t179, t178;
        t178 = this.widget;
        t179 = context;
        t180 = this.delegate;
        t181 = this.currentRoute;
        return __t$BuildContextAndTDelegateAndTNToWidget().as(t178.builder)(t179, t180, t181);
      }
      static ['_#new#tearOff'](TDelegate, T) {
        return new (router_outlet.RouterOutletState$(TDelegate, T)).new();
      }
    }
    (RouterOutletState.new = function() {
      this[S$.currentRoute] = null;
      RouterOutletState.__proto__.new.call(this);
      ;
    }).prototype = RouterOutletState.prototype;
    dart.addTypeTests(RouterOutletState);
    RouterOutletState.prototype[_is_RouterOutletState_default] = true;
    dart.addTypeCaches(RouterOutletState);
    dart.setMethodSignature(RouterOutletState, () => ({
      __proto__: dart.getMethods(RouterOutletState.__proto__),
      [S$._getCurrentRoute]: dart.fnType(dart.void, []),
      onRouterDelegateChanged: dart.fnType(dart.void, []),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(RouterOutletState, () => ({
      __proto__: dart.getGetters(RouterOutletState.__proto__),
      delegate: TDelegate
    }));
    dart.setLibraryUri(RouterOutletState, I[24]);
    dart.setFieldSignature(RouterOutletState, () => ({
      __proto__: dart.getFields(RouterOutletState.__proto__),
      currentRoute: dart.fieldType(dart.nullable(T))
    }));
    return RouterOutletState;
  });
  router_outlet.RouterOutletState = router_outlet.RouterOutletState$();
  dart.addTypeTests(router_outlet.RouterOutletState, _is_RouterOutletState_default);
  router_outlet.GetRouterOutlet = class GetRouterOutlet extends router_outlet.RouterOutlet$(get_router_delegate.GetDelegate, get_nav_config.GetNavConfig) {
    static ['_#new#tearOff'](opts) {
      let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
      let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
      let filterPages = opts && 'filterPages' in opts ? opts.filterPages : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      return new router_outlet.GetRouterOutlet.new({anchorRoute: anchorRoute, initialRoute: initialRoute, filterPages: filterPages, key: key, delegate: delegate});
    }
    static ['_#pickPages#tearOff'](opts) {
      let emptyWidget = opts && 'emptyWidget' in opts ? opts.emptyWidget : null;
      let emptyPage = opts && 'emptyPage' in opts ? opts.emptyPage : null;
      let pickPages = opts && 'pickPages' in opts ? opts.pickPages : null;
      let onPopPage = opts && 'onPopPage' in opts ? opts.onPopPage : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let delegate = opts && 'delegate' in opts ? opts.delegate : null;
      return new router_outlet.GetRouterOutlet.pickPages({emptyWidget: emptyWidget, emptyPage: emptyPage, pickPages: pickPages, onPopPage: onPopPage, key: key, delegate: delegate});
    }
    static ['_#builder#tearOff'](opts) {
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
      return new router_outlet.GetRouterOutlet.builder({builder: builder, routerDelegate: routerDelegate});
    }
  };
  (router_outlet.GetRouterOutlet.new = function(opts) {
    let anchorRoute = opts && 'anchorRoute' in opts ? opts.anchorRoute : null;
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
    let filterPages = opts && 'filterPages' in opts ? opts.filterPages : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    router_outlet.GetRouterOutlet.pickPages.call(this, {pickPages: dart.fn(config => {
        let ret = null;
        if (anchorRoute == null) {
          let length = core.Uri.parse(initialRoute).pathSegments[S$.$length];
          return config.currentTreeBranch[S$.$skip](length)[S$.$take](length)[S$.$toList]();
        }
        ret = router_outlet['PagesListExt|pickAfterRoute'](config.currentTreeBranch, anchorRoute);
        if (filterPages != null) {
          ret = filterPages(ret);
        }
        return ret;
      }, T$.GetNavConfigToIterableOfGetPage()), emptyPage: dart.fn(delegate => {
        let t178;
        t178 = extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).matchRoute(initialRoute).route;
        return t178 == null ? delegate.notFoundRoute : t178;
      }, T$.GetDelegateToGetPage()), key: key, delegate: delegate});
  }).prototype = router_outlet.GetRouterOutlet.prototype;
  (router_outlet.GetRouterOutlet.pickPages = function(opts) {
    let t180;
    let emptyWidget = opts && 'emptyWidget' in opts ? opts.emptyWidget : null;
    let emptyPage = opts && 'emptyPage' in opts ? opts.emptyPage : null;
    let pickPages = opts && 'pickPages' in opts ? opts.pickPages : null;
    let onPopPage = opts && 'onPopPage' in opts ? opts.onPopPage : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let delegate = opts && 'delegate' in opts ? opts.delegate : null;
    router_outlet.GetRouterOutlet.__proto__.new.call(this, {pageBuilder: dart.fn((context, rDelegate, pages) => {
        let t180, t180$, t180$0, t180$1;
        let pageRes = (() => {
          let t178 = T$.JSArrayOfGetPageN().of([]);
          let t179 = pages;
          if (t179 != null) t178[S$.$addAll](t179);
          if (pages == null || pages[S$.$isEmpty]) t178.push((t180 = emptyPage, t180 == null ? null : t180(rDelegate)));
          return t178;
        })()[S$.$whereType](get_route.GetPage);
        if (pageRes[S$.$isNotEmpty]) {
          return new get_router_delegate.GetNavigator.new({onPopPage: (t180$ = onPopPage, t180$ == null ? dart.fn((route, result) => {
              let didPop = route.didPop(result);
              if (!didPop) {
                return false;
              }
              return true;
            }, T$.RouteAnddynamicTobool()) : t180$), pages: pageRes[S$.$toList](), key: key});
        }
        t180$1 = (t180$0 = emptyWidget, t180$0 == null ? null : t180$0(rDelegate));
        return t180$1 == null ? C[40] || CT.C40 : t180$1;
      }, T$.BuildContextAndGetDelegateAndIterableNOfGetPageToWidget()), pickPages: pickPages, delegate: (t180 = delegate, t180 == null ? extension_navigation['NavTwoExt|get#rootDelegate'](get_main.Get) : t180)});
    ;
  }).prototype = router_outlet.GetRouterOutlet.prototype;
  (router_outlet.GetRouterOutlet.builder = function(opts) {
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
    router_outlet.GetRouterOutlet.__proto__.builder.call(this, {builder: builder, delegate: routerDelegate});
    ;
  }).prototype = router_outlet.GetRouterOutlet.prototype;
  dart.addTypeTests(router_outlet.GetRouterOutlet);
  dart.addTypeCaches(router_outlet.GetRouterOutlet);
  dart.setLibraryUri(router_outlet.GetRouterOutlet, I[24]);
  router_outlet['PagesListExt|pickAtRoute'] = function PagesListExt$124pickAtRoute($this, route) {
    return $this[S$.$skipWhile](dart.fn(value => value.name !== route, T$.GetPageTobool()));
  };
  router_outlet['PagesListExt|get#pickAtRoute'] = function PagesListExt$124get$35pickAtRoute($this) {
    return dart.fn(route => router_outlet['PagesListExt|pickAtRoute']($this, route), T$.StringToIterableOfGetPage());
  };
  router_outlet['PagesListExt|pickAfterRoute'] = function PagesListExt$124pickAfterRoute($this, route) {
    return router_outlet['PagesListExt|pickAtRoute']($this, route)[S$.$skip](1);
  };
  router_outlet['PagesListExt|get#pickAfterRoute'] = function PagesListExt$124get$35pickAfterRoute($this) {
    return dart.fn(route => router_outlet['PagesListExt|pickAfterRoute']($this, route), T$.StringToIterableOfGetPage());
  };
  get_cupertino_app.GetCupertinoApp = class GetCupertinoApp extends framework.StatelessWidget {
    get navigatorKey() {
      return this[S$.navigatorKey];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    get home() {
      return this[S$.home];
    }
    set home(value) {
      super.home = value;
    }
    get routes() {
      return this[S$.routes];
    }
    set routes(value) {
      super.routes = value;
    }
    get initialRoute() {
      return this[S$.initialRoute$1];
    }
    set initialRoute(value) {
      super.initialRoute = value;
    }
    get onGenerateRoute() {
      return this[S$.onGenerateRoute];
    }
    set onGenerateRoute(value) {
      super.onGenerateRoute = value;
    }
    get onGenerateInitialRoutes() {
      return this[S$.onGenerateInitialRoutes];
    }
    set onGenerateInitialRoutes(value) {
      super.onGenerateInitialRoutes = value;
    }
    get onUnknownRoute() {
      return this[S$.onUnknownRoute];
    }
    set onUnknownRoute(value) {
      super.onUnknownRoute = value;
    }
    get navigatorObservers() {
      return this[S$.navigatorObservers$1];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get builder() {
      return this[S$.builder$3];
    }
    set builder(value) {
      super.builder = value;
    }
    get title() {
      return this[S$.title];
    }
    set title(value) {
      super.title = value;
    }
    get onGenerateTitle() {
      return this[S$.onGenerateTitle];
    }
    set onGenerateTitle(value) {
      super.onGenerateTitle = value;
    }
    get customTransition() {
      return this[S$.customTransition];
    }
    set customTransition(value) {
      super.customTransition = value;
    }
    get color() {
      return this[S$.color];
    }
    set color(value) {
      super.color = value;
    }
    get translationsKeys() {
      return this[S$.translationsKeys];
    }
    set translationsKeys(value) {
      super.translationsKeys = value;
    }
    get translations() {
      return this[S$.translations];
    }
    set translations(value) {
      super.translations = value;
    }
    get textDirection() {
      return this[S$.textDirection];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get locale() {
      return this[S$.locale];
    }
    set locale(value) {
      super.locale = value;
    }
    get fallbackLocale() {
      return this[S$.fallbackLocale];
    }
    set fallbackLocale(value) {
      super.fallbackLocale = value;
    }
    get localizationsDelegates() {
      return this[S$.localizationsDelegates];
    }
    set localizationsDelegates(value) {
      super.localizationsDelegates = value;
    }
    get localeListResolutionCallback() {
      return this[S$.localeListResolutionCallback];
    }
    set localeListResolutionCallback(value) {
      super.localeListResolutionCallback = value;
    }
    get localeResolutionCallback() {
      return this[S$.localeResolutionCallback];
    }
    set localeResolutionCallback(value) {
      super.localeResolutionCallback = value;
    }
    get supportedLocales() {
      return this[S$.supportedLocales];
    }
    set supportedLocales(value) {
      super.supportedLocales = value;
    }
    get showPerformanceOverlay() {
      return this[S$.showPerformanceOverlay];
    }
    set showPerformanceOverlay(value) {
      super.showPerformanceOverlay = value;
    }
    get checkerboardRasterCacheImages() {
      return this[S$.checkerboardRasterCacheImages];
    }
    set checkerboardRasterCacheImages(value) {
      super.checkerboardRasterCacheImages = value;
    }
    get checkerboardOffscreenLayers() {
      return this[S$.checkerboardOffscreenLayers];
    }
    set checkerboardOffscreenLayers(value) {
      super.checkerboardOffscreenLayers = value;
    }
    get showSemanticsDebugger() {
      return this[S$.showSemanticsDebugger];
    }
    set showSemanticsDebugger(value) {
      super.showSemanticsDebugger = value;
    }
    get debugShowCheckedModeBanner() {
      return this[S$.debugShowCheckedModeBanner];
    }
    set debugShowCheckedModeBanner(value) {
      super.debugShowCheckedModeBanner = value;
    }
    get shortcuts() {
      return this[S$.shortcuts];
    }
    set shortcuts(value) {
      super.shortcuts = value;
    }
    get highContrastTheme() {
      return this[S$.highContrastTheme];
    }
    set highContrastTheme(value) {
      super.highContrastTheme = value;
    }
    get highContrastDarkTheme() {
      return this[S$.highContrastDarkTheme];
    }
    set highContrastDarkTheme(value) {
      super.highContrastDarkTheme = value;
    }
    get actions() {
      return this[S$.actions];
    }
    set actions(value) {
      super.actions = value;
    }
    get routingCallback() {
      return this[S$.routingCallback];
    }
    set routingCallback(value) {
      super.routingCallback = value;
    }
    get defaultTransition() {
      return this[S$.defaultTransition];
    }
    set defaultTransition(value) {
      super.defaultTransition = value;
    }
    get opaqueRoute() {
      return this[S$.opaqueRoute];
    }
    set opaqueRoute(value) {
      super.opaqueRoute = value;
    }
    get onInit() {
      return this[S$.onInit];
    }
    set onInit(value) {
      super.onInit = value;
    }
    get onReady() {
      return this[S$.onReady];
    }
    set onReady(value) {
      super.onReady = value;
    }
    get onDispose() {
      return this[S$.onDispose];
    }
    set onDispose(value) {
      super.onDispose = value;
    }
    get enableLog() {
      return this[S$.enableLog];
    }
    set enableLog(value) {
      super.enableLog = value;
    }
    get logWriterCallback() {
      return this[S$.logWriterCallback];
    }
    set logWriterCallback(value) {
      super.logWriterCallback = value;
    }
    get popGesture() {
      return this[S$.popGesture];
    }
    set popGesture(value) {
      super.popGesture = value;
    }
    get smartManagement() {
      return this[S$.smartManagement$1];
    }
    set smartManagement(value) {
      super.smartManagement = value;
    }
    get initialBinding() {
      return this[S$.initialBinding];
    }
    set initialBinding(value) {
      super.initialBinding = value;
    }
    get transitionDuration() {
      return this[S$.transitionDuration];
    }
    set transitionDuration(value) {
      super.transitionDuration = value;
    }
    get defaultGlobalState() {
      return this[S$.defaultGlobalState];
    }
    set defaultGlobalState(value) {
      super.defaultGlobalState = value;
    }
    get getPages() {
      return this[S$.getPages];
    }
    set getPages(value) {
      super.getPages = value;
    }
    get unknownRoute() {
      return this[S$.unknownRoute];
    }
    set unknownRoute(value) {
      super.unknownRoute = value;
    }
    get routeInformationProvider() {
      return this[S$.routeInformationProvider];
    }
    set routeInformationProvider(value) {
      super.routeInformationProvider = value;
    }
    get routeInformationParser() {
      return this[S$.routeInformationParser$1];
    }
    set routeInformationParser(value) {
      super.routeInformationParser = value;
    }
    get routerDelegate() {
      return this[S$.routerDelegate$2];
    }
    set routerDelegate(value) {
      super.routerDelegate = value;
    }
    get backButtonDispatcher() {
      return this[S$.backButtonDispatcher];
    }
    set backButtonDispatcher(value) {
      super.backButtonDispatcher = value;
    }
    get theme() {
      return this[S$.theme$1];
    }
    set theme(value) {
      super.theme = value;
    }
    get useInheritedMediaQuery() {
      return this[S$.useInheritedMediaQuery];
    }
    set useInheritedMediaQuery(value) {
      super.useInheritedMediaQuery = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let home = opts && 'home' in opts ? opts.home : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[46] || CT.C46;
      let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
      let onGenerateRoute = opts && 'onGenerateRoute' in opts ? opts.onGenerateRoute : null;
      let onGenerateInitialRoutes = opts && 'onGenerateInitialRoutes' in opts ? opts.onGenerateInitialRoutes : null;
      let onUnknownRoute = opts && 'onUnknownRoute' in opts ? opts.onUnknownRoute : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[47] || CT.C47;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
      let translations = opts && 'translations' in opts ? opts.translations : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let title = opts && 'title' in opts ? opts.title : "";
      let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let onInit = opts && 'onInit' in opts ? opts.onInit : null;
      let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
      let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
      let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
      let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
      let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
      let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
      let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
      let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
      let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
      let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
      let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
      let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
      let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
      let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
      let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
      let onReady = opts && 'onReady' in opts ? opts.onReady : null;
      let getPages = opts && 'getPages' in opts ? opts.getPages : null;
      let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
      let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
      let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
      let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
      let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      return new get_cupertino_app.GetCupertinoApp.new({key: key, theme: theme, navigatorKey: navigatorKey, home: home, routes: routes, initialRoute: initialRoute, onGenerateRoute: onGenerateRoute, onGenerateInitialRoutes: onGenerateInitialRoutes, onUnknownRoute: onUnknownRoute, navigatorObservers: navigatorObservers, builder: builder, translationsKeys: translationsKeys, translations: translations, textDirection: textDirection, title: title, onGenerateTitle: onGenerateTitle, color: color, customTransition: customTransition, onInit: onInit, onDispose: onDispose, locale: locale, fallbackLocale: fallbackLocale, localizationsDelegates: localizationsDelegates, localeListResolutionCallback: localeListResolutionCallback, localeResolutionCallback: localeResolutionCallback, supportedLocales: supportedLocales, showPerformanceOverlay: showPerformanceOverlay, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, showSemanticsDebugger: showSemanticsDebugger, debugShowCheckedModeBanner: debugShowCheckedModeBanner, shortcuts: shortcuts, smartManagement: smartManagement, initialBinding: initialBinding, useInheritedMediaQuery: useInheritedMediaQuery, unknownRoute: unknownRoute, routingCallback: routingCallback, defaultTransition: defaultTransition, onReady: onReady, getPages: getPages, opaqueRoute: opaqueRoute, enableLog: enableLog, logWriterCallback: logWriterCallback, popGesture: popGesture, transitionDuration: transitionDuration, defaultGlobalState: defaultGlobalState, highContrastTheme: highContrastTheme, highContrastDarkTheme: highContrastDarkTheme, actions: actions});
    }
    static ['_#router#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
      let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
      let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
      let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let title = opts && 'title' in opts ? opts.title : "";
      let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
      let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
      let color = opts && 'color' in opts ? opts.color : null;
      let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
      let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
      let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
      let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
      let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
      let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
      let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
      let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
      let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
      let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
      let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
      let translations = opts && 'translations' in opts ? opts.translations : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
      let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
      let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
      let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
      let onInit = opts && 'onInit' in opts ? opts.onInit : null;
      let onReady = opts && 'onReady' in opts ? opts.onReady : null;
      let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
      let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
      let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
      let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
      let getPages = opts && 'getPages' in opts ? opts.getPages : null;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      return new get_cupertino_app.GetCupertinoApp.router({key: key, theme: theme, routeInformationProvider: routeInformationProvider, routeInformationParser: routeInformationParser, routerDelegate: routerDelegate, backButtonDispatcher: backButtonDispatcher, builder: builder, title: title, onGenerateTitle: onGenerateTitle, useInheritedMediaQuery: useInheritedMediaQuery, color: color, highContrastTheme: highContrastTheme, highContrastDarkTheme: highContrastDarkTheme, locale: locale, localizationsDelegates: localizationsDelegates, localeListResolutionCallback: localeListResolutionCallback, localeResolutionCallback: localeResolutionCallback, supportedLocales: supportedLocales, showPerformanceOverlay: showPerformanceOverlay, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, showSemanticsDebugger: showSemanticsDebugger, debugShowCheckedModeBanner: debugShowCheckedModeBanner, shortcuts: shortcuts, actions: actions, customTransition: customTransition, translationsKeys: translationsKeys, translations: translations, textDirection: textDirection, fallbackLocale: fallbackLocale, routingCallback: routingCallback, defaultTransition: defaultTransition, opaqueRoute: opaqueRoute, onInit: onInit, onReady: onReady, onDispose: onDispose, enableLog: enableLog, logWriterCallback: logWriterCallback, popGesture: popGesture, smartManagement: smartManagement, initialBinding: initialBinding, transitionDuration: transitionDuration, defaultGlobalState: defaultGlobalState, getPages: getPages, unknownRoute: unknownRoute});
    }
    build(context) {
      return new (T$.GetBuilderOfGetMaterialController()).new({init: extension_navigation['GetNavigation|get#rootController'](get_main.Get), dispose: dart.fn(d => {
          let t184;
          t184 = this.onDispose;
          t184 == null ? null : t184();
        }, T$.GetBuilderStateOfGetMaterialControllerTovoid()), initState: dart.fn(i => {
          let t184, t184$, t184$0, t184$1, t184$2, t184$3, t184$4;
          extension_navigation['GetNavigation|get#engine'](get_main.Get).addPostFrameCallback(dart.fn(timeStamp => {
            let t184;
            t184 = this.onReady;
            t184 == null ? null : t184();
          }, T$.DurationTovoid()));
          if (this.locale != null) internacionalization$['LocalesIntl|set#locale'](get_main.Get, this.locale);
          if (this.fallbackLocale != null) internacionalization$['LocalesIntl|set#fallbackLocale'](get_main.Get, this.fallbackLocale);
          if (this.translations != null) {
            internacionalization$['LocalesIntl|addTranslations'](get_main.Get, dart.nullCheck(this.translations).keys);
          } else if (this.translationsKeys != null) {
            internacionalization$['LocalesIntl|addTranslations'](get_main.Get, dart.nullCheck(this.translationsKeys));
          }
          extension_navigation['GetNavigation|set#customTransition'](get_main.Get, this.customTransition);
          t184 = this.initialBinding;
          t184 == null ? null : t184.dependencies();
          if (this.getPages != null) {
            extension_navigation['NavTwoExt|addPages'](get_main.Get, dart.nullCheck(this.getPages));
          }
          get_main.Get.smartManagement = this.smartManagement;
          t184$ = this.onInit;
          t184$ == null ? null : t184$();
          extension_navigation['GetNavigation|config'](get_main.Get, {enableLog: (t184$0 = this.enableLog, t184$0 == null ? get_main.Get.isLogEnable : t184$0), logWriterCallback: this.logWriterCallback, defaultTransition: (t184$1 = this.defaultTransition, t184$1 == null ? extension_navigation['GetNavigation|get#defaultTransition'](get_main.Get) : t184$1), defaultOpaqueRoute: (t184$2 = this.opaqueRoute, t184$2 == null ? extension_navigation['GetNavigation|get#isOpaqueRouteDefault'](get_main.Get) : t184$2), defaultPopGesture: (t184$3 = this.popGesture, t184$3 == null ? extension_navigation['GetNavigation|get#isPopGestureEnable'](get_main.Get) : t184$3), defaultDurationTransition: (t184$4 = this.transitionDuration, t184$4 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration'](get_main.Get) : t184$4)});
        }, T$.GetBuilderStateOfGetMaterialControllerTovoid()), builder: dart.fn(_ => {
          let t184, t184$, t184$0, t184$1;
          return this.routerDelegate != null ? new app$.CupertinoApp.router({routerDelegate: dart.nullCheck(this.routerDelegate), routeInformationParser: dart.nullCheck(this.routeInformationParser), backButtonDispatcher: this.backButtonDispatcher, routeInformationProvider: this.routeInformationProvider, key: _.unikey, theme: this.theme, builder: dart.bind(this, 'defaultBuilder'), title: this.title, onGenerateTitle: this.onGenerateTitle, color: this.color, locale: (t184 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t184 == null ? this.locale : t184), localizationsDelegates: this.localizationsDelegates, localeListResolutionCallback: this.localeListResolutionCallback, localeResolutionCallback: this.localeResolutionCallback, supportedLocales: this.supportedLocales, showPerformanceOverlay: this.showPerformanceOverlay, checkerboardRasterCacheImages: this.checkerboardRasterCacheImages, checkerboardOffscreenLayers: this.checkerboardOffscreenLayers, showSemanticsDebugger: this.showSemanticsDebugger, debugShowCheckedModeBanner: this.debugShowCheckedModeBanner, shortcuts: this.shortcuts, useInheritedMediaQuery: this.useInheritedMediaQuery}) : new app$.CupertinoApp.new({key: _.unikey, theme: this.theme, navigatorKey: this.navigatorKey == null ? extension_navigation['GetNavigation|get#key'](get_main.Get) : extension_navigation['GetNavigation|addKey'](get_main.Get, dart.nullCheck(this.navigatorKey)), home: this.home, routes: (t184$ = this.routes, t184$ == null ? C[46] || CT.C46 : t184$), initialRoute: this.initialRoute, onGenerateRoute: this.getPages != null ? dart.bind(this, 'generator') : this.onGenerateRoute, onGenerateInitialRoutes: this.getPages == null || this.home != null ? this.onGenerateInitialRoutes : dart.bind(this, 'initialRoutesGenerate'), onUnknownRoute: this.onUnknownRoute, navigatorObservers: (t184$0 = this.navigatorObservers == null ? T$.JSArrayOfNavigatorObserver().of([new route_observer.GetObserver.new(this.routingCallback, extension_navigation['GetNavigation|get#routing'](get_main.Get))]) : T$.JSArrayOfNavigatorObserver().of([new route_observer.GetObserver.new(this.routingCallback, extension_navigation['GetNavigation|get#routing'](get_main.Get))]), (() => {
              t184$0[S$.$addAll](dart.nullCheck(this.navigatorObservers));
              return t184$0;
            })()), builder: dart.bind(this, 'defaultBuilder'), title: this.title, onGenerateTitle: this.onGenerateTitle, color: this.color, locale: (t184$1 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t184$1 == null ? this.locale : t184$1), localizationsDelegates: this.localizationsDelegates, localeListResolutionCallback: this.localeListResolutionCallback, localeResolutionCallback: this.localeResolutionCallback, supportedLocales: this.supportedLocales, showPerformanceOverlay: this.showPerformanceOverlay, checkerboardRasterCacheImages: this.checkerboardRasterCacheImages, checkerboardOffscreenLayers: this.checkerboardOffscreenLayers, showSemanticsDebugger: this.showSemanticsDebugger, debugShowCheckedModeBanner: this.debugShowCheckedModeBanner, shortcuts: this.shortcuts, useInheritedMediaQuery: this.useInheritedMediaQuery});
        }, T$.GetMaterialControllerToCupertinoApp())});
    }
    defaultBuilder(context, child) {
      let t185, t184, t184$, t184$0;
      return new basic.Directionality.new({textDirection: (t184 = this.textDirection, t184 == null ? internacionalization.rtlLanguages[S$.$contains]((t185 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t185 == null ? null : t185.languageCode)) ? ui.TextDirection.rtl : ui.TextDirection.ltr : t184), child: this.builder == null ? (t184$ = child, t184$ == null ? new material.Material.new() : t184$) : dart.nullCheck(this.builder)(context, (t184$0 = child, t184$0 == null ? new material.Material.new() : t184$0))});
    }
    generator(settings) {
      return new route_middleware.PageRedirect.new({settings: settings, unknownRoute: this.unknownRoute}).page(dart.dynamic);
    }
    initialRoutesGenerate(name) {
      return T$.JSArrayOfRoute().of([new route_middleware.PageRedirect.new({settings: new navigator.RouteSettings.new({name: name}), unknownRoute: this.unknownRoute}).page(dart.dynamic)]);
    }
  };
  (get_cupertino_app.GetCupertinoApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let home = opts && 'home' in opts ? opts.home : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[46] || CT.C46;
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
    let onGenerateRoute = opts && 'onGenerateRoute' in opts ? opts.onGenerateRoute : null;
    let onGenerateInitialRoutes = opts && 'onGenerateInitialRoutes' in opts ? opts.onGenerateInitialRoutes : null;
    let onUnknownRoute = opts && 'onUnknownRoute' in opts ? opts.onUnknownRoute : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[47] || CT.C47;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
    let translations = opts && 'translations' in opts ? opts.translations : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let title = opts && 'title' in opts ? opts.title : "";
    let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
    let onInit = opts && 'onInit' in opts ? opts.onInit : null;
    let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
    let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
    let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
    let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
    let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
    let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
    let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
    let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
    let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
    let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
    let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
    let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
    let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
    let onReady = opts && 'onReady' in opts ? opts.onReady : null;
    let getPages = opts && 'getPages' in opts ? opts.getPages : null;
    let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
    let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
    let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
    let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
    let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    this[S$.theme$1] = theme;
    this[S$.navigatorKey] = navigatorKey;
    this[S$.home] = home;
    this[S$.routes] = routes;
    this[S$.initialRoute$1] = initialRoute;
    this[S$.onGenerateRoute] = onGenerateRoute;
    this[S$.onGenerateInitialRoutes] = onGenerateInitialRoutes;
    this[S$.onUnknownRoute] = onUnknownRoute;
    this[S$.navigatorObservers$1] = navigatorObservers;
    this[S$.builder$3] = builder;
    this[S$.translationsKeys] = translationsKeys;
    this[S$.translations] = translations;
    this[S$.textDirection] = textDirection;
    this[S$.title] = title;
    this[S$.onGenerateTitle] = onGenerateTitle;
    this[S$.color] = color;
    this[S$.customTransition] = customTransition;
    this[S$.onInit] = onInit;
    this[S$.onDispose] = onDispose;
    this[S$.locale] = locale;
    this[S$.fallbackLocale] = fallbackLocale;
    this[S$.localizationsDelegates] = localizationsDelegates;
    this[S$.localeListResolutionCallback] = localeListResolutionCallback;
    this[S$.localeResolutionCallback] = localeResolutionCallback;
    this[S$.supportedLocales] = supportedLocales;
    this[S$.showPerformanceOverlay] = showPerformanceOverlay;
    this[S$.checkerboardRasterCacheImages] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers] = checkerboardOffscreenLayers;
    this[S$.showSemanticsDebugger] = showSemanticsDebugger;
    this[S$.debugShowCheckedModeBanner] = debugShowCheckedModeBanner;
    this[S$.shortcuts] = shortcuts;
    this[S$.smartManagement$1] = smartManagement;
    this[S$.initialBinding] = initialBinding;
    this[S$.useInheritedMediaQuery] = useInheritedMediaQuery;
    this[S$.unknownRoute] = unknownRoute;
    this[S$.routingCallback] = routingCallback;
    this[S$.defaultTransition] = defaultTransition;
    this[S$.onReady] = onReady;
    this[S$.getPages] = getPages;
    this[S$.opaqueRoute] = opaqueRoute;
    this[S$.enableLog] = enableLog;
    this[S$.logWriterCallback] = logWriterCallback;
    this[S$.popGesture] = popGesture;
    this[S$.transitionDuration] = transitionDuration;
    this[S$.defaultGlobalState] = defaultGlobalState;
    this[S$.highContrastTheme] = highContrastTheme;
    this[S$.highContrastDarkTheme] = highContrastDarkTheme;
    this[S$.actions] = actions;
    this[S$.routeInformationProvider] = null;
    this[S$.routeInformationParser$1] = null;
    this[S$.routerDelegate$2] = null;
    this[S$.backButtonDispatcher] = null;
    get_cupertino_app.GetCupertinoApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = get_cupertino_app.GetCupertinoApp.prototype;
  (get_cupertino_app.GetCupertinoApp.router = function(opts) {
    let t184, t185, t185$, t184$;
    let key = opts && 'key' in opts ? opts.key : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
    let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
    let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
    let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let title = opts && 'title' in opts ? opts.title : "";
    let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
    let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
    let color = opts && 'color' in opts ? opts.color : null;
    let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
    let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
    let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
    let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
    let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
    let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
    let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
    let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
    let translations = opts && 'translations' in opts ? opts.translations : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
    let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
    let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
    let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
    let onInit = opts && 'onInit' in opts ? opts.onInit : null;
    let onReady = opts && 'onReady' in opts ? opts.onReady : null;
    let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
    let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
    let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
    let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
    let getPages = opts && 'getPages' in opts ? opts.getPages : null;
    let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
    this[S$.theme$1] = theme;
    this[S$.routeInformationProvider] = routeInformationProvider;
    this[S$.backButtonDispatcher] = backButtonDispatcher;
    this[S$.builder$3] = builder;
    this[S$.title] = title;
    this[S$.onGenerateTitle] = onGenerateTitle;
    this[S$.useInheritedMediaQuery] = useInheritedMediaQuery;
    this[S$.color] = color;
    this[S$.highContrastTheme] = highContrastTheme;
    this[S$.highContrastDarkTheme] = highContrastDarkTheme;
    this[S$.locale] = locale;
    this[S$.localizationsDelegates] = localizationsDelegates;
    this[S$.localeListResolutionCallback] = localeListResolutionCallback;
    this[S$.localeResolutionCallback] = localeResolutionCallback;
    this[S$.supportedLocales] = supportedLocales;
    this[S$.showPerformanceOverlay] = showPerformanceOverlay;
    this[S$.checkerboardRasterCacheImages] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers] = checkerboardOffscreenLayers;
    this[S$.showSemanticsDebugger] = showSemanticsDebugger;
    this[S$.debugShowCheckedModeBanner] = debugShowCheckedModeBanner;
    this[S$.shortcuts] = shortcuts;
    this[S$.actions] = actions;
    this[S$.customTransition] = customTransition;
    this[S$.translationsKeys] = translationsKeys;
    this[S$.translations] = translations;
    this[S$.textDirection] = textDirection;
    this[S$.fallbackLocale] = fallbackLocale;
    this[S$.routingCallback] = routingCallback;
    this[S$.defaultTransition] = defaultTransition;
    this[S$.opaqueRoute] = opaqueRoute;
    this[S$.onInit] = onInit;
    this[S$.onReady] = onReady;
    this[S$.onDispose] = onDispose;
    this[S$.enableLog] = enableLog;
    this[S$.logWriterCallback] = logWriterCallback;
    this[S$.popGesture] = popGesture;
    this[S$.smartManagement$1] = smartManagement;
    this[S$.initialBinding] = initialBinding;
    this[S$.transitionDuration] = transitionDuration;
    this[S$.defaultGlobalState] = defaultGlobalState;
    this[S$.getPages] = getPages;
    this[S$.unknownRoute] = unknownRoute;
    this[S$.routerDelegate$2] = (t184 = routerDelegate, t184 == null ? routerDelegate = extension_navigation['NavTwoExt|createDelegate'](get_main.Get, {notFoundRoute: unknownRoute}) : t184);
    this[S$.routeInformationParser$1] = (t184$ = routeInformationParser, t184$ == null ? routeInformationParser = extension_navigation['NavTwoExt|createInformationParser'](get_main.Get, {initialRoute: (t185$ = (t185 = getPages, t185 == null ? null : t185[S$.$first].name), t185$ == null ? "/" : t185$)}) : t184$);
    this[S$.navigatorObservers$1] = null;
    this[S$.navigatorKey] = null;
    this[S$.onGenerateRoute] = null;
    this[S$.home] = null;
    this[S$.onGenerateInitialRoutes] = null;
    this[S$.onUnknownRoute] = null;
    this[S$.routes] = null;
    this[S$.initialRoute$1] = null;
    get_cupertino_app.GetCupertinoApp.__proto__.new.call(this, {key: key});
    get_main.Get.routerDelegate = routerDelegate;
    get_main.Get.routeInformationParser = routeInformationParser;
  }).prototype = get_cupertino_app.GetCupertinoApp.prototype;
  dart.addTypeTests(get_cupertino_app.GetCupertinoApp);
  dart.addTypeCaches(get_cupertino_app.GetCupertinoApp);
  dart.setMethodSignature(get_cupertino_app.GetCupertinoApp, () => ({
    __proto__: dart.getMethods(get_cupertino_app.GetCupertinoApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    defaultBuilder: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]),
    generator: dart.fnType(navigator.Route, [navigator.RouteSettings]),
    initialRoutesGenerate: dart.fnType(core.List$(navigator.Route), [core.String])
  }));
  dart.setLibraryUri(get_cupertino_app.GetCupertinoApp, I[25]);
  dart.setFieldSignature(get_cupertino_app.GetCupertinoApp, () => ({
    __proto__: dart.getFields(get_cupertino_app.GetCupertinoApp.__proto__),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator.NavigatorState))),
    home: dart.finalFieldType(dart.nullable(framework.Widget)),
    routes: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.fnType(framework.Widget, [framework.BuildContext])))),
    initialRoute: dart.finalFieldType(dart.nullable(core.String)),
    onGenerateRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator.Route), [navigator.RouteSettings]))),
    onGenerateInitialRoutes: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(navigator.Route), [core.String]))),
    onUnknownRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator.Route), [navigator.RouteSettings]))),
    navigatorObservers: dart.finalFieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]))),
    title: dart.finalFieldType(core.String),
    onGenerateTitle: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [framework.BuildContext]))),
    customTransition: dart.finalFieldType(dart.nullable(custom_transition.CustomTransition)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    translationsKeys: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.Map$(core.String, core.String)))),
    translations: dart.finalFieldType(dart.nullable(internacionalization.Translations)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    fallbackLocale: dart.finalFieldType(dart.nullable(ui.Locale)),
    localizationsDelegates: dart.finalFieldType(dart.nullable(core.Iterable$(localizations.LocalizationsDelegate))),
    localeListResolutionCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(ui.Locale), [dart.nullable(core.List$(ui.Locale)), core.Iterable$(ui.Locale)]))),
    localeResolutionCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(ui.Locale), [dart.nullable(ui.Locale), core.Iterable$(ui.Locale)]))),
    supportedLocales: dart.finalFieldType(core.Iterable$(ui.Locale)),
    showPerformanceOverlay: dart.finalFieldType(core.bool),
    checkerboardRasterCacheImages: dart.finalFieldType(core.bool),
    checkerboardOffscreenLayers: dart.finalFieldType(core.bool),
    showSemanticsDebugger: dart.finalFieldType(core.bool),
    debugShowCheckedModeBanner: dart.finalFieldType(core.bool),
    shortcuts: dart.finalFieldType(dart.nullable(core.Map$(shortcuts.LogicalKeySet, actions.Intent))),
    highContrastTheme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    highContrastDarkTheme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    actions: dart.finalFieldType(dart.nullable(core.Map$(core.Type, actions.Action$(actions.Intent)))),
    routingCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [dart.nullable(route_observer.Routing)]))),
    defaultTransition: dart.finalFieldType(dart.nullable(transitions_type.Transition)),
    opaqueRoute: dart.finalFieldType(dart.nullable(core.bool)),
    onInit: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onReady: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    enableLog: dart.finalFieldType(dart.nullable(core.bool)),
    logWriterCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String], {isError: core.bool}, {}))),
    popGesture: dart.finalFieldType(dart.nullable(core.bool)),
    smartManagement: dart.finalFieldType(smart_management.SmartManagement),
    initialBinding: dart.finalFieldType(dart.nullable(bindings_interface.Bindings)),
    transitionDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    defaultGlobalState: dart.finalFieldType(dart.nullable(core.bool)),
    getPages: dart.finalFieldType(dart.nullable(core.List$(get_route.GetPage))),
    unknownRoute: dart.finalFieldType(dart.nullable(get_route.GetPage)),
    routeInformationProvider: dart.finalFieldType(dart.nullable(router.RouteInformationProvider)),
    routeInformationParser: dart.finalFieldType(dart.nullable(router.RouteInformationParser$(core.Object))),
    routerDelegate: dart.finalFieldType(dart.nullable(router.RouterDelegate$(core.Object))),
    backButtonDispatcher: dart.finalFieldType(dart.nullable(router.BackButtonDispatcher)),
    theme: dart.finalFieldType(dart.nullable(theme.CupertinoThemeData)),
    useInheritedMediaQuery: dart.finalFieldType(core.bool)
  }));
  get_material_app.GetMaterialApp = class GetMaterialApp extends framework.StatelessWidget {
    get navigatorKey() {
      return this[S$.navigatorKey$1];
    }
    set navigatorKey(value) {
      super.navigatorKey = value;
    }
    get scaffoldMessengerKey() {
      return this[S$.scaffoldMessengerKey];
    }
    set scaffoldMessengerKey(value) {
      super.scaffoldMessengerKey = value;
    }
    get home() {
      return this[S$.home$1];
    }
    set home(value) {
      super.home = value;
    }
    get routes() {
      return this[S$.routes$1];
    }
    set routes(value) {
      super.routes = value;
    }
    get initialRoute() {
      return this[S$.initialRoute$2];
    }
    set initialRoute(value) {
      super.initialRoute = value;
    }
    get onGenerateRoute() {
      return this[S$.onGenerateRoute$1];
    }
    set onGenerateRoute(value) {
      super.onGenerateRoute = value;
    }
    get onGenerateInitialRoutes() {
      return this[S$.onGenerateInitialRoutes$1];
    }
    set onGenerateInitialRoutes(value) {
      super.onGenerateInitialRoutes = value;
    }
    get onUnknownRoute() {
      return this[S$.onUnknownRoute$1];
    }
    set onUnknownRoute(value) {
      super.onUnknownRoute = value;
    }
    get navigatorObservers() {
      return this[S$.navigatorObservers$2];
    }
    set navigatorObservers(value) {
      super.navigatorObservers = value;
    }
    get builder() {
      return this[S$.builder$4];
    }
    set builder(value) {
      super.builder = value;
    }
    get title() {
      return this[S$.title$1];
    }
    set title(value) {
      super.title = value;
    }
    get onGenerateTitle() {
      return this[S$.onGenerateTitle$1];
    }
    set onGenerateTitle(value) {
      super.onGenerateTitle = value;
    }
    get theme() {
      return this[S$.theme$2];
    }
    set theme(value) {
      super.theme = value;
    }
    get darkTheme() {
      return this[S$.darkTheme];
    }
    set darkTheme(value) {
      super.darkTheme = value;
    }
    get themeMode() {
      return this[S$.themeMode];
    }
    set themeMode(value) {
      super.themeMode = value;
    }
    get customTransition() {
      return this[S$.customTransition$1];
    }
    set customTransition(value) {
      super.customTransition = value;
    }
    get color() {
      return this[S$.color$1];
    }
    set color(value) {
      super.color = value;
    }
    get translationsKeys() {
      return this[S$.translationsKeys$1];
    }
    set translationsKeys(value) {
      super.translationsKeys = value;
    }
    get translations() {
      return this[S$.translations$1];
    }
    set translations(value) {
      super.translations = value;
    }
    get textDirection() {
      return this[S$.textDirection$1];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get locale() {
      return this[S$.locale$1];
    }
    set locale(value) {
      super.locale = value;
    }
    get fallbackLocale() {
      return this[S$.fallbackLocale$1];
    }
    set fallbackLocale(value) {
      super.fallbackLocale = value;
    }
    get localizationsDelegates() {
      return this[S$.localizationsDelegates$1];
    }
    set localizationsDelegates(value) {
      super.localizationsDelegates = value;
    }
    get localeListResolutionCallback() {
      return this[S$.localeListResolutionCallback$1];
    }
    set localeListResolutionCallback(value) {
      super.localeListResolutionCallback = value;
    }
    get localeResolutionCallback() {
      return this[S$.localeResolutionCallback$1];
    }
    set localeResolutionCallback(value) {
      super.localeResolutionCallback = value;
    }
    get supportedLocales() {
      return this[S$.supportedLocales$1];
    }
    set supportedLocales(value) {
      super.supportedLocales = value;
    }
    get showPerformanceOverlay() {
      return this[S$.showPerformanceOverlay$1];
    }
    set showPerformanceOverlay(value) {
      super.showPerformanceOverlay = value;
    }
    get checkerboardRasterCacheImages() {
      return this[S$.checkerboardRasterCacheImages$1];
    }
    set checkerboardRasterCacheImages(value) {
      super.checkerboardRasterCacheImages = value;
    }
    get checkerboardOffscreenLayers() {
      return this[S$.checkerboardOffscreenLayers$1];
    }
    set checkerboardOffscreenLayers(value) {
      super.checkerboardOffscreenLayers = value;
    }
    get showSemanticsDebugger() {
      return this[S$.showSemanticsDebugger$1];
    }
    set showSemanticsDebugger(value) {
      super.showSemanticsDebugger = value;
    }
    get debugShowCheckedModeBanner() {
      return this[S$.debugShowCheckedModeBanner$1];
    }
    set debugShowCheckedModeBanner(value) {
      super.debugShowCheckedModeBanner = value;
    }
    get shortcuts() {
      return this[S$.shortcuts$1];
    }
    set shortcuts(value) {
      super.shortcuts = value;
    }
    get scrollBehavior() {
      return this[S$.scrollBehavior];
    }
    set scrollBehavior(value) {
      super.scrollBehavior = value;
    }
    get highContrastTheme() {
      return this[S$.highContrastTheme$1];
    }
    set highContrastTheme(value) {
      super.highContrastTheme = value;
    }
    get highContrastDarkTheme() {
      return this[S$.highContrastDarkTheme$1];
    }
    set highContrastDarkTheme(value) {
      super.highContrastDarkTheme = value;
    }
    get actions() {
      return this[S$.actions$1];
    }
    set actions(value) {
      super.actions = value;
    }
    get debugShowMaterialGrid() {
      return this[S$.debugShowMaterialGrid];
    }
    set debugShowMaterialGrid(value) {
      super.debugShowMaterialGrid = value;
    }
    get routingCallback() {
      return this[S$.routingCallback$1];
    }
    set routingCallback(value) {
      super.routingCallback = value;
    }
    get defaultTransition() {
      return this[S$.defaultTransition$1];
    }
    set defaultTransition(value) {
      super.defaultTransition = value;
    }
    get opaqueRoute() {
      return this[S$.opaqueRoute$1];
    }
    set opaqueRoute(value) {
      super.opaqueRoute = value;
    }
    get onInit() {
      return this[S$.onInit$1];
    }
    set onInit(value) {
      super.onInit = value;
    }
    get onReady() {
      return this[S$.onReady$1];
    }
    set onReady(value) {
      super.onReady = value;
    }
    get onDispose() {
      return this[S$.onDispose$1];
    }
    set onDispose(value) {
      super.onDispose = value;
    }
    get enableLog() {
      return this[S$.enableLog$1];
    }
    set enableLog(value) {
      super.enableLog = value;
    }
    get logWriterCallback() {
      return this[S$.logWriterCallback$1];
    }
    set logWriterCallback(value) {
      super.logWriterCallback = value;
    }
    get popGesture() {
      return this[S$.popGesture$1];
    }
    set popGesture(value) {
      super.popGesture = value;
    }
    get smartManagement() {
      return this[S$.smartManagement$2];
    }
    set smartManagement(value) {
      super.smartManagement = value;
    }
    get initialBinding() {
      return this[S$.initialBinding$1];
    }
    set initialBinding(value) {
      super.initialBinding = value;
    }
    get transitionDuration() {
      return this[S$.transitionDuration$1];
    }
    set transitionDuration(value) {
      super.transitionDuration = value;
    }
    get defaultGlobalState() {
      return this[S$.defaultGlobalState$1];
    }
    set defaultGlobalState(value) {
      super.defaultGlobalState = value;
    }
    get getPages() {
      return this[S$.getPages$1];
    }
    set getPages(value) {
      super.getPages = value;
    }
    get unknownRoute() {
      return this[S$.unknownRoute$1];
    }
    set unknownRoute(value) {
      super.unknownRoute = value;
    }
    get routeInformationProvider() {
      return this[S$.routeInformationProvider$1];
    }
    set routeInformationProvider(value) {
      super.routeInformationProvider = value;
    }
    get routeInformationParser() {
      return this[S$.routeInformationParser$2];
    }
    set routeInformationParser(value) {
      super.routeInformationParser = value;
    }
    get routerDelegate() {
      return this[S$.routerDelegate$3];
    }
    set routerDelegate(value) {
      super.routerDelegate = value;
    }
    get backButtonDispatcher() {
      return this[S$.backButtonDispatcher$1];
    }
    set backButtonDispatcher(value) {
      super.backButtonDispatcher = value;
    }
    get useInheritedMediaQuery() {
      return this[S$.useInheritedMediaQuery$1];
    }
    set useInheritedMediaQuery(value) {
      super.useInheritedMediaQuery = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
      let scaffoldMessengerKey = opts && 'scaffoldMessengerKey' in opts ? opts.scaffoldMessengerKey : null;
      let home = opts && 'home' in opts ? opts.home : null;
      let routes = opts && 'routes' in opts ? opts.routes : C[46] || CT.C46;
      let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
      let onGenerateRoute = opts && 'onGenerateRoute' in opts ? opts.onGenerateRoute : null;
      let onGenerateInitialRoutes = opts && 'onGenerateInitialRoutes' in opts ? opts.onGenerateInitialRoutes : null;
      let onUnknownRoute = opts && 'onUnknownRoute' in opts ? opts.onUnknownRoute : null;
      let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[47] || CT.C47;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let title = opts && 'title' in opts ? opts.title : "";
      let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let darkTheme = opts && 'darkTheme' in opts ? opts.darkTheme : null;
      let themeMode = opts && 'themeMode' in opts ? opts.themeMode : C[50] || CT.C50;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
      let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
      let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
      let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
      let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
      let debugShowMaterialGrid = opts && 'debugShowMaterialGrid' in opts ? opts.debugShowMaterialGrid : false;
      let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
      let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
      let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
      let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
      let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
      let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
      let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
      let translations = opts && 'translations' in opts ? opts.translations : null;
      let onInit = opts && 'onInit' in opts ? opts.onInit : null;
      let onReady = opts && 'onReady' in opts ? opts.onReady : null;
      let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
      let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
      let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
      let getPages = opts && 'getPages' in opts ? opts.getPages : null;
      let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
      let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
      let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
      let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
      let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
      let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      return new get_material_app.GetMaterialApp.new({key: key, navigatorKey: navigatorKey, scaffoldMessengerKey: scaffoldMessengerKey, home: home, routes: routes, initialRoute: initialRoute, onGenerateRoute: onGenerateRoute, onGenerateInitialRoutes: onGenerateInitialRoutes, onUnknownRoute: onUnknownRoute, useInheritedMediaQuery: useInheritedMediaQuery, navigatorObservers: navigatorObservers, builder: builder, textDirection: textDirection, title: title, onGenerateTitle: onGenerateTitle, color: color, theme: theme, darkTheme: darkTheme, themeMode: themeMode, locale: locale, fallbackLocale: fallbackLocale, localizationsDelegates: localizationsDelegates, localeListResolutionCallback: localeListResolutionCallback, localeResolutionCallback: localeResolutionCallback, supportedLocales: supportedLocales, debugShowMaterialGrid: debugShowMaterialGrid, showPerformanceOverlay: showPerformanceOverlay, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, showSemanticsDebugger: showSemanticsDebugger, debugShowCheckedModeBanner: debugShowCheckedModeBanner, shortcuts: shortcuts, scrollBehavior: scrollBehavior, customTransition: customTransition, translationsKeys: translationsKeys, translations: translations, onInit: onInit, onReady: onReady, onDispose: onDispose, routingCallback: routingCallback, defaultTransition: defaultTransition, getPages: getPages, opaqueRoute: opaqueRoute, enableLog: enableLog, logWriterCallback: logWriterCallback, popGesture: popGesture, transitionDuration: transitionDuration, defaultGlobalState: defaultGlobalState, smartManagement: smartManagement, initialBinding: initialBinding, unknownRoute: unknownRoute, highContrastTheme: highContrastTheme, highContrastDarkTheme: highContrastDarkTheme, actions: actions});
    }
    static ['_#router#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
      let scaffoldMessengerKey = opts && 'scaffoldMessengerKey' in opts ? opts.scaffoldMessengerKey : null;
      let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
      let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
      let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let title = opts && 'title' in opts ? opts.title : "";
      let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let theme = opts && 'theme' in opts ? opts.theme : null;
      let darkTheme = opts && 'darkTheme' in opts ? opts.darkTheme : null;
      let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
      let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
      let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
      let themeMode = opts && 'themeMode' in opts ? opts.themeMode : C[50] || CT.C50;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
      let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
      let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
      let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
      let debugShowMaterialGrid = opts && 'debugShowMaterialGrid' in opts ? opts.debugShowMaterialGrid : false;
      let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
      let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
      let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
      let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
      let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
      let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
      let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
      let translations = opts && 'translations' in opts ? opts.translations : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
      let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
      let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
      let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
      let onInit = opts && 'onInit' in opts ? opts.onInit : null;
      let onReady = opts && 'onReady' in opts ? opts.onReady : null;
      let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
      let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
      let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
      let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
      let getPages = opts && 'getPages' in opts ? opts.getPages : null;
      let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      return new get_material_app.GetMaterialApp.router({key: key, routeInformationProvider: routeInformationProvider, scaffoldMessengerKey: scaffoldMessengerKey, routeInformationParser: routeInformationParser, routerDelegate: routerDelegate, backButtonDispatcher: backButtonDispatcher, builder: builder, title: title, onGenerateTitle: onGenerateTitle, color: color, theme: theme, darkTheme: darkTheme, useInheritedMediaQuery: useInheritedMediaQuery, highContrastTheme: highContrastTheme, highContrastDarkTheme: highContrastDarkTheme, themeMode: themeMode, locale: locale, localizationsDelegates: localizationsDelegates, localeListResolutionCallback: localeListResolutionCallback, localeResolutionCallback: localeResolutionCallback, supportedLocales: supportedLocales, debugShowMaterialGrid: debugShowMaterialGrid, showPerformanceOverlay: showPerformanceOverlay, checkerboardRasterCacheImages: checkerboardRasterCacheImages, checkerboardOffscreenLayers: checkerboardOffscreenLayers, showSemanticsDebugger: showSemanticsDebugger, debugShowCheckedModeBanner: debugShowCheckedModeBanner, shortcuts: shortcuts, scrollBehavior: scrollBehavior, actions: actions, customTransition: customTransition, translationsKeys: translationsKeys, translations: translations, textDirection: textDirection, fallbackLocale: fallbackLocale, routingCallback: routingCallback, defaultTransition: defaultTransition, opaqueRoute: opaqueRoute, onInit: onInit, onReady: onReady, onDispose: onDispose, enableLog: enableLog, logWriterCallback: logWriterCallback, popGesture: popGesture, smartManagement: smartManagement, initialBinding: initialBinding, transitionDuration: transitionDuration, defaultGlobalState: defaultGlobalState, getPages: getPages, navigatorObservers: navigatorObservers, unknownRoute: unknownRoute});
    }
    build(context) {
      return new (T$.GetBuilderOfGetMaterialController()).new({init: extension_navigation['GetNavigation|get#rootController'](get_main.Get), dispose: dart.fn(d => {
          let t184;
          t184 = this.onDispose;
          t184 == null ? null : t184();
        }, T$.GetBuilderStateOfGetMaterialControllerTovoid()), initState: dart.fn(i => {
          let t184, t184$, t184$0, t184$1, t184$2, t184$3, t184$4;
          extension_navigation['GetNavigation|get#engine'](get_main.Get).addPostFrameCallback(dart.fn(timeStamp => {
            let t184;
            t184 = this.onReady;
            t184 == null ? null : t184();
          }, T$.DurationTovoid()));
          if (this.locale != null) internacionalization$['LocalesIntl|set#locale'](get_main.Get, this.locale);
          if (this.fallbackLocale != null) internacionalization$['LocalesIntl|set#fallbackLocale'](get_main.Get, this.fallbackLocale);
          if (this.translations != null) {
            internacionalization$['LocalesIntl|addTranslations'](get_main.Get, dart.nullCheck(this.translations).keys);
          } else if (this.translationsKeys != null) {
            internacionalization$['LocalesIntl|addTranslations'](get_main.Get, dart.nullCheck(this.translationsKeys));
          }
          extension_navigation['GetNavigation|set#customTransition'](get_main.Get, this.customTransition);
          t184 = this.initialBinding;
          t184 == null ? null : t184.dependencies();
          if (this.getPages != null) {
            extension_navigation['NavTwoExt|addPages'](get_main.Get, dart.nullCheck(this.getPages));
          }
          get_main.Get.smartManagement = this.smartManagement;
          t184$ = this.onInit;
          t184$ == null ? null : t184$();
          extension_navigation['GetNavigation|config'](get_main.Get, {enableLog: (t184$0 = this.enableLog, t184$0 == null ? get_main.Get.isLogEnable : t184$0), logWriterCallback: this.logWriterCallback, defaultTransition: (t184$1 = this.defaultTransition, t184$1 == null ? extension_navigation['GetNavigation|get#defaultTransition'](get_main.Get) : t184$1), defaultOpaqueRoute: (t184$2 = this.opaqueRoute, t184$2 == null ? extension_navigation['GetNavigation|get#isOpaqueRouteDefault'](get_main.Get) : t184$2), defaultPopGesture: (t184$3 = this.popGesture, t184$3 == null ? extension_navigation['GetNavigation|get#isPopGestureEnable'](get_main.Get) : t184$3), defaultDurationTransition: (t184$4 = this.transitionDuration, t184$4 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration'](get_main.Get) : t184$4)});
        }, T$.GetBuilderStateOfGetMaterialControllerTovoid()), builder: dart.fn(_ => {
          let t184, t184$, t184$0, t184$1, t184$2, t184$3, t184$4, t184$5, t184$6, t184$7, t184$8, t184$9, t184$10, t184$11, t184$12, t184$13, t184$14, t184$15;
          return this.routerDelegate != null ? new app.MaterialApp.router({routerDelegate: dart.nullCheck(this.routerDelegate), routeInformationParser: dart.nullCheck(this.routeInformationParser), backButtonDispatcher: this.backButtonDispatcher, routeInformationProvider: this.routeInformationProvider, key: _.unikey, builder: dart.bind(this, 'defaultBuilder'), title: this.title, onGenerateTitle: this.onGenerateTitle, color: this.color, theme: (t184$ = (t184 = _.theme, t184 == null ? this.theme : t184), t184$ == null ? theme_data.ThemeData.fallback() : t184$), darkTheme: (t184$2 = (t184$1 = (t184$0 = _.darkTheme, t184$0 == null ? this.darkTheme : t184$0), t184$1 == null ? this.theme : t184$1), t184$2 == null ? theme_data.ThemeData.fallback() : t184$2), themeMode: (t184$3 = _.themeMode, t184$3 == null ? this.themeMode : t184$3), locale: (t184$4 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t184$4 == null ? this.locale : t184$4), scaffoldMessengerKey: (t184$5 = this.scaffoldMessengerKey, t184$5 == null ? _.scaffoldMessengerKey : t184$5), localizationsDelegates: this.localizationsDelegates, localeListResolutionCallback: this.localeListResolutionCallback, localeResolutionCallback: this.localeResolutionCallback, supportedLocales: this.supportedLocales, debugShowMaterialGrid: this.debugShowMaterialGrid, showPerformanceOverlay: this.showPerformanceOverlay, checkerboardRasterCacheImages: this.checkerboardRasterCacheImages, checkerboardOffscreenLayers: this.checkerboardOffscreenLayers, showSemanticsDebugger: this.showSemanticsDebugger, debugShowCheckedModeBanner: this.debugShowCheckedModeBanner, shortcuts: this.shortcuts, scrollBehavior: this.scrollBehavior, useInheritedMediaQuery: this.useInheritedMediaQuery}) : new app.MaterialApp.new({key: _.unikey, navigatorKey: this.navigatorKey == null ? extension_navigation['GetNavigation|get#key'](get_main.Get) : extension_navigation['GetNavigation|addKey'](get_main.Get, dart.nullCheck(this.navigatorKey)), scaffoldMessengerKey: (t184$6 = this.scaffoldMessengerKey, t184$6 == null ? _.scaffoldMessengerKey : t184$6), home: this.home, routes: (t184$7 = this.routes, t184$7 == null ? C[46] || CT.C46 : t184$7), initialRoute: this.initialRoute, onGenerateRoute: this.getPages != null ? dart.bind(this, 'generator') : this.onGenerateRoute, onGenerateInitialRoutes: this.getPages == null || this.home != null ? this.onGenerateInitialRoutes : dart.bind(this, 'initialRoutesGenerate'), onUnknownRoute: this.onUnknownRoute, navigatorObservers: (t184$8 = this.navigatorObservers == null ? T$.JSArrayOfNavigatorObserver().of([new route_observer.GetObserver.new(this.routingCallback, extension_navigation['GetNavigation|get#routing'](get_main.Get))]) : T$.JSArrayOfNavigatorObserver().of([new route_observer.GetObserver.new(this.routingCallback, extension_navigation['GetNavigation|get#routing'](get_main.Get))]), (() => {
              t184$8[S$.$addAll](dart.nullCheck(this.navigatorObservers));
              return t184$8;
            })()), builder: dart.bind(this, 'defaultBuilder'), title: this.title, onGenerateTitle: this.onGenerateTitle, color: this.color, theme: (t184$10 = (t184$9 = _.theme, t184$9 == null ? this.theme : t184$9), t184$10 == null ? theme_data.ThemeData.fallback() : t184$10), darkTheme: (t184$13 = (t184$12 = (t184$11 = _.darkTheme, t184$11 == null ? this.darkTheme : t184$11), t184$12 == null ? this.theme : t184$12), t184$13 == null ? theme_data.ThemeData.fallback() : t184$13), themeMode: (t184$14 = _.themeMode, t184$14 == null ? this.themeMode : t184$14), locale: (t184$15 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t184$15 == null ? this.locale : t184$15), localizationsDelegates: this.localizationsDelegates, localeListResolutionCallback: this.localeListResolutionCallback, localeResolutionCallback: this.localeResolutionCallback, supportedLocales: this.supportedLocales, debugShowMaterialGrid: this.debugShowMaterialGrid, showPerformanceOverlay: this.showPerformanceOverlay, checkerboardRasterCacheImages: this.checkerboardRasterCacheImages, checkerboardOffscreenLayers: this.checkerboardOffscreenLayers, showSemanticsDebugger: this.showSemanticsDebugger, debugShowCheckedModeBanner: this.debugShowCheckedModeBanner, shortcuts: this.shortcuts, scrollBehavior: this.scrollBehavior, useInheritedMediaQuery: this.useInheritedMediaQuery});
        }, T$.GetMaterialControllerToMaterialApp())});
    }
    defaultBuilder(context, child) {
      let t185, t184, t184$, t184$0;
      return new basic.Directionality.new({textDirection: (t184 = this.textDirection, t184 == null ? internacionalization.rtlLanguages[S$.$contains]((t185 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t185 == null ? null : t185.languageCode)) ? ui.TextDirection.rtl : ui.TextDirection.ltr : t184), child: this.builder == null ? (t184$ = child, t184$ == null ? new material.Material.new() : t184$) : dart.nullCheck(this.builder)(context, (t184$0 = child, t184$0 == null ? new material.Material.new() : t184$0))});
    }
    generator(settings) {
      return new route_middleware.PageRedirect.new({settings: settings, unknownRoute: this.unknownRoute}).page(dart.dynamic);
    }
    initialRoutesGenerate(name) {
      return T$.JSArrayOfRoute().of([new route_middleware.PageRedirect.new({settings: new navigator.RouteSettings.new({name: name}), unknownRoute: this.unknownRoute}).page(dart.dynamic)]);
    }
  };
  (get_material_app.GetMaterialApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let navigatorKey = opts && 'navigatorKey' in opts ? opts.navigatorKey : null;
    let scaffoldMessengerKey = opts && 'scaffoldMessengerKey' in opts ? opts.scaffoldMessengerKey : null;
    let home = opts && 'home' in opts ? opts.home : null;
    let routes = opts && 'routes' in opts ? opts.routes : C[46] || CT.C46;
    let initialRoute = opts && 'initialRoute' in opts ? opts.initialRoute : null;
    let onGenerateRoute = opts && 'onGenerateRoute' in opts ? opts.onGenerateRoute : null;
    let onGenerateInitialRoutes = opts && 'onGenerateInitialRoutes' in opts ? opts.onGenerateInitialRoutes : null;
    let onUnknownRoute = opts && 'onUnknownRoute' in opts ? opts.onUnknownRoute : null;
    let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : C[47] || CT.C47;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let title = opts && 'title' in opts ? opts.title : "";
    let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let darkTheme = opts && 'darkTheme' in opts ? opts.darkTheme : null;
    let themeMode = opts && 'themeMode' in opts ? opts.themeMode : C[50] || CT.C50;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
    let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
    let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
    let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
    let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
    let debugShowMaterialGrid = opts && 'debugShowMaterialGrid' in opts ? opts.debugShowMaterialGrid : false;
    let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
    let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
    let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
    let translations = opts && 'translations' in opts ? opts.translations : null;
    let onInit = opts && 'onInit' in opts ? opts.onInit : null;
    let onReady = opts && 'onReady' in opts ? opts.onReady : null;
    let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
    let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
    let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
    let getPages = opts && 'getPages' in opts ? opts.getPages : null;
    let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
    let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
    let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
    let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
    let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
    let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
    let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
    let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    this[S$.navigatorKey$1] = navigatorKey;
    this[S$.scaffoldMessengerKey] = scaffoldMessengerKey;
    this[S$.home$1] = home;
    this[S$.routes$1] = routes;
    this[S$.initialRoute$2] = initialRoute;
    this[S$.onGenerateRoute$1] = onGenerateRoute;
    this[S$.onGenerateInitialRoutes$1] = onGenerateInitialRoutes;
    this[S$.onUnknownRoute$1] = onUnknownRoute;
    this[S$.useInheritedMediaQuery$1] = useInheritedMediaQuery;
    this[S$.navigatorObservers$2] = navigatorObservers;
    this[S$.builder$4] = builder;
    this[S$.textDirection$1] = textDirection;
    this[S$.title$1] = title;
    this[S$.onGenerateTitle$1] = onGenerateTitle;
    this[S$.color$1] = color;
    this[S$.theme$2] = theme;
    this[S$.darkTheme] = darkTheme;
    this[S$.themeMode] = themeMode;
    this[S$.locale$1] = locale;
    this[S$.fallbackLocale$1] = fallbackLocale;
    this[S$.localizationsDelegates$1] = localizationsDelegates;
    this[S$.localeListResolutionCallback$1] = localeListResolutionCallback;
    this[S$.localeResolutionCallback$1] = localeResolutionCallback;
    this[S$.supportedLocales$1] = supportedLocales;
    this[S$.debugShowMaterialGrid] = debugShowMaterialGrid;
    this[S$.showPerformanceOverlay$1] = showPerformanceOverlay;
    this[S$.checkerboardRasterCacheImages$1] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers$1] = checkerboardOffscreenLayers;
    this[S$.showSemanticsDebugger$1] = showSemanticsDebugger;
    this[S$.debugShowCheckedModeBanner$1] = debugShowCheckedModeBanner;
    this[S$.shortcuts$1] = shortcuts;
    this[S$.scrollBehavior] = scrollBehavior;
    this[S$.customTransition$1] = customTransition;
    this[S$.translationsKeys$1] = translationsKeys;
    this[S$.translations$1] = translations;
    this[S$.onInit$1] = onInit;
    this[S$.onReady$1] = onReady;
    this[S$.onDispose$1] = onDispose;
    this[S$.routingCallback$1] = routingCallback;
    this[S$.defaultTransition$1] = defaultTransition;
    this[S$.getPages$1] = getPages;
    this[S$.opaqueRoute$1] = opaqueRoute;
    this[S$.enableLog$1] = enableLog;
    this[S$.logWriterCallback$1] = logWriterCallback;
    this[S$.popGesture$1] = popGesture;
    this[S$.transitionDuration$1] = transitionDuration;
    this[S$.defaultGlobalState$1] = defaultGlobalState;
    this[S$.smartManagement$2] = smartManagement;
    this[S$.initialBinding$1] = initialBinding;
    this[S$.unknownRoute$1] = unknownRoute;
    this[S$.highContrastTheme$1] = highContrastTheme;
    this[S$.highContrastDarkTheme$1] = highContrastDarkTheme;
    this[S$.actions$1] = actions;
    this[S$.routeInformationProvider$1] = null;
    this[S$.routeInformationParser$2] = null;
    this[S$.routerDelegate$3] = null;
    this[S$.backButtonDispatcher$1] = null;
    get_material_app.GetMaterialApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = get_material_app.GetMaterialApp.prototype;
  (get_material_app.GetMaterialApp.router = function(opts) {
    let t184, t185, t185$, t184$;
    let key = opts && 'key' in opts ? opts.key : null;
    let routeInformationProvider = opts && 'routeInformationProvider' in opts ? opts.routeInformationProvider : null;
    let scaffoldMessengerKey = opts && 'scaffoldMessengerKey' in opts ? opts.scaffoldMessengerKey : null;
    let routeInformationParser = opts && 'routeInformationParser' in opts ? opts.routeInformationParser : null;
    let routerDelegate = opts && 'routerDelegate' in opts ? opts.routerDelegate : null;
    let backButtonDispatcher = opts && 'backButtonDispatcher' in opts ? opts.backButtonDispatcher : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let title = opts && 'title' in opts ? opts.title : "";
    let onGenerateTitle = opts && 'onGenerateTitle' in opts ? opts.onGenerateTitle : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let darkTheme = opts && 'darkTheme' in opts ? opts.darkTheme : null;
    let useInheritedMediaQuery = opts && 'useInheritedMediaQuery' in opts ? opts.useInheritedMediaQuery : false;
    let highContrastTheme = opts && 'highContrastTheme' in opts ? opts.highContrastTheme : null;
    let highContrastDarkTheme = opts && 'highContrastDarkTheme' in opts ? opts.highContrastDarkTheme : null;
    let themeMode = opts && 'themeMode' in opts ? opts.themeMode : C[50] || CT.C50;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let localizationsDelegates = opts && 'localizationsDelegates' in opts ? opts.localizationsDelegates : null;
    let localeListResolutionCallback = opts && 'localeListResolutionCallback' in opts ? opts.localeListResolutionCallback : null;
    let localeResolutionCallback = opts && 'localeResolutionCallback' in opts ? opts.localeResolutionCallback : null;
    let supportedLocales = opts && 'supportedLocales' in opts ? opts.supportedLocales : C[48] || CT.C48;
    let debugShowMaterialGrid = opts && 'debugShowMaterialGrid' in opts ? opts.debugShowMaterialGrid : false;
    let showPerformanceOverlay = opts && 'showPerformanceOverlay' in opts ? opts.showPerformanceOverlay : false;
    let checkerboardRasterCacheImages = opts && 'checkerboardRasterCacheImages' in opts ? opts.checkerboardRasterCacheImages : false;
    let checkerboardOffscreenLayers = opts && 'checkerboardOffscreenLayers' in opts ? opts.checkerboardOffscreenLayers : false;
    let showSemanticsDebugger = opts && 'showSemanticsDebugger' in opts ? opts.showSemanticsDebugger : false;
    let debugShowCheckedModeBanner = opts && 'debugShowCheckedModeBanner' in opts ? opts.debugShowCheckedModeBanner : true;
    let shortcuts = opts && 'shortcuts' in opts ? opts.shortcuts : null;
    let scrollBehavior = opts && 'scrollBehavior' in opts ? opts.scrollBehavior : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
    let translationsKeys = opts && 'translationsKeys' in opts ? opts.translationsKeys : null;
    let translations = opts && 'translations' in opts ? opts.translations : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let fallbackLocale = opts && 'fallbackLocale' in opts ? opts.fallbackLocale : null;
    let routingCallback = opts && 'routingCallback' in opts ? opts.routingCallback : null;
    let defaultTransition = opts && 'defaultTransition' in opts ? opts.defaultTransition : null;
    let opaqueRoute = opts && 'opaqueRoute' in opts ? opts.opaqueRoute : null;
    let onInit = opts && 'onInit' in opts ? opts.onInit : null;
    let onReady = opts && 'onReady' in opts ? opts.onReady : null;
    let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
    let enableLog = opts && 'enableLog' in opts ? opts.enableLog : true;
    let logWriterCallback = opts && 'logWriterCallback' in opts ? opts.logWriterCallback : null;
    let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
    let smartManagement = opts && 'smartManagement' in opts ? opts.smartManagement : C[8] || CT.C8;
    let initialBinding = opts && 'initialBinding' in opts ? opts.initialBinding : null;
    let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
    let defaultGlobalState = opts && 'defaultGlobalState' in opts ? opts.defaultGlobalState : null;
    let getPages = opts && 'getPages' in opts ? opts.getPages : null;
    let navigatorObservers = opts && 'navigatorObservers' in opts ? opts.navigatorObservers : null;
    let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
    this[S$.routeInformationProvider$1] = routeInformationProvider;
    this[S$.scaffoldMessengerKey] = scaffoldMessengerKey;
    this[S$.backButtonDispatcher$1] = backButtonDispatcher;
    this[S$.builder$4] = builder;
    this[S$.title$1] = title;
    this[S$.onGenerateTitle$1] = onGenerateTitle;
    this[S$.color$1] = color;
    this[S$.theme$2] = theme;
    this[S$.darkTheme] = darkTheme;
    this[S$.useInheritedMediaQuery$1] = useInheritedMediaQuery;
    this[S$.highContrastTheme$1] = highContrastTheme;
    this[S$.highContrastDarkTheme$1] = highContrastDarkTheme;
    this[S$.themeMode] = themeMode;
    this[S$.locale$1] = locale;
    this[S$.localizationsDelegates$1] = localizationsDelegates;
    this[S$.localeListResolutionCallback$1] = localeListResolutionCallback;
    this[S$.localeResolutionCallback$1] = localeResolutionCallback;
    this[S$.supportedLocales$1] = supportedLocales;
    this[S$.debugShowMaterialGrid] = debugShowMaterialGrid;
    this[S$.showPerformanceOverlay$1] = showPerformanceOverlay;
    this[S$.checkerboardRasterCacheImages$1] = checkerboardRasterCacheImages;
    this[S$.checkerboardOffscreenLayers$1] = checkerboardOffscreenLayers;
    this[S$.showSemanticsDebugger$1] = showSemanticsDebugger;
    this[S$.debugShowCheckedModeBanner$1] = debugShowCheckedModeBanner;
    this[S$.shortcuts$1] = shortcuts;
    this[S$.scrollBehavior] = scrollBehavior;
    this[S$.actions$1] = actions;
    this[S$.customTransition$1] = customTransition;
    this[S$.translationsKeys$1] = translationsKeys;
    this[S$.translations$1] = translations;
    this[S$.textDirection$1] = textDirection;
    this[S$.fallbackLocale$1] = fallbackLocale;
    this[S$.routingCallback$1] = routingCallback;
    this[S$.defaultTransition$1] = defaultTransition;
    this[S$.opaqueRoute$1] = opaqueRoute;
    this[S$.onInit$1] = onInit;
    this[S$.onReady$1] = onReady;
    this[S$.onDispose$1] = onDispose;
    this[S$.enableLog$1] = enableLog;
    this[S$.logWriterCallback$1] = logWriterCallback;
    this[S$.popGesture$1] = popGesture;
    this[S$.smartManagement$2] = smartManagement;
    this[S$.initialBinding$1] = initialBinding;
    this[S$.transitionDuration$1] = transitionDuration;
    this[S$.defaultGlobalState$1] = defaultGlobalState;
    this[S$.getPages$1] = getPages;
    this[S$.navigatorObservers$2] = navigatorObservers;
    this[S$.unknownRoute$1] = unknownRoute;
    this[S$.routerDelegate$3] = (t184 = routerDelegate, t184 == null ? routerDelegate = extension_navigation['NavTwoExt|createDelegate'](get_main.Get, {notFoundRoute: unknownRoute}) : t184);
    this[S$.routeInformationParser$2] = (t184$ = routeInformationParser, t184$ == null ? routeInformationParser = extension_navigation['NavTwoExt|createInformationParser'](get_main.Get, {initialRoute: (t185$ = (t185 = getPages, t185 == null ? null : t185[S$.$first].name), t185$ == null ? "/" : t185$)}) : t184$);
    this[S$.navigatorKey$1] = null;
    this[S$.onGenerateRoute$1] = null;
    this[S$.home$1] = null;
    this[S$.onGenerateInitialRoutes$1] = null;
    this[S$.onUnknownRoute$1] = null;
    this[S$.routes$1] = null;
    this[S$.initialRoute$2] = null;
    get_material_app.GetMaterialApp.__proto__.new.call(this, {key: key});
    get_main.Get.routerDelegate = routerDelegate;
    get_main.Get.routeInformationParser = routeInformationParser;
  }).prototype = get_material_app.GetMaterialApp.prototype;
  dart.addTypeTests(get_material_app.GetMaterialApp);
  dart.addTypeCaches(get_material_app.GetMaterialApp);
  dart.setMethodSignature(get_material_app.GetMaterialApp, () => ({
    __proto__: dart.getMethods(get_material_app.GetMaterialApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    defaultBuilder: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]),
    generator: dart.fnType(navigator.Route, [navigator.RouteSettings]),
    initialRoutesGenerate: dart.fnType(core.List$(navigator.Route), [core.String])
  }));
  dart.setLibraryUri(get_material_app.GetMaterialApp, I[26]);
  dart.setFieldSignature(get_material_app.GetMaterialApp, () => ({
    __proto__: dart.getFields(get_material_app.GetMaterialApp.__proto__),
    navigatorKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(navigator.NavigatorState))),
    scaffoldMessengerKey: dart.finalFieldType(dart.nullable(framework.GlobalKey$(scaffold.ScaffoldMessengerState))),
    home: dart.finalFieldType(dart.nullable(framework.Widget)),
    routes: dart.finalFieldType(dart.nullable(core.Map$(core.String, dart.fnType(framework.Widget, [framework.BuildContext])))),
    initialRoute: dart.finalFieldType(dart.nullable(core.String)),
    onGenerateRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator.Route), [navigator.RouteSettings]))),
    onGenerateInitialRoutes: dart.finalFieldType(dart.nullable(dart.fnType(core.List$(navigator.Route), [core.String]))),
    onUnknownRoute: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(navigator.Route), [navigator.RouteSettings]))),
    navigatorObservers: dart.finalFieldType(dart.nullable(core.List$(navigator.NavigatorObserver))),
    builder: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(framework.Widget)]))),
    title: dart.finalFieldType(core.String),
    onGenerateTitle: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [framework.BuildContext]))),
    theme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    darkTheme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    themeMode: dart.finalFieldType(app.ThemeMode),
    customTransition: dart.finalFieldType(dart.nullable(custom_transition.CustomTransition)),
    color: dart.finalFieldType(dart.nullable(ui.Color)),
    translationsKeys: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.Map$(core.String, core.String)))),
    translations: dart.finalFieldType(dart.nullable(internacionalization.Translations)),
    textDirection: dart.finalFieldType(dart.nullable(ui.TextDirection)),
    locale: dart.finalFieldType(dart.nullable(ui.Locale)),
    fallbackLocale: dart.finalFieldType(dart.nullable(ui.Locale)),
    localizationsDelegates: dart.finalFieldType(dart.nullable(core.Iterable$(localizations.LocalizationsDelegate))),
    localeListResolutionCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(ui.Locale), [dart.nullable(core.List$(ui.Locale)), core.Iterable$(ui.Locale)]))),
    localeResolutionCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(ui.Locale), [dart.nullable(ui.Locale), core.Iterable$(ui.Locale)]))),
    supportedLocales: dart.finalFieldType(core.Iterable$(ui.Locale)),
    showPerformanceOverlay: dart.finalFieldType(core.bool),
    checkerboardRasterCacheImages: dart.finalFieldType(core.bool),
    checkerboardOffscreenLayers: dart.finalFieldType(core.bool),
    showSemanticsDebugger: dart.finalFieldType(core.bool),
    debugShowCheckedModeBanner: dart.finalFieldType(core.bool),
    shortcuts: dart.finalFieldType(dart.nullable(core.Map$(shortcuts.LogicalKeySet, actions.Intent))),
    scrollBehavior: dart.finalFieldType(dart.nullable(scroll_configuration.ScrollBehavior)),
    highContrastTheme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    highContrastDarkTheme: dart.finalFieldType(dart.nullable(theme_data.ThemeData)),
    actions: dart.finalFieldType(dart.nullable(core.Map$(core.Type, actions.Action$(actions.Intent)))),
    debugShowMaterialGrid: dart.finalFieldType(core.bool),
    routingCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(route_observer.Routing)]))),
    defaultTransition: dart.finalFieldType(dart.nullable(transitions_type.Transition)),
    opaqueRoute: dart.finalFieldType(dart.nullable(core.bool)),
    onInit: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onReady: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    onDispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    enableLog: dart.finalFieldType(dart.nullable(core.bool)),
    logWriterCallback: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String], {isError: core.bool}, {}))),
    popGesture: dart.finalFieldType(dart.nullable(core.bool)),
    smartManagement: dart.finalFieldType(smart_management.SmartManagement),
    initialBinding: dart.finalFieldType(dart.nullable(bindings_interface.Bindings)),
    transitionDuration: dart.finalFieldType(dart.nullable(core.Duration)),
    defaultGlobalState: dart.finalFieldType(dart.nullable(core.bool)),
    getPages: dart.finalFieldType(dart.nullable(core.List$(get_route.GetPage))),
    unknownRoute: dart.finalFieldType(dart.nullable(get_route.GetPage)),
    routeInformationProvider: dart.finalFieldType(dart.nullable(router.RouteInformationProvider)),
    routeInformationParser: dart.finalFieldType(dart.nullable(router.RouteInformationParser$(core.Object))),
    routerDelegate: dart.finalFieldType(dart.nullable(router.RouterDelegate$(core.Object))),
    backButtonDispatcher: dart.finalFieldType(dart.nullable(router.BackButtonDispatcher)),
    useInheritedMediaQuery: dart.finalFieldType(core.bool)
  }));
  internacionalization.Translations = class Translations extends core.Object {};
  (internacionalization.Translations.new = function() {
    ;
  }).prototype = internacionalization.Translations.prototype;
  dart.addTypeTests(internacionalization.Translations);
  dart.addTypeCaches(internacionalization.Translations);
  dart.setLibraryUri(internacionalization.Translations, I[27]);
  dart.defineLazy(internacionalization, {
    /*internacionalization.rtlLanguages*/get rtlLanguages() {
      return C[51] || CT.C51;
    }
  }, false);
  rx_disposable.DisposableInterface = class DisposableInterface extends lifecycle.GetLifeCycle {
    onInit() {
      super.onInit();
      extension_navigation['GetNavigation|get#engine'](get_main.Get).addPostFrameCallback(dart.fn(_ => this.onReady(), T$.DurationTovoid()));
    }
    onReady() {
      super.onReady();
    }
    onClose() {
      super.onClose();
    }
  };
  (rx_disposable.DisposableInterface.new = function() {
    rx_disposable.DisposableInterface.__proto__.new.call(this);
    ;
  }).prototype = rx_disposable.DisposableInterface.prototype;
  dart.addTypeTests(rx_disposable.DisposableInterface);
  dart.addTypeCaches(rx_disposable.DisposableInterface);
  dart.setLibraryUri(rx_disposable.DisposableInterface, I[28]);
  const DisposableInterface_ListenableMixin$36 = class DisposableInterface_ListenableMixin extends rx_disposable.DisposableInterface {};
  (DisposableInterface_ListenableMixin$36.new = function() {
    DisposableInterface_ListenableMixin$36.__proto__.new.call(this);
  }).prototype = DisposableInterface_ListenableMixin$36.prototype;
  dart.applyMixin(DisposableInterface_ListenableMixin$36, list_notifier.ListenableMixin);
  const DisposableInterface_ListNotifierMixin$36 = class DisposableInterface_ListNotifierMixin extends DisposableInterface_ListenableMixin$36 {};
  (DisposableInterface_ListNotifierMixin$36.new = function() {
    list_notifier.ListNotifierMixin[dart.mixinNew].call(this);
    DisposableInterface_ListNotifierMixin$36.__proto__.new.call(this);
  }).prototype = DisposableInterface_ListNotifierMixin$36.prototype;
  dart.applyMixin(DisposableInterface_ListNotifierMixin$36, list_notifier.ListNotifierMixin);
  get_controllers.GetxController = class GetxController extends DisposableInterface_ListNotifierMixin$36 {
    update(ids = null, condition = true) {
      if (!condition) {
        return;
      }
      if (ids == null) {
        this.refresh();
      } else {
        for (let id of ids) {
          this.refreshGroup(id);
        }
      }
    }
  };
  (get_controllers.GetxController.new = function() {
    get_controllers.GetxController.__proto__.new.call(this);
    ;
  }).prototype = get_controllers.GetxController.prototype;
  dart.addTypeTests(get_controllers.GetxController);
  dart.addTypeCaches(get_controllers.GetxController);
  dart.setMethodSignature(get_controllers.GetxController, () => ({
    __proto__: dart.getMethods(get_controllers.GetxController.__proto__),
    update: dart.fnType(dart.void, [], [dart.nullable(core.List$(core.Object)), core.bool])
  }));
  dart.setLibraryUri(get_controllers.GetxController, I[29]);
  const GetxController_WidgetsBindingObserver$36 = class GetxController_WidgetsBindingObserver extends get_controllers.GetxController {};
  (GetxController_WidgetsBindingObserver$36.new = function() {
    GetxController_WidgetsBindingObserver$36.__proto__.new.call(this);
  }).prototype = GetxController_WidgetsBindingObserver$36.prototype;
  dart.applyMixin(GetxController_WidgetsBindingObserver$36, binding.WidgetsBindingObserver);
  get_controllers.FullLifeCycleController = class FullLifeCycleController extends GetxController_WidgetsBindingObserver$36 {};
  (get_controllers.FullLifeCycleController.new = function() {
    get_controllers.FullLifeCycleController.__proto__.new.call(this);
    ;
  }).prototype = get_controllers.FullLifeCycleController.prototype;
  dart.addTypeTests(get_controllers.FullLifeCycleController);
  dart.addTypeCaches(get_controllers.FullLifeCycleController);
  dart.setLibraryUri(get_controllers.FullLifeCycleController, I[29]);
  get_controllers.FullLifeCycleMixin = class FullLifeCycleMixin extends get_controllers.FullLifeCycleController {};
  get_controllers.FullLifeCycleMixin[dart.mixinOn] = FullLifeCycleController => class FullLifeCycleMixin extends FullLifeCycleController {
    onInit() {
      let t184;
      super.onInit();
      t184 = get_core.ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance);
      t184 == null ? null : t184.addObserver(this);
    }
    onClose() {
      let t184;
      t184 = get_core.ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance);
      t184 == null ? null : t184.removeObserver(this);
      super.onClose();
    }
    didChangeAppLifecycleState(state) {
      switch (state) {
        case C[52] || CT.C52:
          {
            this.onResumed();
            break;
          }
        case C[53] || CT.C53:
          {
            this.onInactive();
            break;
          }
        case C[54] || CT.C54:
          {
            this.onPaused();
            break;
          }
        case C[55] || CT.C55:
          {
            this.onDetached();
            break;
          }
      }
    }
  };
  dart.addTypeTests(get_controllers.FullLifeCycleMixin);
  dart.addTypeCaches(get_controllers.FullLifeCycleMixin);
  get_controllers.FullLifeCycleMixin[dart.implements] = () => [get_controllers.FullLifeCycleController];
  dart.setLibraryUri(get_controllers.FullLifeCycleMixin, I[29]);
  const _is_StateMixin_default = Symbol('_is_StateMixin_default');
  rx_notifier.StateMixin$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$FutureOfT = () => (__t$FutureOfT = dart.constFn(async.Future$(T)))();
    var __t$VoidToFutureOfT = () => (__t$VoidToFutureOfT = dart.constFn(dart.fnType(__t$FutureOfT(), [])))();
    var __t$VoidToFn = () => (__t$VoidToFn = dart.constFn(dart.fnType(__t$VoidToFutureOfT(), [])))();
    var __t$TToNull = () => (__t$TToNull = dart.constFn(dart.fnType(core.Null, [T])))();
    class StateMixin extends list_notifier.ListNotifierMixin {}
    StateMixin[dart.mixinOn] = ListNotifierMixin => class StateMixin extends ListNotifierMixin {
      get [S$._value$2]() {
        return this[S$._value$1];
      }
      set [S$._value$2](value) {
        this[S$._value$1] = value;
      }
      get [S$._status$1]() {
        return this[S$._status];
      }
      set [S$._status$1](value) {
        this[S$._status] = value;
      }
      [S$._isNullOrEmpty](val) {
        if (val == null) return true;
        let result = false;
        if (core.Iterable.is(val)) {
          result = val[S$.$isEmpty];
        } else if (typeof val == 'string') {
          result = val[S$.$isEmpty];
        } else if (core.Map.is(val)) {
          result = val[S$.$isEmpty];
        }
        return result;
      }
      [S$._fillEmptyStatus]() {
        this[S$._status$1] = this[S$._isNullOrEmpty](this[S$._value$2]) ? rx_notifier.RxStatus.loading() : rx_notifier.RxStatus.success();
      }
      get status() {
        let t184;
        this.notifyChildrens();
        t184 = this[S$._status$1];
        return t184 == null ? this[S$._status$1] = this[S$._status$1] = rx_notifier.RxStatus.loading() : t184;
      }
      get state() {
        return this.value;
      }
      get value() {
        this.notifyChildrens();
        return this[S$._value$2];
      }
      set value(newValue) {
        __t$TN().as(newValue);
        if (dart.equals(this[S$._value$2], newValue)) return;
        this[S$._value$2] = newValue;
        this.refresh();
      }
      change(newState, opts) {
        __t$TN().as(newState);
        let status = opts && 'status' in opts ? opts.status : null;
        let _canUpdate = false;
        if (status != null) {
          this[S$._status$1] = status;
          _canUpdate = true;
        }
        if (!dart.equals(newState, this[S$._value$2])) {
          this[S$._value$2] = newState;
          _canUpdate = true;
        }
        if (_canUpdate) {
          this.refresh();
        }
      }
      append(body, opts) {
        __t$VoidToFn().as(body);
        let errorMessage = opts && 'errorMessage' in opts ? opts.errorMessage : null;
        let compute = body();
        compute().then(core.Null, dart.fn(newValue => {
          this.change(newValue, {status: rx_notifier.RxStatus.success()});
        }, __t$TToNull()), {onError: dart.fn(err => {
            let t184;
            this.change(this.state, {status: rx_notifier.RxStatus.error((t184 = errorMessage, t184 == null ? dart.toString(err) : t184))});
          }, T$.dynamicToNull())});
      }
    };
    (StateMixin[dart.mixinNew] = function() {
      this[S$._value$1] = null;
      this[S$._status] = null;
    }).prototype = StateMixin.prototype;
    dart.addTypeTests(StateMixin);
    StateMixin.prototype[_is_StateMixin_default] = true;
    dart.addTypeCaches(StateMixin);
    StateMixin[dart.implements] = () => [list_notifier.ListNotifierMixin];
    dart.setMethodSignature(StateMixin, () => ({
      __proto__: dart.getMethods(StateMixin.__proto__),
      [S$._isNullOrEmpty]: dart.fnType(core.bool, [dart.dynamic]),
      [S$._fillEmptyStatus]: dart.fnType(dart.void, []),
      change: dart.fnType(dart.void, [dart.nullable(core.Object)], {status: dart.nullable(rx_notifier.RxStatus)}, {}),
      append: dart.fnType(dart.void, [dart.nullable(core.Object)], {errorMessage: dart.nullable(core.String)}, {})
    }));
    dart.setGetterSignature(StateMixin, () => ({
      __proto__: dart.getGetters(StateMixin.__proto__),
      status: rx_notifier.RxStatus,
      state: dart.nullable(T),
      value: dart.nullable(T)
    }));
    dart.setSetterSignature(StateMixin, () => ({
      __proto__: dart.getSetters(StateMixin.__proto__),
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(StateMixin, I[30]);
    dart.setFieldSignature(StateMixin, () => ({
      __proto__: dart.getFields(StateMixin.__proto__),
      [S$._value$2]: dart.fieldType(dart.nullable(T)),
      [S$._status$1]: dart.fieldType(dart.nullable(rx_notifier.RxStatus))
    }));
    return StateMixin;
  });
  rx_notifier.StateMixin = rx_notifier.StateMixin$();
  dart.addTypeTests(rx_notifier.StateMixin, _is_StateMixin_default);
  const _is_SuperController_default = Symbol('_is_SuperController_default');
  get_controllers.SuperController$ = dart.generic(T => {
    const FullLifeCycleController_FullLifeCycleMixin$36 = class FullLifeCycleController_FullLifeCycleMixin extends get_controllers.FullLifeCycleController {};
    (FullLifeCycleController_FullLifeCycleMixin$36.new = function() {
      FullLifeCycleController_FullLifeCycleMixin$36.__proto__.new.call(this);
    }).prototype = FullLifeCycleController_FullLifeCycleMixin$36.prototype;
    dart.applyMixin(FullLifeCycleController_FullLifeCycleMixin$36, get_controllers.FullLifeCycleMixin);
    const FullLifeCycleController_StateMixin$36 = class FullLifeCycleController_StateMixin extends FullLifeCycleController_FullLifeCycleMixin$36 {};
    (FullLifeCycleController_StateMixin$36.new = function() {
      rx_notifier.StateMixin$(T)[dart.mixinNew].call(this);
      FullLifeCycleController_StateMixin$36.__proto__.new.call(this);
    }).prototype = FullLifeCycleController_StateMixin$36.prototype;
    dart.applyMixin(FullLifeCycleController_StateMixin$36, rx_notifier.StateMixin$(T));
    class SuperController extends FullLifeCycleController_StateMixin$36 {}
    (SuperController.new = function() {
      SuperController.__proto__.new.call(this);
      ;
    }).prototype = SuperController.prototype;
    dart.addTypeTests(SuperController);
    SuperController.prototype[_is_SuperController_default] = true;
    dart.addTypeCaches(SuperController);
    dart.setLibraryUri(SuperController, I[29]);
    return SuperController;
  });
  get_controllers.SuperController = get_controllers.SuperController$();
  dart.addTypeTests(get_controllers.SuperController, _is_SuperController_default);
  root_controller.GetMaterialController = class GetMaterialController extends get_controllers.SuperController {
    get testMode() {
      return this[S$.testMode];
    }
    set testMode(value) {
      this[S$.testMode] = value;
    }
    get unikey() {
      return this[S$.unikey];
    }
    set unikey(value) {
      this[S$.unikey] = value;
    }
    get theme() {
      return this[S$.theme$3];
    }
    set theme(value) {
      this[S$.theme$3] = value;
    }
    get darkTheme() {
      return this[S$.darkTheme$1];
    }
    set darkTheme(value) {
      this[S$.darkTheme$1] = value;
    }
    get themeMode() {
      return this[S$.themeMode$1];
    }
    set themeMode(value) {
      this[S$.themeMode$1] = value;
    }
    get scaffoldMessengerKey() {
      return this[S$.scaffoldMessengerKey$1];
    }
    set scaffoldMessengerKey(value) {
      super.scaffoldMessengerKey = value;
    }
    get defaultPopGesture() {
      return this[S$.defaultPopGesture];
    }
    set defaultPopGesture(value) {
      this[S$.defaultPopGesture] = value;
    }
    get defaultOpaqueRoute() {
      return this[S$.defaultOpaqueRoute];
    }
    set defaultOpaqueRoute(value) {
      this[S$.defaultOpaqueRoute] = value;
    }
    get defaultTransition() {
      return this[S$.defaultTransition$2];
    }
    set defaultTransition(value) {
      this[S$.defaultTransition$2] = value;
    }
    get defaultTransitionDuration() {
      return this[S$.defaultTransitionDuration];
    }
    set defaultTransitionDuration(value) {
      this[S$.defaultTransitionDuration] = value;
    }
    get defaultTransitionCurve() {
      return this[S$.defaultTransitionCurve];
    }
    set defaultTransitionCurve(value) {
      this[S$.defaultTransitionCurve] = value;
    }
    get defaultDialogTransitionCurve() {
      return this[S$.defaultDialogTransitionCurve];
    }
    set defaultDialogTransitionCurve(value) {
      this[S$.defaultDialogTransitionCurve] = value;
    }
    get defaultDialogTransitionDuration() {
      return this[S$.defaultDialogTransitionDuration];
    }
    set defaultDialogTransitionDuration(value) {
      this[S$.defaultDialogTransitionDuration] = value;
    }
    get routing() {
      return this[S$.routing];
    }
    set routing(value) {
      super.routing = value;
    }
    get parameters() {
      return this[S$.parameters];
    }
    set parameters(value) {
      this[S$.parameters] = value;
    }
    get customTransition() {
      return this[S$.customTransition$2];
    }
    set customTransition(value) {
      this[S$.customTransition$2] = value;
    }
    get keys() {
      return this[S$.keys];
    }
    set keys(value) {
      this[S$.keys] = value;
    }
    get key() {
      return this[S$._key];
    }
    addKey(newKey) {
      this[S$._key] = newKey;
      return this.key;
    }
    didChangeLocales(locales) {
      event_loop_extensions['LoopEventsExt|asap'](core.Null, get_main.Get, dart.fn(() => {
        let locale = extension_navigation['GetNavigation|get#deviceLocale'](get_main.Get);
        if (locale != null) {
          extension_navigation['GetNavigation|updateLocale'](get_main.Get, locale);
        }
      }, T$.VoidToNull()));
    }
    onDetached() {
    }
    onInactive() {
    }
    onPaused() {
    }
    onResumed() {
    }
    restartApp() {
      this.unikey = new key.UniqueKey.new();
      this.update();
    }
    setTheme(value) {
      if (this.darkTheme == null) {
        this.theme = value;
      } else {
        if (value.brightness === ui.Brightness.light) {
          this.theme = value;
        } else {
          this.darkTheme = value;
        }
      }
      this.update();
    }
    setThemeMode(value) {
      this.themeMode = value;
      this.update();
    }
    static ['_#new#tearOff']() {
      return new root_controller.GetMaterialController.new();
    }
  };
  (root_controller.GetMaterialController.new = function() {
    this[S$.testMode] = false;
    this[S$.unikey] = null;
    this[S$.theme$3] = null;
    this[S$.darkTheme$1] = null;
    this[S$.themeMode$1] = null;
    this[S$.scaffoldMessengerKey$1] = T$.GlobalKeyOfScaffoldMessengerState().new();
    this[S$.defaultPopGesture] = platform$.GetPlatform.isIOS;
    this[S$.defaultOpaqueRoute] = true;
    this[S$.defaultTransition$2] = null;
    this[S$.defaultTransitionDuration] = new core.Duration.new({milliseconds: 300});
    this[S$.defaultTransitionCurve] = curves.Curves.easeOutQuad;
    this[S$.defaultDialogTransitionCurve] = curves.Curves.easeOutQuad;
    this[S$.defaultDialogTransitionDuration] = new core.Duration.new({milliseconds: 300});
    this[S$.routing] = new route_observer.Routing.new();
    this[S$.parameters] = new (T$.IdentityMapOfString$StringN()).new();
    this[S$.customTransition$2] = null;
    this[S$._key] = T$.GlobalKeyOfNavigatorState().new({debugLabel: "Key Created by default"});
    this[S$.keys] = new (T$.LinkedMapOfdynamic$GlobalKeyOfNavigatorState()).new();
    root_controller.GetMaterialController.__proto__.new.call(this);
    ;
  }).prototype = root_controller.GetMaterialController.prototype;
  dart.addTypeTests(root_controller.GetMaterialController);
  dart.addTypeCaches(root_controller.GetMaterialController);
  dart.setMethodSignature(root_controller.GetMaterialController, () => ({
    __proto__: dart.getMethods(root_controller.GetMaterialController.__proto__),
    addKey: dart.fnType(dart.nullable(framework.GlobalKey$(navigator.NavigatorState)), [framework.GlobalKey$(navigator.NavigatorState)]),
    onDetached: dart.fnType(dart.void, []),
    onInactive: dart.fnType(dart.void, []),
    onPaused: dart.fnType(dart.void, []),
    onResumed: dart.fnType(dart.void, []),
    restartApp: dart.fnType(dart.void, []),
    setTheme: dart.fnType(dart.void, [theme_data.ThemeData]),
    setThemeMode: dart.fnType(dart.void, [app.ThemeMode])
  }));
  dart.setGetterSignature(root_controller.GetMaterialController, () => ({
    __proto__: dart.getGetters(root_controller.GetMaterialController.__proto__),
    key: framework.GlobalKey$(navigator.NavigatorState)
  }));
  dart.setLibraryUri(root_controller.GetMaterialController, I[31]);
  dart.setFieldSignature(root_controller.GetMaterialController, () => ({
    __proto__: dart.getFields(root_controller.GetMaterialController.__proto__),
    testMode: dart.fieldType(core.bool),
    unikey: dart.fieldType(dart.nullable(key.Key)),
    theme: dart.fieldType(dart.nullable(theme_data.ThemeData)),
    darkTheme: dart.fieldType(dart.nullable(theme_data.ThemeData)),
    themeMode: dart.fieldType(dart.nullable(app.ThemeMode)),
    scaffoldMessengerKey: dart.finalFieldType(framework.GlobalKey$(scaffold.ScaffoldMessengerState)),
    defaultPopGesture: dart.fieldType(core.bool),
    defaultOpaqueRoute: dart.fieldType(core.bool),
    defaultTransition: dart.fieldType(dart.nullable(transitions_type.Transition)),
    defaultTransitionDuration: dart.fieldType(core.Duration),
    defaultTransitionCurve: dart.fieldType(curves.Curve),
    defaultDialogTransitionCurve: dart.fieldType(curves.Curve),
    defaultDialogTransitionDuration: dart.fieldType(core.Duration),
    routing: dart.finalFieldType(route_observer.Routing),
    parameters: dart.fieldType(core.Map$(core.String, dart.nullable(core.String))),
    customTransition: dart.fieldType(dart.nullable(custom_transition.CustomTransition)),
    [S$._key]: dart.fieldType(framework.GlobalKey$(navigator.NavigatorState)),
    keys: dart.fieldType(core.Map$(dart.dynamic, framework.GlobalKey$(navigator.NavigatorState)))
  }));
  custom_transition.CustomTransition = class CustomTransition extends core.Object {};
  (custom_transition.CustomTransition.new = function() {
    ;
  }).prototype = custom_transition.CustomTransition.prototype;
  dart.addTypeTests(custom_transition.CustomTransition);
  dart.addTypeCaches(custom_transition.CustomTransition);
  dart.setLibraryUri(custom_transition.CustomTransition, I[32]);
  const _is_PageRouteReportMixin_default = Symbol('_is_PageRouteReportMixin_default');
  default_route.PageRouteReportMixin$ = dart.generic(T => {
    class PageRouteReportMixin extends navigator.Route$(T) {}
    PageRouteReportMixin[dart.mixinOn] = Route => class PageRouteReportMixin extends Route {
      install() {
        super.install();
        router_report.RouterReportManager.reportCurrentRoute(this);
      }
      dispose() {
        super.dispose();
        router_report.RouterReportManager.reportRouteDispose(this);
      }
    };
    dart.addTypeTests(PageRouteReportMixin);
    PageRouteReportMixin.prototype[_is_PageRouteReportMixin_default] = true;
    dart.addTypeCaches(PageRouteReportMixin);
    PageRouteReportMixin[dart.implements] = () => [navigator.Route$(T)];
    dart.setLibraryUri(PageRouteReportMixin, I[33]);
    return PageRouteReportMixin;
  });
  default_route.PageRouteReportMixin = default_route.PageRouteReportMixin$();
  dart.addTypeTests(default_route.PageRouteReportMixin, _is_PageRouteReportMixin_default);
  const _is_GetPageRouteTransitionMixin_default = Symbol('_is_GetPageRouteTransitionMixin_default');
  get_transition_mixin.GetPageRouteTransitionMixin$ = dart.generic(T => {
    class GetPageRouteTransitionMixin extends pages.PageRoute$(T) {
      static buildPageTransitions(T, rawRoute, context, animation, secondaryAnimation, child) {
        let t185, t185$, t185$0, t185$1, t185$2, t185$3, t185$4, t185$5, t185$6, t185$7, t185$8, t185$9, t185$10, t185$11, t185$12, t185$13, t185$14, t185$15, t185$16, t185$17, t185$18, t185$19, t185$20, t185$21, t185$22, t185$23, t185$24, t185$25, t185$26, t185$27, t185$28, t185$29, t185$30, t185$31, t185$32, t185$33, t185$34, t185$35, t185$36, t185$37, t185$38, t185$39, t185$40, t185$41, t185$42, t185$43, t185$44, t185$45, t185$46, t185$47, t185$48, t185$49;
        let route = default_route.GetPageRoute$(T).as(rawRoute);
        let linearTransition = get_transition_mixin.GetPageRouteTransitionMixin.isPopGestureInProgress(route);
        let finalCurve = (t185 = route.curve, t185 == null ? extension_navigation['GetNavigation|get#defaultTransitionCurve'](get_main.Get) : t185);
        let hasCurve = route.curve != null;
        if (route.fullscreenDialog && route.transition == null) {
          return new route$.CupertinoFullscreenDialogTransition.new({primaryRouteAnimation: hasCurve ? new animations.CurvedAnimation.new({parent: animation, curve: finalCurve}) : animation, secondaryRouteAnimation: secondaryAnimation, child: child, linearTransition: linearTransition});
        } else {
          if (route.customTransition != null) {
            return dart.nullCheck(route.customTransition).buildTransition(context, finalCurve, route.alignment, animation, secondaryAnimation, dart.test((t185$ = route.popGesture, t185$ == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$1 = (t185$0 = route.gestureWidth, t185$0 == null ? null : t185$0(context)), t185$1 == null ? 20 : t185$1), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
          }
          let iosAnimation = animation;
          animation = new animations.CurvedAnimation.new({parent: animation, curve: finalCurve});
          switch (t185$49 = route.transition, t185$49 == null ? extension_navigation['GetNavigation|get#defaultTransition'](get_main.Get) : t185$49) {
            case C[58] || CT.C58:
              {
                return new default_transitions.SlideLeftTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$2 = route.popGesture, t185$2 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$2)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$4 = (t185$3 = route.gestureWidth, t185$3 == null ? null : t185$3(context)), t185$4 == null ? 20 : t185$4), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[59] || CT.C59:
              {
                return new default_transitions.SlideDownTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$5 = route.popGesture, t185$5 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$5)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$7 = (t185$6 = route.gestureWidth, t185$6 == null ? null : t185$6(context)), t185$7 == null ? 20 : t185$7), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[60] || CT.C60:
              {
                return new default_transitions.SlideTopTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$8 = route.popGesture, t185$8 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$8)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$10 = (t185$9 = route.gestureWidth, t185$9 == null ? null : t185$9(context)), t185$10 == null ? 20 : t185$10), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[61] || CT.C61:
              {
                return dart.test((t185$11 = route.popGesture, t185$11 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$11)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$13 = (t185$12 = route.gestureWidth, t185$12 == null ? null : t185$12(context)), t185$13 == null ? 20 : t185$13), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child;
              }
            case C[62] || CT.C62:
              {
                return new default_transitions.SlideRightTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$14 = route.popGesture, t185$14 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$14)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$16 = (t185$15 = route.gestureWidth, t185$15 == null ? null : t185$15(context)), t185$16 == null ? 20 : t185$16), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[63] || CT.C63:
              {
                return new default_transitions.ZoomInTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$17 = route.popGesture, t185$17 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$17)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$19 = (t185$18 = route.gestureWidth, t185$18 == null ? null : t185$18(context)), t185$19 == null ? 20 : t185$19), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[64] || CT.C64:
              {
                return new default_transitions.FadeInTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$20 = route.popGesture, t185$20 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$20)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$22 = (t185$21 = route.gestureWidth, t185$21 == null ? null : t185$21(context)), t185$22 == null ? 20 : t185$22), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[65] || CT.C65:
              {
                return new default_transitions.RightToLeftFadeTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$23 = route.popGesture, t185$23 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$23)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$25 = (t185$24 = route.gestureWidth, t185$24 == null ? null : t185$24(context)), t185$25 == null ? 20 : t185$25), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[66] || CT.C66:
              {
                return new default_transitions.LeftToRightFadeTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$26 = route.popGesture, t185$26 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$26)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$28 = (t185$27 = route.gestureWidth, t185$27 == null ? null : t185$27(context)), t185$28 == null ? 20 : t185$28), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[67] || CT.C67:
              {
                return new route$.CupertinoPageTransition.new({primaryRouteAnimation: animation, secondaryRouteAnimation: secondaryAnimation, linearTransition: linearTransition, child: new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$30 = (t185$29 = route.gestureWidth, t185$29 == null ? null : t185$29(context)), t185$30 == null ? 20 : t185$30), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child})});
              }
            case C[68] || CT.C68:
              {
                return new default_transitions.SizeTransitions.new().buildTransitions(context, dart.nullCheck(route.curve), route.alignment, animation, secondaryAnimation, dart.test((t185$31 = route.popGesture, t185$31 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$31)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$33 = (t185$32 = route.gestureWidth, t185$32 == null ? null : t185$32(context)), t185$33 == null ? 20 : t185$33), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[69] || CT.C69:
              {
                return new page_transitions_theme.FadeUpwardsPageTransitionsBuilder.new().buildTransitions(T, route, context, animation, secondaryAnimation, dart.test((t185$34 = route.popGesture, t185$34 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$34)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$36 = (t185$35 = route.gestureWidth, t185$35 == null ? null : t185$35(context)), t185$36 == null ? 20 : t185$36), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[70] || CT.C70:
              {
                return new page_transitions_theme.ZoomPageTransitionsBuilder.new().buildTransitions(T, route, context, animation, secondaryAnimation, dart.test((t185$37 = route.popGesture, t185$37 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$37)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$39 = (t185$38 = route.gestureWidth, t185$38 == null ? null : t185$38(context)), t185$39 == null ? 20 : t185$39), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[71] || CT.C71:
              {
                return new page_transitions_theme.PageTransitionsTheme.new().buildTransitions(T, route, context, iosAnimation, secondaryAnimation, dart.test((t185$40 = route.popGesture, t185$40 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$40)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$42 = (t185$41 = route.gestureWidth, t185$41 == null ? null : t185$41(context)), t185$42 == null ? 20 : t185$42), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            case C[72] || CT.C72:
              {
                return new default_transitions.CircularRevealTransition.new().buildTransitions(context, route.curve, route.alignment, animation, secondaryAnimation, dart.test((t185$43 = route.popGesture, t185$43 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$43)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$45 = (t185$44 = route.gestureWidth, t185$44 == null ? null : t185$44(context)), t185$45 == null ? 20 : t185$45), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
            default:
              {
                if (extension_navigation['GetNavigation|get#customTransition'](get_main.Get) != null) {
                  return dart.nullCheck(extension_navigation['GetNavigation|get#customTransition'](get_main.Get)).buildTransition(context, route.curve, route.alignment, animation, secondaryAnimation, child);
                }
                return new page_transitions_theme.PageTransitionsTheme.new().buildTransitions(T, route, context, iosAnimation, secondaryAnimation, dart.test((t185$46 = route.popGesture, t185$46 == null ? extension_navigation['GetNavigation|get#defaultPopGesture'](get_main.Get) : t185$46)) ? new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({gestureWidth: (t185$48 = (t185$47 = route.gestureWidth, t185$47 == null ? null : t185$47(context)), t185$48 == null ? 20 : t185$48), enabledCallback: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route), T$.VoidTobool()), onStartPopGesture: dart.fn(() => get_transition_mixin.GetPageRouteTransitionMixin._startPopGesture(T, route), dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), [])), child: child}) : child);
              }
          }
        }
      }
      static isPopGestureInProgress(route) {
        return dart.nullCheck(route.navigator).userGestureInProgress;
      }
      static _isPopGestureEnabled(T, route) {
        if (route.isFirst) return false;
        if (route.willHandlePopInternally) return false;
        if (route.hasScopedWillPopCallback) return false;
        if (route.fullscreenDialog) return false;
        if (dart.nullCheck(route.animation).status !== animation.AnimationStatus.completed) return false;
        if (dart.nullCheck(route.secondaryAnimation).status !== animation.AnimationStatus.dismissed) {
          return false;
        }
        if (get_transition_mixin.GetPageRouteTransitionMixin.isPopGestureInProgress(route)) return false;
        return true;
      }
      static _startPopGesture(T, route) {
        if (!get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, route)) dart.assertFailed(null, I[34], 707, 12, "_isPopGestureEnabled(route)");
        return new (get_transition_mixin.CupertinoBackGestureController$(T)).new({navigator: dart.nullCheck(route.navigator), controller: dart.nullCheck(route.controller)});
      }
    }
    GetPageRouteTransitionMixin[dart.mixinOn] = PageRoute => class GetPageRouteTransitionMixin extends PageRoute {
      get barrierColor() {
        return null;
      }
      get barrierLabel() {
        return null;
      }
      get popGestureEnabled() {
        return get_transition_mixin.GetPageRouteTransitionMixin._isPopGestureEnabled(T, this);
      }
      get popGestureInProgress() {
        return get_transition_mixin.GetPageRouteTransitionMixin.isPopGestureInProgress(this);
      }
      get previousTitle() {
        if (!(this[S$._previousTitle] != null)) dart.assertFailed("Cannot read the previousTitle for a route that has not yet been installed", I[34], 276, 7, "_previousTitle != null");
        return dart.nullCheck(this[S$._previousTitle]);
      }
      get transitionDuration() {
        return C[57] || CT.C57;
      }
      buildPage(context, animation, secondaryAnimation) {
        let child = this.buildContent(context);
        let result = new basic.Semantics.new({scopesRoute: true, explicitChildNodes: true, child: child});
        return result;
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        return get_transition_mixin.GetPageRouteTransitionMixin.buildPageTransitions(T, this, context, animation, secondaryAnimation, child);
      }
      canTransitionTo(nextRoute) {
        return get_transition_mixin.GetPageRouteTransitionMixin.is(nextRoute) && !nextRoute.fullscreenDialog && nextRoute.showCupertinoParallax || route$.CupertinoRouteTransitionMixin.is(nextRoute) && !nextRoute.fullscreenDialog;
      }
      didChangePrevious(previousRoute) {
        let previousTitleString = route$.CupertinoRouteTransitionMixin.is(previousRoute) ? previousRoute.title : null;
        if (this[S$._previousTitle] == null) {
          this[S$._previousTitle] = new (T$.ValueNotifierOfStringN()).new(previousTitleString);
        } else {
          dart.nullCheck(this[S$._previousTitle]).value = previousTitleString;
        }
        super.didChangePrevious(previousRoute);
      }
    };
    (GetPageRouteTransitionMixin[dart.mixinNew] = function() {
      this[S$._previousTitle] = null;
    }).prototype = GetPageRouteTransitionMixin.prototype;
    dart.addTypeTests(GetPageRouteTransitionMixin);
    GetPageRouteTransitionMixin.prototype[_is_GetPageRouteTransitionMixin_default] = true;
    dart.addTypeCaches(GetPageRouteTransitionMixin);
    GetPageRouteTransitionMixin[dart.implements] = () => [pages.PageRoute$(T)];
    dart.setMethodSignature(GetPageRouteTransitionMixin, () => ({
      __proto__: dart.getMethods(GetPageRouteTransitionMixin.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setStaticMethodSignature(GetPageRouteTransitionMixin, () => ['buildPageTransitions', 'isPopGestureInProgress', '_isPopGestureEnabled', '_startPopGesture']);
    dart.setGetterSignature(GetPageRouteTransitionMixin, () => ({
      __proto__: dart.getGetters(GetPageRouteTransitionMixin.__proto__),
      barrierColor: dart.nullable(ui.Color),
      barrierLabel: dart.nullable(core.String),
      popGestureEnabled: core.bool,
      popGestureInProgress: core.bool,
      previousTitle: change_notifier.ValueListenable$(dart.nullable(core.String)),
      transitionDuration: core.Duration
    }));
    dart.setLibraryUri(GetPageRouteTransitionMixin, I[35]);
    dart.setFieldSignature(GetPageRouteTransitionMixin, () => ({
      __proto__: dart.getFields(GetPageRouteTransitionMixin.__proto__),
      [S$._previousTitle]: dart.fieldType(dart.nullable(change_notifier.ValueNotifier$(dart.nullable(core.String))))
    }));
    return GetPageRouteTransitionMixin;
  });
  get_transition_mixin.GetPageRouteTransitionMixin = get_transition_mixin.GetPageRouteTransitionMixin$();
  dart.addTypeTests(get_transition_mixin.GetPageRouteTransitionMixin, _is_GetPageRouteTransitionMixin_default);
  const _is_GetPageRoute_default = Symbol('_is_GetPageRoute_default');
  default_route.GetPageRoute$ = dart.generic(T => {
    const PageRoute_GetPageRouteTransitionMixin$36 = class PageRoute_GetPageRouteTransitionMixin extends pages.PageRoute$(T) {};
    (PageRoute_GetPageRouteTransitionMixin$36.new = function(opts) {
      get_transition_mixin.GetPageRouteTransitionMixin$(T)[dart.mixinNew].call(this);
      PageRoute_GetPageRouteTransitionMixin$36.__proto__.new.call(this, opts);
    }).prototype = PageRoute_GetPageRouteTransitionMixin$36.prototype;
    dart.applyMixin(PageRoute_GetPageRouteTransitionMixin$36, get_transition_mixin.GetPageRouteTransitionMixin$(T));
    const PageRoute_PageRouteReportMixin$36 = class PageRoute_PageRouteReportMixin extends PageRoute_GetPageRouteTransitionMixin$36 {};
    (PageRoute_PageRouteReportMixin$36.new = function(opts) {
      PageRoute_PageRouteReportMixin$36.__proto__.new.call(this, opts);
    }).prototype = PageRoute_PageRouteReportMixin$36.prototype;
    dart.applyMixin(PageRoute_PageRouteReportMixin$36, default_route.PageRouteReportMixin$(T));
    class GetPageRoute extends PageRoute_PageRouteReportMixin$36 {
      get transitionDuration() {
        return this[S$.transitionDuration$2];
      }
      set transitionDuration(value) {
        super.transitionDuration = value;
      }
      get page() {
        return this[S$.page];
      }
      set page(value) {
        super.page = value;
      }
      get routeName() {
        return this[S$.routeName];
      }
      set routeName(value) {
        super.routeName = value;
      }
      get customTransition() {
        return this[S$.customTransition$3];
      }
      set customTransition(value) {
        super.customTransition = value;
      }
      get binding() {
        return this[S$.binding];
      }
      set binding(value) {
        super.binding = value;
      }
      get parameter() {
        return this[S$.parameter];
      }
      set parameter(value) {
        super.parameter = value;
      }
      get bindings() {
        return this[S$.bindings];
      }
      set bindings(value) {
        super.bindings = value;
      }
      get showCupertinoParallax() {
        return this[S$.showCupertinoParallax];
      }
      set showCupertinoParallax(value) {
        super.showCupertinoParallax = value;
      }
      get opaque() {
        return this[S$.opaque];
      }
      set opaque(value) {
        super.opaque = value;
      }
      get popGesture() {
        return this[S$.popGesture$2];
      }
      set popGesture(value) {
        super.popGesture = value;
      }
      get barrierDismissible() {
        return this[S$.barrierDismissible];
      }
      set barrierDismissible(value) {
        super.barrierDismissible = value;
      }
      get transition() {
        return this[S$.transition];
      }
      set transition(value) {
        super.transition = value;
      }
      get curve() {
        return this[S$.curve];
      }
      set curve(value) {
        super.curve = value;
      }
      get alignment() {
        return this[S$.alignment];
      }
      set alignment(value) {
        super.alignment = value;
      }
      get middlewares() {
        return this[S$.middlewares];
      }
      set middlewares(value) {
        super.middlewares = value;
      }
      get barrierColor() {
        return this[S$.barrierColor];
      }
      set barrierColor(value) {
        super.barrierColor = value;
      }
      get barrierLabel() {
        return this[S$.barrierLabel$1];
      }
      set barrierLabel(value) {
        super.barrierLabel = value;
      }
      get maintainState() {
        return this[S$.maintainState];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      get title() {
        return this[S$.title$2];
      }
      set title(value) {
        super.title = value;
      }
      get gestureWidth() {
        return this[S$.gestureWidth];
      }
      set gestureWidth(value) {
        super.gestureWidth = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let settings = opts && 'settings' in opts ? opts.settings : null;
        let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[56] || CT.C56;
        let opaque = opts && 'opaque' in opts ? opts.opaque : true;
        let parameter = opts && 'parameter' in opts ? opts.parameter : null;
        let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
        let curve = opts && 'curve' in opts ? opts.curve : null;
        let alignment = opts && 'alignment' in opts ? opts.alignment : null;
        let transition = opts && 'transition' in opts ? opts.transition : null;
        let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
        let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
        let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
        let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
        let binding = opts && 'binding' in opts ? opts.binding : null;
        let bindings = opts && 'bindings' in opts ? opts.bindings : null;
        let routeName = opts && 'routeName' in opts ? opts.routeName : null;
        let page = opts && 'page' in opts ? opts.page : null;
        let title = opts && 'title' in opts ? opts.title : null;
        let showCupertinoParallax = opts && 'showCupertinoParallax' in opts ? opts.showCupertinoParallax : true;
        let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
        let middlewares = opts && 'middlewares' in opts ? opts.middlewares : null;
        return new (default_route.GetPageRoute$(T)).new({settings: settings, transitionDuration: transitionDuration, opaque: opaque, parameter: parameter, gestureWidth: gestureWidth, curve: curve, alignment: alignment, transition: transition, popGesture: popGesture, customTransition: customTransition, barrierDismissible: barrierDismissible, barrierColor: barrierColor, binding: binding, bindings: bindings, routeName: routeName, page: page, title: title, showCupertinoParallax: showCupertinoParallax, barrierLabel: barrierLabel, maintainState: maintainState, fullscreenDialog: fullscreenDialog, middlewares: middlewares});
      }
      dispose() {
        super.dispose();
        let middlewareRunner = new route_middleware.MiddlewareRunner.new(this.middlewares);
        middlewareRunner.runOnPageDispose();
      }
      [S$._getChild]() {
        if (this[S$._child] != null) return dart.nullCheck(this[S$._child]);
        let middlewareRunner = new route_middleware.MiddlewareRunner.new(this.middlewares);
        let localbindings = (() => {
          let t184 = T$.JSArrayOfBindings().of([]);
          if (this.bindings != null) t184[S$.$addAll](dart.nullCheck(this.bindings));
          if (this.binding != null) t184[S$.$addAll](T$.JSArrayOfBindings().of([dart.nullCheck(this.binding)]));
          return t184;
        })();
        let bindingsToBind = middlewareRunner.runOnBindingsStart(localbindings);
        if (bindingsToBind != null) {
          for (let binding of bindingsToBind) {
            binding.dependencies();
          }
        }
        let pageToBuild = dart.nullCheck(middlewareRunner.runOnPageBuildStart(this.page));
        this[S$._child] = middlewareRunner.runOnPageBuilt(pageToBuild());
        return dart.nullCheck(this[S$._child]);
      }
      buildContent(context) {
        return this[S$._getChild]();
      }
      get debugLabel() {
        return super.debugLabel + "(" + dart.str(this.settings.name) + ")";
      }
    }
    (GetPageRoute.new = function(opts) {
      let settings = opts && 'settings' in opts ? opts.settings : null;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[56] || CT.C56;
      let opaque = opts && 'opaque' in opts ? opts.opaque : true;
      let parameter = opts && 'parameter' in opts ? opts.parameter : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      let curve = opts && 'curve' in opts ? opts.curve : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let transition = opts && 'transition' in opts ? opts.transition : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : false;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : null;
      let binding = opts && 'binding' in opts ? opts.binding : null;
      let bindings = opts && 'bindings' in opts ? opts.bindings : null;
      let routeName = opts && 'routeName' in opts ? opts.routeName : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let showCupertinoParallax = opts && 'showCupertinoParallax' in opts ? opts.showCupertinoParallax : true;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let middlewares = opts && 'middlewares' in opts ? opts.middlewares : null;
      this[S$._child] = null;
      this[S$.transitionDuration$2] = transitionDuration;
      this[S$.opaque] = opaque;
      this[S$.parameter] = parameter;
      this[S$.gestureWidth] = gestureWidth;
      this[S$.curve] = curve;
      this[S$.alignment] = alignment;
      this[S$.transition] = transition;
      this[S$.popGesture$2] = popGesture;
      this[S$.customTransition$3] = customTransition;
      this[S$.barrierDismissible] = barrierDismissible;
      this[S$.barrierColor] = barrierColor;
      this[S$.binding] = binding;
      this[S$.bindings] = bindings;
      this[S$.routeName] = routeName;
      this[S$.page] = page;
      this[S$.title$2] = title;
      this[S$.showCupertinoParallax] = showCupertinoParallax;
      this[S$.barrierLabel$1] = barrierLabel;
      this[S$.maintainState] = maintainState;
      this[S$.middlewares] = middlewares;
      GetPageRoute.__proto__.new.call(this, {settings: settings, fullscreenDialog: fullscreenDialog});
      ;
    }).prototype = GetPageRoute.prototype;
    dart.addTypeTests(GetPageRoute);
    GetPageRoute.prototype[_is_GetPageRoute_default] = true;
    dart.addTypeCaches(GetPageRoute);
    dart.setMethodSignature(GetPageRoute, () => ({
      __proto__: dart.getMethods(GetPageRoute.__proto__),
      [S$._getChild]: dart.fnType(framework.Widget, []),
      buildContent: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(GetPageRoute, I[33]);
    dart.setFieldSignature(GetPageRoute, () => ({
      __proto__: dart.getFields(GetPageRoute.__proto__),
      transitionDuration: dart.finalFieldType(core.Duration),
      page: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, []))),
      routeName: dart.finalFieldType(dart.nullable(core.String)),
      customTransition: dart.finalFieldType(dart.nullable(custom_transition.CustomTransition)),
      binding: dart.finalFieldType(dart.nullable(bindings_interface.Bindings)),
      parameter: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String))),
      bindings: dart.finalFieldType(dart.nullable(core.List$(bindings_interface.Bindings))),
      showCupertinoParallax: dart.finalFieldType(core.bool),
      opaque: dart.finalFieldType(core.bool),
      popGesture: dart.finalFieldType(dart.nullable(core.bool)),
      barrierDismissible: dart.finalFieldType(core.bool),
      transition: dart.finalFieldType(dart.nullable(transitions_type.Transition)),
      curve: dart.finalFieldType(dart.nullable(curves.Curve)),
      alignment: dart.finalFieldType(dart.nullable(alignment$.Alignment)),
      middlewares: dart.finalFieldType(dart.nullable(core.List$(route_middleware.GetMiddleware))),
      barrierColor: dart.finalFieldType(dart.nullable(ui.Color)),
      barrierLabel: dart.finalFieldType(dart.nullable(core.String)),
      maintainState: dart.finalFieldType(core.bool),
      [S$._child]: dart.fieldType(dart.nullable(framework.Widget)),
      title: dart.finalFieldType(dart.nullable(core.String)),
      gestureWidth: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [framework.BuildContext])))
    }));
    return GetPageRoute;
  });
  default_route.GetPageRoute = default_route.GetPageRoute$();
  dart.addTypeTests(default_route.GetPageRoute, _is_GetPageRoute_default);
  const _is_GetPage_default = Symbol('_is_GetPage_default');
  get_route.GetPage$ = dart.generic(T => {
    var __t$GetPageOfT = () => (__t$GetPageOfT = dart.constFn(get_route.GetPage$(T)))();
    class GetPage extends navigator.Page$(T) {
      get page() {
        return this[S$.page$1];
      }
      set page(value) {
        super.page = value;
      }
      get popGesture() {
        return this[S$.popGesture$3];
      }
      set popGesture(value) {
        super.popGesture = value;
      }
      get parameters() {
        return this[S$.parameters$1];
      }
      set parameters(value) {
        super.parameters = value;
      }
      get title() {
        return this[S$.title$3];
      }
      set title(value) {
        super.title = value;
      }
      get transition() {
        return this[S$.transition$1];
      }
      set transition(value) {
        super.transition = value;
      }
      get curve() {
        return this[S$.curve$1];
      }
      set curve(value) {
        super.curve = value;
      }
      get participatesInRootNavigator() {
        return this[S$.participatesInRootNavigator];
      }
      set participatesInRootNavigator(value) {
        super.participatesInRootNavigator = value;
      }
      get alignment() {
        return this[S$.alignment$1];
      }
      set alignment(value) {
        super.alignment = value;
      }
      get maintainState() {
        return this[S$.maintainState$1];
      }
      set maintainState(value) {
        super.maintainState = value;
      }
      get opaque() {
        return this[S$.opaque$1];
      }
      set opaque(value) {
        super.opaque = value;
      }
      get gestureWidth() {
        return this[S$.gestureWidth$1];
      }
      set gestureWidth(value) {
        super.gestureWidth = value;
      }
      get binding() {
        return this[S$.binding$1];
      }
      set binding(value) {
        super.binding = value;
      }
      get bindings() {
        return this[S$.bindings$1];
      }
      set bindings(value) {
        super.bindings = value;
      }
      get customTransition() {
        return this[S$.customTransition$4];
      }
      set customTransition(value) {
        super.customTransition = value;
      }
      get transitionDuration() {
        return this[S$.transitionDuration$3];
      }
      set transitionDuration(value) {
        super.transitionDuration = value;
      }
      get fullscreenDialog() {
        return this[S$.fullscreenDialog];
      }
      set fullscreenDialog(value) {
        super.fullscreenDialog = value;
      }
      get preventDuplicates() {
        return this[S$.preventDuplicates];
      }
      set preventDuplicates(value) {
        super.preventDuplicates = value;
      }
      get arguments() {
        return this[S$.$arguments];
      }
      set arguments(value) {
        super.arguments = value;
      }
      get name() {
        return this[S$.name];
      }
      set name(value) {
        super.name = value;
      }
      get children() {
        return this[S$.children];
      }
      set children(value) {
        super.children = value;
      }
      get middlewares() {
        return this[S$.middlewares$1];
      }
      set middlewares(value) {
        super.middlewares = value;
      }
      get path() {
        return this[S$.path];
      }
      set path(value) {
        super.path = value;
      }
      get unknownRoute() {
        return this[S$.unknownRoute$2];
      }
      set unknownRoute(value) {
        super.unknownRoute = value;
      }
      get showCupertinoParallax() {
        return this[S$.showCupertinoParallax$1];
      }
      set showCupertinoParallax(value) {
        super.showCupertinoParallax = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let name = opts && 'name' in opts ? opts.name : null;
        let page = opts && 'page' in opts ? opts.page : null;
        let title = opts && 'title' in opts ? opts.title : null;
        let participatesInRootNavigator = opts && 'participatesInRootNavigator' in opts ? opts.participatesInRootNavigator : null;
        let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
        let curve = opts && 'curve' in opts ? opts.curve : C[73] || CT.C73;
        let alignment = opts && 'alignment' in opts ? opts.alignment : null;
        let parameters = opts && 'parameters' in opts ? opts.parameters : null;
        let opaque = opts && 'opaque' in opts ? opts.opaque : true;
        let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
        let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
        let binding = opts && 'binding' in opts ? opts.binding : null;
        let bindings = opts && 'bindings' in opts ? opts.bindings : C[74] || CT.C74;
        let transition = opts && 'transition' in opts ? opts.transition : null;
        let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
        let children = opts && 'children' in opts ? opts.children : C[75] || CT.C75;
        let middlewares = opts && 'middlewares' in opts ? opts.middlewares : null;
        let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
        let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
        let showCupertinoParallax = opts && 'showCupertinoParallax' in opts ? opts.showCupertinoParallax : true;
        let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
        return new (get_route.GetPage$(T)).new({name: name, page: page, title: title, participatesInRootNavigator: participatesInRootNavigator, gestureWidth: gestureWidth, maintainState: maintainState, curve: curve, alignment: alignment, parameters: parameters, opaque: opaque, transitionDuration: transitionDuration, popGesture: popGesture, binding: binding, bindings: bindings, transition: transition, customTransition: customTransition, fullscreenDialog: fullscreenDialog, children: children, middlewares: middlewares, unknownRoute: unknownRoute, arguments: $arguments, showCupertinoParallax: showCupertinoParallax, preventDuplicates: preventDuplicates});
      }
      copy(opts) {
        let t185, t185$, t185$0, t185$1, t185$2, t185$3, t185$4, t185$5, t185$6, t185$7, t185$8, t185$9, t185$10, t185$11, t185$12, t185$13, t185$14, t185$15, t185$16, t185$17, t185$18, t185$19, t185$20;
        let name = opts && 'name' in opts ? opts.name : null;
        let page = opts && 'page' in opts ? opts.page : null;
        let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
        let parameters = opts && 'parameters' in opts ? opts.parameters : null;
        let title = opts && 'title' in opts ? opts.title : null;
        let transition = opts && 'transition' in opts ? opts.transition : null;
        let curve = opts && 'curve' in opts ? opts.curve : null;
        let alignment = opts && 'alignment' in opts ? opts.alignment : null;
        let maintainState = opts && 'maintainState' in opts ? opts.maintainState : null;
        let opaque = opts && 'opaque' in opts ? opts.opaque : null;
        let binding = opts && 'binding' in opts ? opts.binding : null;
        let bindings = opts && 'bindings' in opts ? opts.bindings : null;
        let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
        let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
        let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : null;
        let settings = opts && 'settings' in opts ? opts.settings : null;
        let children = opts && 'children' in opts ? opts.children : null;
        let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
        let middlewares = opts && 'middlewares' in opts ? opts.middlewares : null;
        let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : null;
        let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
        let participatesInRootNavigator = opts && 'participatesInRootNavigator' in opts ? opts.participatesInRootNavigator : null;
        let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
        let showCupertinoParallax = opts && 'showCupertinoParallax' in opts ? opts.showCupertinoParallax : null;
        return new (__t$GetPageOfT()).new({participatesInRootNavigator: (t185 = participatesInRootNavigator, t185 == null ? this.participatesInRootNavigator : t185), preventDuplicates: (t185$ = preventDuplicates, t185$ == null ? this.preventDuplicates : t185$), name: (t185$0 = name, t185$0 == null ? this.name : t185$0), page: (t185$1 = page, t185$1 == null ? this.page : t185$1), popGesture: (t185$2 = popGesture, t185$2 == null ? this.popGesture : t185$2), parameters: (t185$3 = parameters, t185$3 == null ? this.parameters : t185$3), title: (t185$4 = title, t185$4 == null ? this.title : t185$4), transition: (t185$5 = transition, t185$5 == null ? this.transition : t185$5), curve: (t185$6 = curve, t185$6 == null ? this.curve : t185$6), alignment: (t185$7 = alignment, t185$7 == null ? this.alignment : t185$7), maintainState: (t185$8 = maintainState, t185$8 == null ? this.maintainState : t185$8), opaque: (t185$9 = opaque, t185$9 == null ? this.opaque : t185$9), binding: (t185$10 = binding, t185$10 == null ? this.binding : t185$10), bindings: (t185$11 = bindings, t185$11 == null ? this.bindings : t185$11), customTransition: (t185$12 = customTransition, t185$12 == null ? this.customTransition : t185$12), transitionDuration: (t185$13 = transitionDuration, t185$13 == null ? this.transitionDuration : t185$13), fullscreenDialog: (t185$14 = fullscreenDialog, t185$14 == null ? this.fullscreenDialog : t185$14), children: (t185$15 = children, t185$15 == null ? this.children : t185$15), unknownRoute: (t185$16 = unknownRoute, t185$16 == null ? this.unknownRoute : t185$16), middlewares: (t185$17 = middlewares, t185$17 == null ? this.middlewares : t185$17), gestureWidth: (t185$18 = gestureWidth, t185$18 == null ? this.gestureWidth : t185$18), arguments: (t185$19 = $arguments, t185$19 == null ? this.arguments : t185$19), showCupertinoParallax: (t185$20 = showCupertinoParallax, t185$20 == null ? this.showCupertinoParallax : t185$20)});
      }
      createRoute(context) {
        let _page = new route_middleware.PageRedirect.new({route: this, settings: this, unknownRoute: this.unknownRoute}).getPageToRoute(T, this, this.unknownRoute);
        return _page;
      }
      static _nameToRegex(path) {
        let keys = T$.JSArrayOfStringN().of([]);
        function _replace(pattern) {
          let buffer = new core.StringBuffer.new("(?:");
          if (pattern._get(1) != null) buffer.write(".");
          buffer.write("([\\w%+-._~!$&'()*,;=:@]+))");
          if (pattern._get(3) != null) buffer.write("?");
          keys[S$.$add](pattern._get(2));
          return dart.str(buffer);
        }
        dart.fn(_replace, T$.MatchToString());
        let stringPath = (path + "/?")[S$.$replaceAllMapped](core.RegExp.new("(\\.)?:(\\w+)(\\?)?"), _replace)[S$.$replaceAll]("//", "/");
        return new get_route.PathDecoded.new(core.RegExp.new("^" + stringPath + "$"), keys);
      }
    }
    (GetPage.new = function(opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let page = opts && 'page' in opts ? opts.page : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let participatesInRootNavigator = opts && 'participatesInRootNavigator' in opts ? opts.participatesInRootNavigator : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      let maintainState = opts && 'maintainState' in opts ? opts.maintainState : true;
      let curve = opts && 'curve' in opts ? opts.curve : C[73] || CT.C73;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let opaque = opts && 'opaque' in opts ? opts.opaque : true;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : null;
      let popGesture = opts && 'popGesture' in opts ? opts.popGesture : null;
      let binding = opts && 'binding' in opts ? opts.binding : null;
      let bindings = opts && 'bindings' in opts ? opts.bindings : C[74] || CT.C74;
      let transition = opts && 'transition' in opts ? opts.transition : null;
      let customTransition = opts && 'customTransition' in opts ? opts.customTransition : null;
      let fullscreenDialog = opts && 'fullscreenDialog' in opts ? opts.fullscreenDialog : false;
      let children = opts && 'children' in opts ? opts.children : C[75] || CT.C75;
      let middlewares = opts && 'middlewares' in opts ? opts.middlewares : null;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let showCupertinoParallax = opts && 'showCupertinoParallax' in opts ? opts.showCupertinoParallax : true;
      let preventDuplicates = opts && 'preventDuplicates' in opts ? opts.preventDuplicates : true;
      this[S$.name] = name;
      this[S$.page$1] = page;
      this[S$.title$3] = title;
      this[S$.participatesInRootNavigator] = participatesInRootNavigator;
      this[S$.gestureWidth$1] = gestureWidth;
      this[S$.maintainState$1] = maintainState;
      this[S$.curve$1] = curve;
      this[S$.alignment$1] = alignment;
      this[S$.parameters$1] = parameters;
      this[S$.opaque$1] = opaque;
      this[S$.transitionDuration$3] = transitionDuration;
      this[S$.popGesture$3] = popGesture;
      this[S$.binding$1] = binding;
      this[S$.bindings$1] = bindings;
      this[S$.transition$1] = transition;
      this[S$.customTransition$4] = customTransition;
      this[S$.fullscreenDialog] = fullscreenDialog;
      this[S$.children] = children;
      this[S$.middlewares$1] = middlewares;
      this[S$.unknownRoute$2] = unknownRoute;
      this[S$.$arguments] = $arguments;
      this[S$.showCupertinoParallax$1] = showCupertinoParallax;
      this[S$.preventDuplicates] = preventDuplicates;
      this[S$.path] = get_route.GetPage._nameToRegex(name);
      if (!name[S$.$startsWith]("/")) dart.assertFailed("It is necessary to start route name [" + name + "] with a slash: /" + name, I[36], 70, 16, "name.startsWith('/')");
      GetPage.__proto__.new.call(this, {key: new (T$.ValueKeyOfString()).new(name), name: name, arguments: extension_navigation['GetNavigation|get#arguments'](get_main.Get)});
      ;
    }).prototype = GetPage.prototype;
    dart.addTypeTests(GetPage);
    GetPage.prototype[_is_GetPage_default] = true;
    dart.addTypeCaches(GetPage);
    dart.setMethodSignature(GetPage, () => ({
      __proto__: dart.getMethods(GetPage.__proto__),
      copy: dart.fnType(get_route.GetPage$(T), [], {alignment: dart.nullable(alignment$.Alignment), arguments: dart.nullable(core.Object), binding: dart.nullable(bindings_interface.Bindings), bindings: dart.nullable(core.List$(bindings_interface.Bindings)), children: dart.nullable(core.List$(get_route.GetPage)), curve: dart.nullable(curves.Curve), customTransition: dart.nullable(custom_transition.CustomTransition), fullscreenDialog: dart.nullable(core.bool), gestureWidth: dart.nullable(dart.fnType(core.double, [framework.BuildContext])), maintainState: dart.nullable(core.bool), middlewares: dart.nullable(core.List$(route_middleware.GetMiddleware)), name: dart.nullable(core.String), opaque: dart.nullable(core.bool), page: dart.nullable(dart.fnType(framework.Widget, [])), parameters: dart.nullable(core.Map$(core.String, core.String)), participatesInRootNavigator: dart.nullable(core.bool), popGesture: dart.nullable(core.bool), preventDuplicates: dart.nullable(core.bool), settings: dart.nullable(navigator.RouteSettings), showCupertinoParallax: dart.nullable(core.bool), title: dart.nullable(core.String), transition: dart.nullable(transitions_type.Transition), transitionDuration: dart.nullable(core.Duration), unknownRoute: dart.nullable(get_route.GetPage)}, {}),
      createRoute: dart.fnType(navigator.Route$(T), [framework.BuildContext])
    }));
    dart.setStaticMethodSignature(GetPage, () => ['_nameToRegex']);
    dart.setLibraryUri(GetPage, I[37]);
    dart.setFieldSignature(GetPage, () => ({
      __proto__: dart.getFields(GetPage.__proto__),
      page: dart.finalFieldType(dart.fnType(framework.Widget, [])),
      popGesture: dart.finalFieldType(dart.nullable(core.bool)),
      parameters: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String))),
      title: dart.finalFieldType(dart.nullable(core.String)),
      transition: dart.finalFieldType(dart.nullable(transitions_type.Transition)),
      curve: dart.finalFieldType(curves.Curve),
      participatesInRootNavigator: dart.finalFieldType(dart.nullable(core.bool)),
      alignment: dart.finalFieldType(dart.nullable(alignment$.Alignment)),
      maintainState: dart.finalFieldType(core.bool),
      opaque: dart.finalFieldType(core.bool),
      gestureWidth: dart.finalFieldType(dart.nullable(dart.fnType(core.double, [framework.BuildContext]))),
      binding: dart.finalFieldType(dart.nullable(bindings_interface.Bindings)),
      bindings: dart.finalFieldType(core.List$(bindings_interface.Bindings)),
      customTransition: dart.finalFieldType(dart.nullable(custom_transition.CustomTransition)),
      transitionDuration: dart.finalFieldType(dart.nullable(core.Duration)),
      fullscreenDialog: dart.finalFieldType(core.bool),
      preventDuplicates: dart.finalFieldType(core.bool),
      arguments: dart.finalFieldType(dart.nullable(core.Object)),
      name: dart.finalFieldType(core.String),
      children: dart.finalFieldType(core.List$(get_route.GetPage)),
      middlewares: dart.finalFieldType(dart.nullable(core.List$(route_middleware.GetMiddleware))),
      path: dart.finalFieldType(get_route.PathDecoded),
      unknownRoute: dart.finalFieldType(dart.nullable(get_route.GetPage)),
      showCupertinoParallax: dart.finalFieldType(core.bool)
    }));
    return GetPage;
  });
  get_route.GetPage = get_route.GetPage$();
  dart.addTypeTests(get_route.GetPage, _is_GetPage_default);
  get_route.PathDecoded = class PathDecoded extends core.Object {
    get regex() {
      return this[S$.regex];
    }
    set regex(value) {
      super.regex = value;
    }
    get keys() {
      return this[S$.keys$1];
    }
    set keys(value) {
      super.keys = value;
    }
    static ['_#new#tearOff'](regex, keys) {
      return new get_route.PathDecoded.new(regex, keys);
    }
    get hashCode() {
      return this.regex[S$.$hashCode];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      return get_route.PathDecoded.is(other) && other.regex[S$.$_equals](this.regex);
    }
  };
  (get_route.PathDecoded.new = function(regex, keys) {
    this[S$.regex] = regex;
    this[S$.keys$1] = keys;
    ;
  }).prototype = get_route.PathDecoded.prototype;
  dart.addTypeTests(get_route.PathDecoded);
  dart.addTypeCaches(get_route.PathDecoded);
  dart.setLibraryUri(get_route.PathDecoded, I[37]);
  dart.setFieldSignature(get_route.PathDecoded, () => ({
    __proto__: dart.getFields(get_route.PathDecoded.__proto__),
    regex: dart.finalFieldType(core.RegExp),
    keys: dart.finalFieldType(core.List$(dart.nullable(core.String)))
  }));
  dart.defineExtensionMethods(get_route.PathDecoded, ['_equals']);
  dart.defineExtensionAccessors(get_route.PathDecoded, ['hashCode']);
  route_observer.GetObserver = class GetObserver extends navigator.NavigatorObserver {
    get routing() {
      return this[S$.routing$1];
    }
    set routing(value) {
      super.routing = value;
    }
    static ['_#new#tearOff'](routing = null, _routeSend = null) {
      return new route_observer.GetObserver.new(routing, _routeSend);
    }
    didPop(route, previousRoute) {
      let t186, t185, t186$, t185$, t185$0, t185$1;
      super.didPop(route, previousRoute);
      let currentRoute = route_observer._RouteData.ofRoute(route);
      let newRoute = route_observer._RouteData.ofRoute(previousRoute);
      if (currentRoute.isBottomSheet || currentRoute.isDialog) {
        t185 = get_main.Get;
        t186 = "CLOSE " + dart.str(currentRoute.name);
        t185.log(t186);
      } else if (currentRoute.isGetPageRoute) {
        t185$ = get_main.Get;
        t186$ = "CLOSE TO ROUTE " + dart.str(currentRoute.name);
        t185$.log(t186$);
      }
      if (previousRoute != null) {
        router_report.RouterReportManager.reportCurrentRoute(previousRoute);
      }
      t185$0 = this[S$._routeSend];
      t185$0 == null ? null : t185$0.update(dart.fn(value => {
        let t186, t186$, t186$0;
        if (pages.PageRoute.is(previousRoute)) {
          value.current = (t186 = route_observer._extractRouteName(previousRoute), t186 == null ? "" : t186);
          value.previous = (t186$ = newRoute.name, t186$ == null ? "" : t186$);
        } else if (value.previous[S$.$isNotEmpty]) {
          value.current = value.previous;
        }
        value.args = (t186$0 = previousRoute, t186$0 == null ? null : t186$0.settings.arguments);
        value.route = previousRoute;
        value.isBack = true;
        value.removed = "";
        value.isBottomSheet = newRoute.isBottomSheet;
        value.isDialog = newRoute.isDialog;
      }, T$.RoutingTovoid()));
      t185$1 = this.routing;
      t185$1 == null ? null : t185$1(this[S$._routeSend]);
    }
    didPush(route, previousRoute) {
      let t186, t185, t186$, t185$, t185$0;
      super.didPush(route, previousRoute);
      let newRoute = route_observer._RouteData.ofRoute(route);
      if (newRoute.isBottomSheet || newRoute.isDialog) {
        t185 = get_main.Get;
        t186 = "OPEN " + dart.str(newRoute.name);
        t185.log(t186);
      } else if (newRoute.isGetPageRoute) {
        t185$ = get_main.Get;
        t186$ = "GOING TO ROUTE " + dart.str(newRoute.name);
        t185$.log(t186$);
      }
      router_report.RouterReportManager.reportCurrentRoute(route);
      t185$0 = this[S$._routeSend];
      t185$0 == null ? null : t185$0.update(dart.fn(value => {
        let t186, t186$, t186$0;
        if (pages.PageRoute.is(route)) {
          value.current = (t186 = newRoute.name, t186 == null ? "" : t186);
        }
        let previousRouteName = route_observer._extractRouteName(previousRoute);
        if (previousRouteName != null) {
          value.previous = previousRouteName;
        }
        value.args = route.settings.arguments;
        value.route = route;
        value.isBack = false;
        value.removed = "";
        value.isBottomSheet = newRoute.isBottomSheet ? true : (t186$ = value.isBottomSheet, t186$ == null ? false : t186$);
        value.isDialog = newRoute.isDialog ? true : (t186$0 = value.isDialog, t186$0 == null ? false : t186$0);
      }, T$.RoutingTovoid()));
      if (this.routing != null) {
        dart.nullCheck(this.routing)(this[S$._routeSend]);
      }
    }
    didRemove(route, previousRoute) {
      let t186, t185, t185$, t185$0;
      super.didRemove(route, previousRoute);
      let routeName = route_observer._extractRouteName(route);
      let currentRoute = route_observer._RouteData.ofRoute(route);
      t185 = get_main.Get;
      t186 = "REMOVING ROUTE " + dart.str(routeName);
      t185.log(t186);
      t185$ = this[S$._routeSend];
      t185$ == null ? null : t185$.update(dart.fn(value => {
        let t186, t186$;
        value.route = previousRoute;
        value.isBack = false;
        value.removed = (t186 = routeName, t186 == null ? "" : t186);
        value.previous = (t186$ = routeName, t186$ == null ? "" : t186$);
        value.isBottomSheet = currentRoute.isBottomSheet ? false : value.isBottomSheet;
        value.isDialog = currentRoute.isDialog ? false : value.isDialog;
      }, T$.RoutingTovoid()));
      if (default_route.GetPageRoute.is(route)) {
        router_report.RouterReportManager.reportRouteWillDispose(route);
      }
      t185$0 = this.routing;
      t185$0 == null ? null : t185$0(this[S$._routeSend]);
    }
    didReplace(opts) {
      let t186, t185, t186$, t185$, t185$0, t185$1;
      let newRoute = opts && 'newRoute' in opts ? opts.newRoute : null;
      let oldRoute = opts && 'oldRoute' in opts ? opts.oldRoute : null;
      super.didReplace({newRoute: newRoute, oldRoute: oldRoute});
      let newName = route_observer._extractRouteName(newRoute);
      let oldName = route_observer._extractRouteName(oldRoute);
      let currentRoute = route_observer._RouteData.ofRoute(oldRoute);
      t185 = get_main.Get;
      t186 = "REPLACE ROUTE " + dart.str(oldName);
      t185.log(t186);
      t185$ = get_main.Get;
      t186$ = "NEW ROUTE " + dart.str(newName);
      t185$.log(t186$);
      if (newRoute != null) {
        router_report.RouterReportManager.reportCurrentRoute(newRoute);
      }
      t185$0 = this[S$._routeSend];
      t185$0 == null ? null : t185$0.update(dart.fn(value => {
        let t186, t186$;
        if (pages.PageRoute.is(newRoute)) {
          value.current = (t186 = newName, t186 == null ? "" : t186);
        }
        value.args = (t186$ = newRoute, t186$ == null ? null : t186$.settings.arguments);
        value.route = newRoute;
        value.isBack = false;
        value.removed = "";
        value.previous = dart.str(oldName);
        value.isBottomSheet = currentRoute.isBottomSheet ? false : value.isBottomSheet;
        value.isDialog = currentRoute.isDialog ? false : value.isDialog;
      }, T$.RoutingTovoid()));
      if (default_route.GetPageRoute.is(oldRoute)) {
        router_report.RouterReportManager.reportRouteWillDispose(oldRoute);
      }
      t185$1 = this.routing;
      t185$1 == null ? null : t185$1(this[S$._routeSend]);
    }
  };
  (route_observer.GetObserver.new = function(routing = null, _routeSend = null) {
    this[S$.routing$1] = routing;
    this[S$._routeSend] = _routeSend;
    ;
  }).prototype = route_observer.GetObserver.prototype;
  dart.addTypeTests(route_observer.GetObserver);
  dart.addTypeCaches(route_observer.GetObserver);
  dart.setLibraryUri(route_observer.GetObserver, I[38]);
  dart.setFieldSignature(route_observer.GetObserver, () => ({
    __proto__: dart.getFields(route_observer.GetObserver.__proto__),
    routing: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [dart.nullable(route_observer.Routing)]))),
    [S$._routeSend]: dart.finalFieldType(dart.nullable(route_observer.Routing))
  }));
  route_observer.Routing = class Routing extends core.Object {
    get current() {
      return this[S$.current];
    }
    set current(value) {
      this[S$.current] = value;
    }
    get previous() {
      return this[S$.previous];
    }
    set previous(value) {
      this[S$.previous] = value;
    }
    get args() {
      return this[S$.args];
    }
    set args(value) {
      this[S$.args] = value;
    }
    get removed() {
      return this[S$.removed];
    }
    set removed(value) {
      this[S$.removed] = value;
    }
    get route() {
      return this[S$.route$2];
    }
    set route(value) {
      this[S$.route$2] = value;
    }
    get isBack() {
      return this[S$.isBack];
    }
    set isBack(value) {
      this[S$.isBack] = value;
    }
    get isBottomSheet() {
      return this[S$.isBottomSheet];
    }
    set isBottomSheet(value) {
      this[S$.isBottomSheet] = value;
    }
    get isDialog() {
      return this[S$.isDialog];
    }
    set isDialog(value) {
      this[S$.isDialog] = value;
    }
    static ['_#new#tearOff'](opts) {
      let current = opts && 'current' in opts ? opts.current : "";
      let previous = opts && 'previous' in opts ? opts.previous : "";
      let args = opts && 'args' in opts ? opts.args : null;
      let removed = opts && 'removed' in opts ? opts.removed : "";
      let route = opts && 'route' in opts ? opts.route : null;
      let isBack = opts && 'isBack' in opts ? opts.isBack : null;
      let isBottomSheet = opts && 'isBottomSheet' in opts ? opts.isBottomSheet : null;
      let isDialog = opts && 'isDialog' in opts ? opts.isDialog : null;
      return new route_observer.Routing.new({current: current, previous: previous, args: args, removed: removed, route: route, isBack: isBack, isBottomSheet: isBottomSheet, isDialog: isDialog});
    }
    update(fn) {
      fn(this);
    }
  };
  (route_observer.Routing.new = function(opts) {
    let current = opts && 'current' in opts ? opts.current : "";
    let previous = opts && 'previous' in opts ? opts.previous : "";
    let args = opts && 'args' in opts ? opts.args : null;
    let removed = opts && 'removed' in opts ? opts.removed : "";
    let route = opts && 'route' in opts ? opts.route : null;
    let isBack = opts && 'isBack' in opts ? opts.isBack : null;
    let isBottomSheet = opts && 'isBottomSheet' in opts ? opts.isBottomSheet : null;
    let isDialog = opts && 'isDialog' in opts ? opts.isDialog : null;
    this[S$.current] = current;
    this[S$.previous] = previous;
    this[S$.args] = args;
    this[S$.removed] = removed;
    this[S$.route$2] = route;
    this[S$.isBack] = isBack;
    this[S$.isBottomSheet] = isBottomSheet;
    this[S$.isDialog] = isDialog;
    ;
  }).prototype = route_observer.Routing.prototype;
  dart.addTypeTests(route_observer.Routing);
  dart.addTypeCaches(route_observer.Routing);
  dart.setMethodSignature(route_observer.Routing, () => ({
    __proto__: dart.getMethods(route_observer.Routing.__proto__),
    update: dart.fnType(dart.void, [dart.fnType(dart.void, [route_observer.Routing])])
  }));
  dart.setLibraryUri(route_observer.Routing, I[38]);
  dart.setFieldSignature(route_observer.Routing, () => ({
    __proto__: dart.getFields(route_observer.Routing.__proto__),
    current: dart.fieldType(core.String),
    previous: dart.fieldType(core.String),
    args: dart.fieldType(dart.dynamic),
    removed: dart.fieldType(core.String),
    route: dart.fieldType(dart.nullable(navigator.Route)),
    isBack: dart.fieldType(dart.nullable(core.bool)),
    isBottomSheet: dart.fieldType(dart.nullable(core.bool)),
    isDialog: dart.fieldType(dart.nullable(core.bool))
  }));
  route_observer._RouteData = class _RouteData extends core.Object {
    static ['_#new#tearOff'](opts) {
      let name = opts && 'name' in opts ? opts.name : null;
      let isGetPageRoute = opts && 'isGetPageRoute' in opts ? opts.isGetPageRoute : null;
      let isBottomSheet = opts && 'isBottomSheet' in opts ? opts.isBottomSheet : null;
      let isDialog = opts && 'isDialog' in opts ? opts.isDialog : null;
      return new route_observer._RouteData.new({name: name, isGetPageRoute: isGetPageRoute, isBottomSheet: isBottomSheet, isDialog: isDialog});
    }
    static ofRoute(route) {
      return new route_observer._RouteData.new({name: route_observer._extractRouteName(route), isGetPageRoute: default_route.GetPageRoute.is(route), isDialog: dialog_route.GetDialogRoute.is(route), isBottomSheet: bottomsheet$.GetModalBottomSheetRoute.is(route)});
    }
    static ['_#ofRoute#tearOff'](route) {
      return route_observer._RouteData.ofRoute(route);
    }
  };
  (route_observer._RouteData.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let isGetPageRoute = opts && 'isGetPageRoute' in opts ? opts.isGetPageRoute : null;
    let isBottomSheet = opts && 'isBottomSheet' in opts ? opts.isBottomSheet : null;
    let isDialog = opts && 'isDialog' in opts ? opts.isDialog : null;
    this.name = name;
    this.isGetPageRoute = isGetPageRoute;
    this.isBottomSheet = isBottomSheet;
    this.isDialog = isDialog;
    ;
  }).prototype = route_observer._RouteData.prototype;
  dart.addTypeTests(route_observer._RouteData);
  dart.addTypeCaches(route_observer._RouteData);
  dart.setStaticMethodSignature(route_observer._RouteData, () => ['ofRoute']);
  dart.setLibraryUri(route_observer._RouteData, I[38]);
  dart.setFieldSignature(route_observer._RouteData, () => ({
    __proto__: dart.getFields(route_observer._RouteData.__proto__),
    isGetPageRoute: dart.finalFieldType(core.bool),
    isBottomSheet: dart.finalFieldType(core.bool),
    isDialog: dart.finalFieldType(core.bool),
    name: dart.finalFieldType(dart.nullable(core.String))
  }));
  route_observer._extractRouteName = function _extractRouteName(route) {
    let t185;
    if ((t185 = route, t185 == null ? null : t185.settings.name) != null) {
      return dart.nullCheck(route).settings.name;
    }
    if (default_route.GetPageRoute.is(route)) {
      return route.routeName;
    }
    if (dialog_route.GetDialogRoute.is(route)) {
      return "DIALOG " + dart.str(dart.hashCode(route));
    }
    if (bottomsheet$.GetModalBottomSheetRoute.is(route)) {
      return "BOTTOMSHEET " + dart.str(dart.hashCode(route));
    }
    return null;
  };
  route_middleware._RouteMiddleware = class _RouteMiddleware extends core.Object {};
  (route_middleware._RouteMiddleware.new = function() {
    this.priority = null;
    ;
  }).prototype = route_middleware._RouteMiddleware.prototype;
  dart.addTypeTests(route_middleware._RouteMiddleware);
  dart.addTypeCaches(route_middleware._RouteMiddleware);
  dart.setLibraryUri(route_middleware._RouteMiddleware, I[39]);
  dart.setFieldSignature(route_middleware._RouteMiddleware, () => ({
    __proto__: dart.getFields(route_middleware._RouteMiddleware.__proto__),
    priority: dart.fieldType(dart.nullable(core.int))
  }));
  route_middleware.GetMiddleware = class GetMiddleware extends core.Object {
    get priority() {
      return this[S$.priority];
    }
    set priority(value) {
      this[S$.priority] = value;
    }
    static ['_#new#tearOff'](opts) {
      let priority = opts && 'priority' in opts ? opts.priority : null;
      return new route_middleware.GetMiddleware.new({priority: priority});
    }
    redirect(route) {
      return null;
    }
    onPageCalled(page) {
      return page;
    }
    onBindingsStart(bindings) {
      return bindings;
    }
    onPageBuildStart(page) {
      return page;
    }
    onPageBuilt(page) {
      return page;
    }
    onPageDispose() {
    }
    redirectDelegate(route) {
      return new (T$.SynchronousFutureOfGetNavConfigN()).new(route);
    }
  };
  (route_middleware.GetMiddleware.new = function(opts) {
    let priority = opts && 'priority' in opts ? opts.priority : null;
    this[S$.priority] = 0;
    this[S$.priority] = priority;
    ;
  }).prototype = route_middleware.GetMiddleware.prototype;
  dart.addTypeTests(route_middleware.GetMiddleware);
  dart.addTypeCaches(route_middleware.GetMiddleware);
  route_middleware.GetMiddleware[dart.implements] = () => [route_middleware._RouteMiddleware];
  dart.setMethodSignature(route_middleware.GetMiddleware, () => ({
    __proto__: dart.getMethods(route_middleware.GetMiddleware.__proto__),
    redirect: dart.fnType(dart.nullable(navigator.RouteSettings), [dart.nullable(core.String)]),
    onPageCalled: dart.fnType(dart.nullable(get_route.GetPage), [dart.nullable(get_route.GetPage)]),
    onBindingsStart: dart.fnType(dart.nullable(core.List$(bindings_interface.Bindings)), [dart.nullable(core.List$(bindings_interface.Bindings))]),
    onPageBuildStart: dart.fnType(dart.nullable(dart.fnType(framework.Widget, [])), [dart.nullable(dart.fnType(framework.Widget, []))]),
    onPageBuilt: dart.fnType(framework.Widget, [framework.Widget]),
    onPageDispose: dart.fnType(dart.void, []),
    redirectDelegate: dart.fnType(async.Future$(dart.nullable(get_nav_config.GetNavConfig)), [get_nav_config.GetNavConfig])
  }));
  dart.setLibraryUri(route_middleware.GetMiddleware, I[39]);
  dart.setFieldSignature(route_middleware.GetMiddleware, () => ({
    __proto__: dart.getFields(route_middleware.GetMiddleware.__proto__),
    priority: dart.fieldType(dart.nullable(core.int))
  }));
  route_middleware.MiddlewareRunner = class MiddlewareRunner extends core.Object {
    static ['_#new#tearOff'](_middlewares) {
      return new route_middleware.MiddlewareRunner.new(_middlewares);
    }
    [S$._getMiddlewares]() {
      let t185, t185$;
      let _m = (t185 = this[S$._middlewares], t185 == null ? T$.JSArrayOfGetMiddleware().of([]) : t185);
      t185$ = _m;
      return (() => {
        t185$[S$.$sort](dart.fn((a, b) => {
          let t186, t186$;
          return (t186 = a.priority, t186 == null ? 0 : t186)[S$.$compareTo]((t186$ = b.priority, t186$ == null ? 0 : t186$));
        }, T$.GetMiddlewareAndGetMiddlewareToint()));
        return t185$;
      })();
    }
    runOnPageCalled(page) {
      this[S$._getMiddlewares]()[S$.$forEach](dart.fn(element => {
        page = element.onPageCalled(page);
      }, T$.GetMiddlewareTovoid()));
      return page;
    }
    runRedirect(route) {
      let t186, t185;
      let to = null;
      for (let element of this[S$._getMiddlewares]()) {
        to = element.redirect(route);
        if (to != null) {
          break;
        }
      }
      t185 = get_main.Get;
      t186 = "Redirect to " + dart.str(to);
      t185.log(t186);
      return to;
    }
    runOnBindingsStart(bindings) {
      this[S$._getMiddlewares]()[S$.$forEach](dart.fn(element => {
        bindings = element.onBindingsStart(bindings);
      }, T$.GetMiddlewareTovoid()));
      return bindings;
    }
    runOnPageBuildStart(page) {
      this[S$._getMiddlewares]()[S$.$forEach](dart.fn(element => {
        page = element.onPageBuildStart(page);
      }, T$.GetMiddlewareTovoid()));
      return page;
    }
    runOnPageBuilt(page) {
      this[S$._getMiddlewares]()[S$.$forEach](dart.fn(element => {
        page = element.onPageBuilt(page);
      }, T$.GetMiddlewareTovoid()));
      return page;
    }
    runOnPageDispose() {
      return this[S$._getMiddlewares]()[S$.$forEach](dart.fn(element => element.onPageDispose(), T$.GetMiddlewareTovoid()));
    }
  };
  (route_middleware.MiddlewareRunner.new = function(_middlewares) {
    this[S$._middlewares] = _middlewares;
    ;
  }).prototype = route_middleware.MiddlewareRunner.prototype;
  dart.addTypeTests(route_middleware.MiddlewareRunner);
  dart.addTypeCaches(route_middleware.MiddlewareRunner);
  dart.setMethodSignature(route_middleware.MiddlewareRunner, () => ({
    __proto__: dart.getMethods(route_middleware.MiddlewareRunner.__proto__),
    [S$._getMiddlewares]: dart.fnType(core.List$(route_middleware.GetMiddleware), []),
    runOnPageCalled: dart.fnType(dart.nullable(get_route.GetPage), [dart.nullable(get_route.GetPage)]),
    runRedirect: dart.fnType(dart.nullable(navigator.RouteSettings), [dart.nullable(core.String)]),
    runOnBindingsStart: dart.fnType(dart.nullable(core.List$(bindings_interface.Bindings)), [dart.nullable(core.List$(bindings_interface.Bindings))]),
    runOnPageBuildStart: dart.fnType(dart.nullable(dart.fnType(framework.Widget, [])), [dart.nullable(dart.fnType(framework.Widget, []))]),
    runOnPageBuilt: dart.fnType(framework.Widget, [framework.Widget]),
    runOnPageDispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(route_middleware.MiddlewareRunner, I[39]);
  dart.setFieldSignature(route_middleware.MiddlewareRunner, () => ({
    __proto__: dart.getFields(route_middleware.MiddlewareRunner.__proto__),
    [S$._middlewares]: dart.finalFieldType(dart.nullable(core.List$(route_middleware.GetMiddleware)))
  }));
  route_middleware.PageRedirect = class PageRedirect extends core.Object {
    get route() {
      return this[S$.route$3];
    }
    set route(value) {
      this[S$.route$3] = value;
    }
    get unknownRoute() {
      return this[S$.unknownRoute$3];
    }
    set unknownRoute(value) {
      this[S$.unknownRoute$3] = value;
    }
    get settings() {
      return this[S$.settings];
    }
    set settings(value) {
      this[S$.settings] = value;
    }
    get isUnknown() {
      return this[S$.isUnknown];
    }
    set isUnknown(value) {
      this[S$.isUnknown] = value;
    }
    static ['_#new#tearOff'](opts) {
      let route = opts && 'route' in opts ? opts.route : null;
      let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
      let isUnknown = opts && 'isUnknown' in opts ? opts.isUnknown : false;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      return new route_middleware.PageRedirect.new({route: route, unknownRoute: unknownRoute, isUnknown: isUnknown, settings: settings});
    }
    page(T) {
      let t185;
      while (this.needRecheck()) {
      }
      let _r = dart.nullCheck(this.isUnknown ? this.unknownRoute : this.route);
      return new (default_route.GetPageRoute$(T)).new({page: _r.page, parameter: _r.parameters, settings: this.isUnknown ? new navigator.RouteSettings.new({name: _r.name, arguments: dart.nullCheck(this.settings).arguments}) : this.settings, curve: _r.curve, opaque: _r.opaque, showCupertinoParallax: _r.showCupertinoParallax, gestureWidth: _r.gestureWidth, customTransition: _r.customTransition, binding: _r.binding, bindings: _r.bindings, transitionDuration: (t185 = _r.transitionDuration, t185 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration'](get_main.Get) : t185), transition: _r.transition, popGesture: _r.popGesture, fullscreenDialog: _r.fullscreenDialog, middlewares: _r.middlewares});
    }
    getPageToRoute(T, rou, unk) {
      let t185;
      while (this.needRecheck()) {
      }
      let _r = dart.nullCheck(this.isUnknown ? unk : rou);
      return new (default_route.GetPageRoute$(T)).new({page: _r.page, parameter: _r.parameters, alignment: _r.alignment, title: _r.title, maintainState: _r.maintainState, routeName: _r.name, settings: _r, curve: _r.curve, showCupertinoParallax: _r.showCupertinoParallax, gestureWidth: _r.gestureWidth, opaque: _r.opaque, customTransition: _r.customTransition, binding: _r.binding, bindings: _r.bindings, transitionDuration: (t185 = _r.transitionDuration, t185 == null ? extension_navigation['GetNavigation|get#defaultTransitionDuration'](get_main.Get) : t185), transition: _r.transition, popGesture: _r.popGesture, fullscreenDialog: _r.fullscreenDialog, middlewares: _r.middlewares});
    }
    needRecheck() {
      if (this.settings == null && this.route != null) {
        this.settings = this.route;
      }
      let match = extension_navigation['NavTwoExt|get#routeTree'](get_main.Get).matchRoute(dart.nullCheck(dart.nullCheck(this.settings).name));
      extension_navigation['GetNavigation|set#parameters'](get_main.Get, match.parameters);
      if (match.route == null) {
        this.isUnknown = true;
        return false;
      }
      let runner = new route_middleware.MiddlewareRunner.new(dart.nullCheck(match.route).middlewares);
      this.route = runner.runOnPageCalled(match.route);
      this.addPageParameter(dart.nullCheck(this.route));
      if (dart.nullCheck(match.route).middlewares == null || dart.nullCheck(dart.nullCheck(match.route).middlewares)[S$.$isEmpty]) {
        return false;
      }
      let newSettings = runner.runRedirect(dart.nullCheck(this.settings).name);
      if (newSettings == null) {
        return false;
      }
      this.settings = newSettings;
      return true;
    }
    addPageParameter(route) {
      if (route.parameters == null) return;
      let parameters = extension_navigation['GetNavigation|get#parameters'](get_main.Get);
      parameters[S$.$addEntries](dart.nullCheck(route.parameters)[S$.$entries]);
      extension_navigation['GetNavigation|set#parameters'](get_main.Get, parameters);
    }
  };
  (route_middleware.PageRedirect.new = function(opts) {
    let route = opts && 'route' in opts ? opts.route : null;
    let unknownRoute = opts && 'unknownRoute' in opts ? opts.unknownRoute : null;
    let isUnknown = opts && 'isUnknown' in opts ? opts.isUnknown : false;
    let settings = opts && 'settings' in opts ? opts.settings : null;
    this[S$.route$3] = route;
    this[S$.unknownRoute$3] = unknownRoute;
    this[S$.isUnknown] = isUnknown;
    this[S$.settings] = settings;
    ;
  }).prototype = route_middleware.PageRedirect.prototype;
  dart.addTypeTests(route_middleware.PageRedirect);
  dart.addTypeCaches(route_middleware.PageRedirect);
  dart.setMethodSignature(route_middleware.PageRedirect, () => ({
    __proto__: dart.getMethods(route_middleware.PageRedirect.__proto__),
    page: dart.gFnType(T => [default_route.GetPageRoute$(T), []], T => [dart.nullable(core.Object)]),
    getPageToRoute: dart.gFnType(T => [default_route.GetPageRoute$(T), [get_route.GetPage, dart.nullable(get_route.GetPage)]], T => [dart.nullable(core.Object)]),
    needRecheck: dart.fnType(core.bool, []),
    addPageParameter: dart.fnType(dart.void, [get_route.GetPage])
  }));
  dart.setLibraryUri(route_middleware.PageRedirect, I[39]);
  dart.setFieldSignature(route_middleware.PageRedirect, () => ({
    __proto__: dart.getFields(route_middleware.PageRedirect.__proto__),
    route: dart.fieldType(dart.nullable(get_route.GetPage)),
    unknownRoute: dart.fieldType(dart.nullable(get_route.GetPage)),
    settings: dart.fieldType(dart.nullable(navigator.RouteSettings)),
    isUnknown: dart.fieldType(core.bool)
  }));
  transitions_type.Transition = class Transition extends core._Enum {
    [S$._enumToString]() {
      return "Transition." + this[S$._name];
    }
  };
  (transitions_type.Transition.new = function(index, name) {
    transitions_type.Transition.__proto__.new.call(this, index, name);
    ;
  }).prototype = transitions_type.Transition.prototype;
  dart.addTypeTests(transitions_type.Transition);
  dart.addTypeCaches(transitions_type.Transition);
  dart.setMethodSignature(transitions_type.Transition, () => ({
    __proto__: dart.getMethods(transitions_type.Transition.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(transitions_type.Transition, I[40]);
  dart.setStaticFieldSignature(transitions_type.Transition, () => ['values', 'fade', 'fadeIn', 'rightToLeft', 'leftToRight', 'upToDown', 'downToUp', 'rightToLeftWithFade', 'leftToRightWithFade', 'zoom', 'topLevel', 'noTransition', 'cupertino', 'cupertinoDialog', 'size', 'circularReveal', 'native']);
  dart.defineLazy(transitions_type.Transition, {
    /*transitions_type.Transition.values*/get values() {
      return C[76] || CT.C76;
    },
    /*transitions_type.Transition.fade*/get fade() {
      return C[69] || CT.C69;
    },
    /*transitions_type.Transition.fadeIn*/get fadeIn() {
      return C[64] || CT.C64;
    },
    /*transitions_type.Transition.rightToLeft*/get rightToLeft() {
      return C[62] || CT.C62;
    },
    /*transitions_type.Transition.leftToRight*/get leftToRight() {
      return C[58] || CT.C58;
    },
    /*transitions_type.Transition.upToDown*/get upToDown() {
      return C[60] || CT.C60;
    },
    /*transitions_type.Transition.downToUp*/get downToUp() {
      return C[59] || CT.C59;
    },
    /*transitions_type.Transition.rightToLeftWithFade*/get rightToLeftWithFade() {
      return C[65] || CT.C65;
    },
    /*transitions_type.Transition.leftToRightWithFade*/get leftToRightWithFade() {
      return C[66] || CT.C66;
    },
    /*transitions_type.Transition.zoom*/get zoom() {
      return C[63] || CT.C63;
    },
    /*transitions_type.Transition.topLevel*/get topLevel() {
      return C[70] || CT.C70;
    },
    /*transitions_type.Transition.noTransition*/get noTransition() {
      return C[61] || CT.C61;
    },
    /*transitions_type.Transition.cupertino*/get cupertino() {
      return C[67] || CT.C67;
    },
    /*transitions_type.Transition.cupertinoDialog*/get cupertinoDialog() {
      return C[77] || CT.C77;
    },
    /*transitions_type.Transition.size*/get size() {
      return C[68] || CT.C68;
    },
    /*transitions_type.Transition.circularReveal*/get circularReveal() {
      return C[72] || CT.C72;
    },
    /*transitions_type.Transition.native*/get native() {
      return C[71] || CT.C71;
    }
  }, false);
  snackbar.GetSnackBar = class GetSnackBar extends framework.StatefulWidget {
    get snackbarStatus() {
      return this[S$.snackbarStatus];
    }
    set snackbarStatus(value) {
      super.snackbarStatus = value;
    }
    get title() {
      return this[S$.title$4];
    }
    set title(value) {
      super.title = value;
    }
    get dismissDirection() {
      return this[S$.dismissDirection];
    }
    set dismissDirection(value) {
      super.dismissDirection = value;
    }
    get message() {
      return this[S$.message$3];
    }
    set message(value) {
      super.message = value;
    }
    get titleText() {
      return this[S$.titleText];
    }
    set titleText(value) {
      super.titleText = value;
    }
    get messageText() {
      return this[S$.messageText];
    }
    set messageText(value) {
      super.messageText = value;
    }
    get backgroundColor() {
      return this[S$0.backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get leftBarIndicatorColor() {
      return this[S$0.leftBarIndicatorColor];
    }
    set leftBarIndicatorColor(value) {
      super.leftBarIndicatorColor = value;
    }
    get boxShadows() {
      return this[S$0.boxShadows];
    }
    set boxShadows(value) {
      super.boxShadows = value;
    }
    get backgroundGradient() {
      return this[S$0.backgroundGradient];
    }
    set backgroundGradient(value) {
      super.backgroundGradient = value;
    }
    get icon() {
      return this[S$0.icon];
    }
    set icon(value) {
      super.icon = value;
    }
    get shouldIconPulse() {
      return this[S$0.shouldIconPulse];
    }
    set shouldIconPulse(value) {
      super.shouldIconPulse = value;
    }
    get mainButton() {
      return this[S$0.mainButton];
    }
    set mainButton(value) {
      super.mainButton = value;
    }
    get onTap() {
      return this[S$0.onTap];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get duration() {
      return this[S$0.duration];
    }
    set duration(value) {
      super.duration = value;
    }
    get showProgressIndicator() {
      return this[S$0.showProgressIndicator];
    }
    set showProgressIndicator(value) {
      super.showProgressIndicator = value;
    }
    get progressIndicatorController() {
      return this[S$0.progressIndicatorController];
    }
    set progressIndicatorController(value) {
      super.progressIndicatorController = value;
    }
    get progressIndicatorBackgroundColor() {
      return this[S$0.progressIndicatorBackgroundColor];
    }
    set progressIndicatorBackgroundColor(value) {
      super.progressIndicatorBackgroundColor = value;
    }
    get progressIndicatorValueColor() {
      return this[S$0.progressIndicatorValueColor];
    }
    set progressIndicatorValueColor(value) {
      super.progressIndicatorValueColor = value;
    }
    get isDismissible() {
      return this[S$0.isDismissible$1];
    }
    set isDismissible(value) {
      super.isDismissible = value;
    }
    get maxWidth() {
      return this[S$0.maxWidth];
    }
    set maxWidth(value) {
      super.maxWidth = value;
    }
    get margin() {
      return this[S$0.margin];
    }
    set margin(value) {
      super.margin = value;
    }
    get padding() {
      return this[S$0.padding];
    }
    set padding(value) {
      super.padding = value;
    }
    get borderRadius() {
      return this[S$0.borderRadius];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get borderColor() {
      return this[S$0.borderColor];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get borderWidth() {
      return this[S$0.borderWidth];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get snackPosition() {
      return this[S$0.snackPosition];
    }
    set snackPosition(value) {
      super.snackPosition = value;
    }
    get snackStyle() {
      return this[S$0.snackStyle];
    }
    set snackStyle(value) {
      super.snackStyle = value;
    }
    get forwardAnimationCurve() {
      return this[S$0.forwardAnimationCurve];
    }
    set forwardAnimationCurve(value) {
      super.forwardAnimationCurve = value;
    }
    get reverseAnimationCurve() {
      return this[S$0.reverseAnimationCurve];
    }
    set reverseAnimationCurve(value) {
      super.reverseAnimationCurve = value;
    }
    get animationDuration() {
      return this[S$0.animationDuration];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get barBlur() {
      return this[S$0.barBlur];
    }
    set barBlur(value) {
      super.barBlur = value;
    }
    get overlayBlur() {
      return this[S$0.overlayBlur];
    }
    set overlayBlur(value) {
      super.overlayBlur = value;
    }
    get overlayColor() {
      return this[S$0.overlayColor];
    }
    set overlayColor(value) {
      super.overlayColor = value;
    }
    get userInputForm() {
      return this[S$0.userInputForm];
    }
    set userInputForm(value) {
      super.userInputForm = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let titleText = opts && 'titleText' in opts ? opts.titleText : null;
      let messageText = opts && 'messageText' in opts ? opts.messageText : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
      let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
      let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
      let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
      let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
      let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
      let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
      let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
      let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
      let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
      let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
      let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
      let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
      let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
      let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
      let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
      let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : C[78] || CT.C78;
      let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
      let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
      return new snackbar.GetSnackBar.new({key: key, title: title, message: message, titleText: titleText, messageText: messageText, icon: icon, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, margin: margin, padding: padding, borderRadius: borderRadius, borderColor: borderColor, borderWidth: borderWidth, backgroundColor: backgroundColor, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, duration: duration, isDismissible: isDismissible, dismissDirection: dismissDirection, showProgressIndicator: showProgressIndicator, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackPosition: snackPosition, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, barBlur: barBlur, overlayBlur: overlayBlur, overlayColor: overlayColor, userInputForm: userInputForm, snackbarStatus: snackbarStatus});
    }
    createState() {
      return new snackbar.GetSnackBarState.new();
    }
    show() {
      return extension_navigation['ExtensionSnackbar|showSnackbar'](get_main.Get, this);
    }
  };
  (snackbar.GetSnackBar.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let messageText = opts && 'messageText' in opts ? opts.messageText : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
    let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
    let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
    let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
    let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
    let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
    let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
    let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
    let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
    let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
    let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
    let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
    let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
    let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
    let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
    let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
    let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : C[78] || CT.C78;
    let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
    let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
    this[S$.title$4] = title;
    this[S$.message$3] = message;
    this[S$.titleText] = titleText;
    this[S$.messageText] = messageText;
    this[S$0.icon] = icon;
    this[S$0.shouldIconPulse] = shouldIconPulse;
    this[S$0.maxWidth] = maxWidth;
    this[S$0.margin] = margin;
    this[S$0.padding] = padding;
    this[S$0.borderRadius] = borderRadius;
    this[S$0.borderColor] = borderColor;
    this[S$0.borderWidth] = borderWidth;
    this[S$0.backgroundColor$3] = backgroundColor;
    this[S$0.leftBarIndicatorColor] = leftBarIndicatorColor;
    this[S$0.boxShadows] = boxShadows;
    this[S$0.backgroundGradient] = backgroundGradient;
    this[S$0.mainButton] = mainButton;
    this[S$0.onTap] = onTap;
    this[S$0.duration] = duration;
    this[S$0.isDismissible$1] = isDismissible;
    this[S$.dismissDirection] = dismissDirection;
    this[S$0.showProgressIndicator] = showProgressIndicator;
    this[S$0.progressIndicatorController] = progressIndicatorController;
    this[S$0.progressIndicatorBackgroundColor] = progressIndicatorBackgroundColor;
    this[S$0.progressIndicatorValueColor] = progressIndicatorValueColor;
    this[S$0.snackPosition] = snackPosition;
    this[S$0.snackStyle] = snackStyle;
    this[S$0.forwardAnimationCurve] = forwardAnimationCurve;
    this[S$0.reverseAnimationCurve] = reverseAnimationCurve;
    this[S$0.animationDuration] = animationDuration;
    this[S$0.barBlur] = barBlur;
    this[S$0.overlayBlur] = overlayBlur;
    this[S$0.overlayColor] = overlayColor;
    this[S$0.userInputForm] = userInputForm;
    this[S$.snackbarStatus] = snackbarStatus;
    snackbar.GetSnackBar.__proto__.new.call(this, {key: key});
    ;
  }).prototype = snackbar.GetSnackBar.prototype;
  dart.addTypeTests(snackbar.GetSnackBar);
  dart.addTypeCaches(snackbar.GetSnackBar);
  dart.setMethodSignature(snackbar.GetSnackBar, () => ({
    __proto__: dart.getMethods(snackbar.GetSnackBar.__proto__),
    createState: dart.fnType(framework.State$(framework.StatefulWidget), []),
    show: dart.fnType(snackbar_controller.SnackbarController, [])
  }));
  dart.setLibraryUri(snackbar.GetSnackBar, I[41]);
  dart.setFieldSignature(snackbar.GetSnackBar, () => ({
    __proto__: dart.getFields(snackbar.GetSnackBar.__proto__),
    snackbarStatus: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(snackbar.SnackbarStatus)]))),
    title: dart.finalFieldType(dart.nullable(core.String)),
    dismissDirection: dart.finalFieldType(dart.nullable(dismissible.DismissDirection)),
    message: dart.finalFieldType(dart.nullable(core.String)),
    titleText: dart.finalFieldType(dart.nullable(framework.Widget)),
    messageText: dart.finalFieldType(dart.nullable(framework.Widget)),
    backgroundColor: dart.finalFieldType(ui.Color),
    leftBarIndicatorColor: dart.finalFieldType(dart.nullable(ui.Color)),
    boxShadows: dart.finalFieldType(dart.nullable(core.List$(box_shadow.BoxShadow))),
    backgroundGradient: dart.finalFieldType(dart.nullable(gradient.Gradient)),
    icon: dart.finalFieldType(dart.nullable(framework.Widget)),
    shouldIconPulse: dart.finalFieldType(core.bool),
    mainButton: dart.finalFieldType(dart.nullable(framework.Widget)),
    onTap: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [snackbar.GetSnackBar]))),
    duration: dart.finalFieldType(dart.nullable(core.Duration)),
    showProgressIndicator: dart.finalFieldType(core.bool),
    progressIndicatorController: dart.finalFieldType(dart.nullable(animation_controller.AnimationController)),
    progressIndicatorBackgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    progressIndicatorValueColor: dart.finalFieldType(dart.nullable(animation.Animation$(ui.Color))),
    isDismissible: dart.finalFieldType(core.bool),
    maxWidth: dart.finalFieldType(dart.nullable(core.double)),
    margin: dart.finalFieldType(edge_insets.EdgeInsets),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    borderRadius: dart.finalFieldType(core.double),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    borderWidth: dart.finalFieldType(dart.nullable(core.double)),
    snackPosition: dart.finalFieldType(snackbar.SnackPosition),
    snackStyle: dart.finalFieldType(snackbar.SnackStyle),
    forwardAnimationCurve: dart.finalFieldType(curves.Curve),
    reverseAnimationCurve: dart.finalFieldType(curves.Curve),
    animationDuration: dart.finalFieldType(core.Duration),
    barBlur: dart.finalFieldType(core.double),
    overlayBlur: dart.finalFieldType(core.double),
    overlayColor: dart.finalFieldType(dart.nullable(ui.Color)),
    userInputForm: dart.finalFieldType(dart.nullable(form.Form))
  }));
  snackbar.GetBar = class GetBar extends snackbar.GetSnackBar {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let titleText = opts && 'titleText' in opts ? opts.titleText : null;
      let messageText = opts && 'messageText' in opts ? opts.messageText : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
      let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
      let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
      let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
      let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
      let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
      let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
      let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
      let onTap = opts && 'onTap' in opts ? opts.onTap : null;
      let duration = opts && 'duration' in opts ? opts.duration : null;
      let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
      let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
      let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
      let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
      let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
      let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
      let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
      let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
      let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
      let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
      let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
      let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
      let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
      let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : C[78] || CT.C78;
      let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
      let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
      return new snackbar.GetBar.new({key: key, title: title, message: message, titleText: titleText, messageText: messageText, icon: icon, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, margin: margin, padding: padding, borderRadius: borderRadius, borderColor: borderColor, borderWidth: borderWidth, backgroundColor: backgroundColor, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, duration: duration, isDismissible: isDismissible, dismissDirection: dismissDirection, showProgressIndicator: showProgressIndicator, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackPosition: snackPosition, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, barBlur: barBlur, overlayBlur: overlayBlur, overlayColor: overlayColor, userInputForm: userInputForm, snackbarStatus: snackbarStatus});
    }
  };
  (snackbar.GetBar.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let messageText = opts && 'messageText' in opts ? opts.messageText : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let shouldIconPulse = opts && 'shouldIconPulse' in opts ? opts.shouldIconPulse : true;
    let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
    let margin = opts && 'margin' in opts ? opts.margin : C[19] || CT.C19;
    let padding = opts && 'padding' in opts ? opts.padding : C[20] || CT.C20;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 1;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[21] || CT.C21;
    let leftBarIndicatorColor = opts && 'leftBarIndicatorColor' in opts ? opts.leftBarIndicatorColor : null;
    let boxShadows = opts && 'boxShadows' in opts ? opts.boxShadows : null;
    let backgroundGradient = opts && 'backgroundGradient' in opts ? opts.backgroundGradient : null;
    let mainButton = opts && 'mainButton' in opts ? opts.mainButton : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let isDismissible = opts && 'isDismissible' in opts ? opts.isDismissible : true;
    let dismissDirection = opts && 'dismissDirection' in opts ? opts.dismissDirection : null;
    let showProgressIndicator = opts && 'showProgressIndicator' in opts ? opts.showProgressIndicator : false;
    let progressIndicatorController = opts && 'progressIndicatorController' in opts ? opts.progressIndicatorController : null;
    let progressIndicatorBackgroundColor = opts && 'progressIndicatorBackgroundColor' in opts ? opts.progressIndicatorBackgroundColor : null;
    let progressIndicatorValueColor = opts && 'progressIndicatorValueColor' in opts ? opts.progressIndicatorValueColor : null;
    let snackPosition = opts && 'snackPosition' in opts ? opts.snackPosition : C[23] || CT.C23;
    let snackStyle = opts && 'snackStyle' in opts ? opts.snackStyle : C[24] || CT.C24;
    let forwardAnimationCurve = opts && 'forwardAnimationCurve' in opts ? opts.forwardAnimationCurve : C[25] || CT.C25;
    let reverseAnimationCurve = opts && 'reverseAnimationCurve' in opts ? opts.reverseAnimationCurve : C[25] || CT.C25;
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : C[26] || CT.C26;
    let barBlur = opts && 'barBlur' in opts ? opts.barBlur : 0;
    let overlayBlur = opts && 'overlayBlur' in opts ? opts.overlayBlur : 0;
    let overlayColor = opts && 'overlayColor' in opts ? opts.overlayColor : C[78] || CT.C78;
    let userInputForm = opts && 'userInputForm' in opts ? opts.userInputForm : null;
    let snackbarStatus = opts && 'snackbarStatus' in opts ? opts.snackbarStatus : null;
    snackbar.GetBar.__proto__.new.call(this, {key: key, title: title, message: message, titleText: titleText, messageText: messageText, icon: icon, shouldIconPulse: shouldIconPulse, maxWidth: maxWidth, margin: margin, padding: padding, borderRadius: borderRadius, borderColor: borderColor, borderWidth: borderWidth, backgroundColor: backgroundColor, leftBarIndicatorColor: leftBarIndicatorColor, boxShadows: boxShadows, backgroundGradient: backgroundGradient, mainButton: mainButton, onTap: onTap, duration: duration, isDismissible: isDismissible, dismissDirection: dismissDirection, showProgressIndicator: showProgressIndicator, progressIndicatorController: progressIndicatorController, progressIndicatorBackgroundColor: progressIndicatorBackgroundColor, progressIndicatorValueColor: progressIndicatorValueColor, snackPosition: snackPosition, snackStyle: snackStyle, forwardAnimationCurve: forwardAnimationCurve, reverseAnimationCurve: reverseAnimationCurve, animationDuration: animationDuration, barBlur: barBlur, overlayBlur: overlayBlur, overlayColor: overlayColor, userInputForm: userInputForm, snackbarStatus: snackbarStatus});
    ;
  }).prototype = snackbar.GetBar.prototype;
  dart.addTypeTests(snackbar.GetBar);
  dart.addTypeCaches(snackbar.GetBar);
  dart.setLibraryUri(snackbar.GetBar, I[41]);
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(snackbar.GetSnackBar) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(snackbar.GetSnackBar)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(snackbar.GetSnackBar));
  snackbar.GetSnackBarState = class GetSnackBarState extends State_TickerProviderStateMixin$36 {
    get [S$0._fadeAnimation]() {
      let t187;
      t187 = this[S$0.__GetSnackBarState__fadeAnimation];
      return t187 == null ? dart.throw(new _internal.LateError.fieldNI("_fadeAnimation")) : t187;
    }
    set [S$0._fadeAnimation](_fadeAnimation$35param) {
      this[S$0.__GetSnackBarState__fadeAnimation] = _fadeAnimation$35param;
    }
    get [S$0._isTitlePresent]() {
      let t187;
      t187 = this[S$0.__GetSnackBarState__isTitlePresent];
      return t187 == null ? dart.throw(new _internal.LateError.fieldNI("_isTitlePresent")) : t187;
    }
    set [S$0._isTitlePresent](_isTitlePresent$35param) {
      this[S$0.__GetSnackBarState__isTitlePresent] = _isTitlePresent$35param;
    }
    get [S$0._messageTopMargin]() {
      let t187;
      t187 = this[S$0.__GetSnackBarState__messageTopMargin];
      return t187 == null ? dart.throw(new _internal.LateError.fieldNI("_messageTopMargin")) : t187;
    }
    set [S$0._messageTopMargin](_messageTopMargin$35param) {
      this[S$0.__GetSnackBarState__messageTopMargin] = _messageTopMargin$35param;
    }
    get [S$0._focusAttachment]() {
      let t187;
      t187 = this[S$0.__GetSnackBarState__focusAttachment];
      return t187 == null ? dart.throw(new _internal.LateError.fieldNI("_focusAttachment")) : t187;
    }
    set [S$0._focusAttachment](_focusAttachment$35param) {
      this[S$0.__GetSnackBarState__focusAttachment] = _focusAttachment$35param;
    }
    get [S$0._progressAnimation]() {
      let t187;
      t187 = this[S$0.__GetSnackBarState__progressAnimation];
      return t187 == null ? dart.throw(new _internal.LateError.fieldNI("_progressAnimation")) : t187;
    }
    set [S$0._progressAnimation](_progressAnimation$35param) {
      this[S$0.__GetSnackBarState__progressAnimation] = _progressAnimation$35param;
    }
    get buttonPadding() {
      if (this.widget.padding.right - 12 < 0) {
        return 4;
      } else {
        return this.widget.padding.right - 12;
      }
    }
    get [S$0._rowStyle]() {
      if (this.widget.mainButton != null && this.widget.icon == null) {
        return snackbar.RowStyle.action;
      } else if (this.widget.mainButton == null && this.widget.icon != null) {
        return snackbar.RowStyle.icon;
      } else if (this.widget.mainButton != null && this.widget.icon != null) {
        return snackbar.RowStyle.all;
      } else {
        return snackbar.RowStyle.none;
      }
    }
    build(context) {
      return new basic.Align.new({heightFactor: 1, child: new material.Material.new({color: this.widget.snackStyle === snackbar.SnackStyle.FLOATING ? colors.Colors.transparent : this.widget.backgroundColor, child: new safe_area.SafeArea.new({minimum: this.widget.snackPosition === snackbar.SnackPosition.BOTTOM ? new edge_insets.EdgeInsets.only({bottom: media_query.MediaQuery.of(context).viewInsets.bottom}) : new edge_insets.EdgeInsets.only({top: media_query.MediaQuery.of(context).padding.top}), bottom: this.widget.snackPosition === snackbar.SnackPosition.BOTTOM, top: this.widget.snackPosition === snackbar.SnackPosition.TOP, left: false, right: false, child: new basic.Stack.new({children: (() => {
                let t187 = T$.JSArrayOfWidget().of([new (T$.FutureBuilderOfSize()).new({future: this[S$0._boxHeightCompleter].future, builder: dart.fn((context, snapshot) => {
                      if (snapshot.hasData) {
                        if (this.widget.barBlur === 0) {
                          return this[S$0._emptyWidget];
                        }
                        return new basic.ClipRRect.new({borderRadius: new border_radius.BorderRadius.circular(this.widget.borderRadius), child: new basic.BackdropFilter.new({filter: ui.ImageFilter.blur({sigmaX: this.widget.barBlur, sigmaY: this.widget.barBlur}), child: new container.Container.new({height: dart.nullCheck(snapshot.data).height, width: dart.nullCheck(snapshot.data).width, decoration: new box_decoration.BoxDecoration.new({color: colors.Colors.transparent, borderRadius: new border_radius.BorderRadius.circular(this.widget.borderRadius)})})})});
                      } else {
                        return this[S$0._emptyWidget];
                      }
                    }, T$.BuildContextAndAsyncSnapshotOfSizeToWidget())})]);
                if (this.widget.userInputForm != null)
                  t187.push(this[S$0._containerWithForm]());
                else
                  t187.push(this[S$0._containerWithoutForm]());
                return t187;
              })()})})})});
    }
    dispose() {
      let t188, t188$, t188$0;
      t188 = this[S$0._fadeController];
      t188 == null ? null : t188.dispose();
      t188$ = this.widget.progressIndicatorController;
      t188$ == null ? null : t188$.removeListener(dart.bind(this, S$0._updateProgress));
      t188$0 = this.widget.progressIndicatorController;
      t188$0 == null ? null : t188$0.dispose();
      this[S$0._focusAttachment].detach();
      dart.nullCheck(this[S$0._focusNode]).dispose();
      super.dispose();
    }
    initState() {
      let t188;
      super.initState();
      if (!(this.widget.userInputForm != null || this.widget.message != null && dart.nullCheck(this.widget.message)[S$.$isNotEmpty] || this.widget.messageText != null)) dart.assertFailed("You need to either use message[String], or messageText[Widget] or define a userInputForm[Form] in GetSnackbar", I[42], 409, 9, "widget.userInputForm != null ||\n            ((widget.message != null && widget.message!.isNotEmpty) ||\n                widget.messageText != null)");
      this[S$0._isTitlePresent] = this.widget.title != null || this.widget.titleText != null;
      this[S$0._messageTopMargin] = this[S$0._isTitlePresent] ? 6 : this.widget.padding.top;
      this[S$0._configureLeftBarFuture]();
      this[S$0._configureProgressIndicatorAnimation]();
      if (this.widget.icon != null && this.widget.shouldIconPulse) {
        this[S$0._configurePulseAnimation]();
        t188 = this[S$0._fadeController];
        t188 == null ? null : t188.forward();
      }
      this[S$0._focusNode] = new focus_manager.FocusScopeNode.new();
      this[S$0._focusAttachment] = dart.nullCheck(this[S$0._focusNode]).attach(this.context);
    }
    [S$0._buildLeftBarIndicator]() {
      if (this.widget.leftBarIndicatorColor != null) {
        return new (T$.FutureBuilderOfSize()).new({future: this[S$0._boxHeightCompleter].future, builder: dart.fn((buildContext, snapshot) => {
            if (snapshot.hasData) {
              return new container.Container.new({color: this.widget.leftBarIndicatorColor, width: 5, height: dart.nullCheck(snapshot.data).height});
            } else {
              return this[S$0._emptyWidget];
            }
          }, T$.BuildContextAndAsyncSnapshotOfSizeToWidget())});
      } else {
        return this[S$0._emptyWidget];
      }
    }
    [S$0._configureLeftBarFuture]() {
      let t188;
      t188 = get_core.ambiguate(binding$.SchedulerBinding, binding$.SchedulerBinding.instance);
      t188 == null ? null : t188.addPostFrameCallback(dart.fn(_ => {
        let keyContext = this[S$0._backgroundBoxKey].currentContext;
        if (keyContext != null) {
          let box = box$.RenderBox.as(keyContext.findRenderObject());
          this[S$0._boxHeightCompleter].complete(box.size);
        }
      }, T$.DurationTovoid()));
    }
    [S$0._configureProgressIndicatorAnimation]() {
      if (this.widget.showProgressIndicator && this.widget.progressIndicatorController != null) {
        dart.nullCheck(this.widget.progressIndicatorController).addListener(dart.bind(this, S$0._updateProgress));
        this[S$0._progressAnimation] = new animations.CurvedAnimation.new({curve: curves.Curves.linear, parent: dart.nullCheck(this.widget.progressIndicatorController)});
      }
    }
    [S$0._configurePulseAnimation]() {
      this[S$0._fadeController] = new animation_controller.AnimationController.new({vsync: this, duration: this[S$0._pulseAnimationDuration]});
      this[S$0._fadeAnimation] = new (T$.TweenOfdouble()).new({begin: this[S$0._initialOpacity], end: this[S$0._finalOpacity]}).animate(new animations.CurvedAnimation.new({parent: dart.nullCheck(this[S$0._fadeController]), curve: curves.Curves.linear}));
      dart.nullCheck(this[S$0._fadeController]).addStatusListener(dart.fn(status => {
        if (status === animation.AnimationStatus.completed) {
          dart.nullCheck(this[S$0._fadeController]).reverse();
        }
        if (status === animation.AnimationStatus.dismissed) {
          dart.nullCheck(this[S$0._fadeController]).forward();
        }
      }, T$.AnimationStatusTovoid()));
      dart.nullCheck(this[S$0._fadeController]).forward();
    }
    [S$0._containerWithForm]() {
      return new container.Container.new({key: this[S$0._backgroundBoxKey], constraints: this.widget.maxWidth != null ? new box$.BoxConstraints.new({maxWidth: dart.nullCheck(this.widget.maxWidth)}) : null, decoration: new box_decoration.BoxDecoration.new({color: this.widget.backgroundColor, gradient: this.widget.backgroundGradient, boxShadow: this.widget.boxShadows, borderRadius: new border_radius.BorderRadius.circular(this.widget.borderRadius), border: this.widget.borderColor != null ? box_border.Border.all({color: dart.nullCheck(this.widget.borderColor), width: dart.nullCheck(this.widget.borderWidth)}) : null}), child: new basic.Padding.new({padding: C[79] || CT.C79, child: new focus_scope.FocusScope.new({child: dart.nullCheck(this.widget.userInputForm), node: this[S$0._focusNode], autofocus: true})})});
    }
    [S$0._containerWithoutForm]() {
      let t191, t190, t191$, t190$;
      let iconPadding = this.widget.padding.left > 16 ? this.widget.padding.left : 0;
      let left = this[S$0._rowStyle] === snackbar.RowStyle.icon || this[S$0._rowStyle] === snackbar.RowStyle.all ? 4 : this.widget.padding.left;
      let right = this[S$0._rowStyle] === snackbar.RowStyle.action || this[S$0._rowStyle] === snackbar.RowStyle.all ? 8 : this.widget.padding.right;
      return new container.Container.new({key: this[S$0._backgroundBoxKey], constraints: this.widget.maxWidth != null ? new box$.BoxConstraints.new({maxWidth: dart.nullCheck(this.widget.maxWidth)}) : null, decoration: new box_decoration.BoxDecoration.new({color: this.widget.backgroundColor, gradient: this.widget.backgroundGradient, boxShadow: this.widget.boxShadows, borderRadius: new border_radius.BorderRadius.circular(this.widget.borderRadius), border: this.widget.borderColor != null ? box_border.Border.all({color: dart.nullCheck(this.widget.borderColor), width: dart.nullCheck(this.widget.borderWidth)}) : null}), child: new basic.Column.new({mainAxisSize: flex.MainAxisSize.min, children: T$.JSArrayOfWidget().of([this.widget.showProgressIndicator ? new progress_indicator.LinearProgressIndicator.new({value: this.widget.progressIndicatorController != null ? this[S$0._progressAnimation].value : null, backgroundColor: this.widget.progressIndicatorBackgroundColor, valueColor: this.widget.progressIndicatorValueColor}) : this[S$0._emptyWidget], new basic.Row.new({mainAxisSize: flex.MainAxisSize.max, children: (() => {
                let t188 = T$.JSArrayOfWidget().of([this[S$0._buildLeftBarIndicator]()]);
                if (this[S$0._rowStyle] === snackbar.RowStyle.icon || this[S$0._rowStyle] === snackbar.RowStyle.all) t188.push(new basic.ConstrainedBox.new({constraints: new box$.BoxConstraints.tightFor({width: 42 + iconPadding}), child: this[S$0._getIcon]()}));
                t188.push(new basic.Expanded.new({flex: 1, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.stretch, mainAxisSize: flex.MainAxisSize.min, children: (() => {
                      let t189 = T$.JSArrayOfWidget().of([]);
                      if (this[S$0._isTitlePresent])
                        t189.push(new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: this.widget.padding.top, left: left, right: right}), child: (t190 = this.widget.titleText, t190 == null ? new text.Text.new((t191 = this.widget.title, t191 == null ? "" : t191), {style: new text_style.TextStyle.new({fontSize: 16, color: colors.Colors.white, fontWeight: ui.FontWeight.bold})}) : t190)}));
                      else
                        t189.push(this[S$0._emptyWidget]);
                      t189.push(new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: this[S$0._messageTopMargin], left: left, right: right, bottom: this.widget.padding.bottom}), child: (t190$ = this.widget.messageText, t190$ == null ? new text.Text.new((t191$ = this.widget.message, t191$ == null ? "" : t191$), {style: new text_style.TextStyle.new({fontSize: 14, color: colors.Colors.white})}) : t190$)}));
                      return t189;
                    })()})}));
                if (this[S$0._rowStyle] === snackbar.RowStyle.action || this[S$0._rowStyle] === snackbar.RowStyle.all) t188.push(new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({right: this.buttonPadding}), child: this.widget.mainButton}));
                return t188;
              })()})])})});
    }
    [S$0._getIcon]() {
      if (this.widget.icon != null && icon.Icon.is(this.widget.icon) && this.widget.shouldIconPulse) {
        return new transitions.FadeTransition.new({opacity: this[S$0._fadeAnimation], child: this.widget.icon});
      } else if (this.widget.icon != null) {
        return this.widget.icon;
      } else {
        return this[S$0._emptyWidget];
      }
    }
    [S$0._updateProgress]() {
      return this.setState(dart.fn(() => {
      }, T$.VoidTovoid()));
    }
    static ['_#new#tearOff']() {
      return new snackbar.GetSnackBarState.new();
    }
  };
  (snackbar.GetSnackBarState.new = function() {
    this[S$0._fadeController] = null;
    this[S$0.__GetSnackBarState__fadeAnimation] = null;
    this[S$0._emptyWidget] = new basic.SizedBox.new({width: 0, height: 0});
    this[S$0._initialOpacity] = 1;
    this[S$0._finalOpacity] = 0.4;
    this[S$0._pulseAnimationDuration] = new core.Duration.new({seconds: 1});
    this[S$0.__GetSnackBarState__isTitlePresent] = null;
    this[S$0.__GetSnackBarState__messageTopMargin] = null;
    this[S$0._focusNode] = null;
    this[S$0.__GetSnackBarState__focusAttachment] = null;
    this[S$0._boxHeightCompleter] = T$.CompleterOfSize().new();
    this[S$0.__GetSnackBarState__progressAnimation] = null;
    this[S$0._backgroundBoxKey] = T$.GlobalKeyOfStateOfStatefulWidget().new();
    snackbar.GetSnackBarState.__proto__.new.call(this);
    ;
  }).prototype = snackbar.GetSnackBarState.prototype;
  dart.addTypeTests(snackbar.GetSnackBarState);
  dart.addTypeCaches(snackbar.GetSnackBarState);
  dart.setMethodSignature(snackbar.GetSnackBarState, () => ({
    __proto__: dart.getMethods(snackbar.GetSnackBarState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    [S$0._buildLeftBarIndicator]: dart.fnType(framework.Widget, []),
    [S$0._configureLeftBarFuture]: dart.fnType(dart.void, []),
    [S$0._configureProgressIndicatorAnimation]: dart.fnType(dart.void, []),
    [S$0._configurePulseAnimation]: dart.fnType(dart.void, []),
    [S$0._containerWithForm]: dart.fnType(framework.Widget, []),
    [S$0._containerWithoutForm]: dart.fnType(framework.Widget, []),
    [S$0._getIcon]: dart.fnType(dart.nullable(framework.Widget), []),
    [S$0._updateProgress]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(snackbar.GetSnackBarState, () => ({
    __proto__: dart.getGetters(snackbar.GetSnackBarState.__proto__),
    [S$0._fadeAnimation]: animation.Animation$(core.double),
    [S$0._isTitlePresent]: core.bool,
    [S$0._messageTopMargin]: core.double,
    [S$0._focusAttachment]: focus_manager.FocusAttachment,
    [S$0._progressAnimation]: animations.CurvedAnimation,
    buttonPadding: core.double,
    [S$0._rowStyle]: snackbar.RowStyle
  }));
  dart.setSetterSignature(snackbar.GetSnackBarState, () => ({
    __proto__: dart.getSetters(snackbar.GetSnackBarState.__proto__),
    [S$0._fadeAnimation]: animation.Animation$(core.double),
    [S$0._isTitlePresent]: core.bool,
    [S$0._messageTopMargin]: core.double,
    [S$0._focusAttachment]: focus_manager.FocusAttachment,
    [S$0._progressAnimation]: animations.CurvedAnimation
  }));
  dart.setLibraryUri(snackbar.GetSnackBarState, I[41]);
  dart.setFieldSignature(snackbar.GetSnackBarState, () => ({
    __proto__: dart.getFields(snackbar.GetSnackBarState.__proto__),
    [S$0._fadeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S$0.__GetSnackBarState__fadeAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [S$0._emptyWidget]: dart.finalFieldType(framework.Widget),
    [S$0._initialOpacity]: dart.finalFieldType(core.double),
    [S$0._finalOpacity]: dart.finalFieldType(core.double),
    [S$0._pulseAnimationDuration]: dart.finalFieldType(core.Duration),
    [S$0.__GetSnackBarState__isTitlePresent]: dart.fieldType(dart.nullable(core.bool)),
    [S$0.__GetSnackBarState__messageTopMargin]: dart.fieldType(dart.nullable(core.double)),
    [S$0._focusNode]: dart.fieldType(dart.nullable(focus_manager.FocusScopeNode)),
    [S$0.__GetSnackBarState__focusAttachment]: dart.fieldType(dart.nullable(focus_manager.FocusAttachment)),
    [S$0._boxHeightCompleter]: dart.finalFieldType(async.Completer$(ui.Size)),
    [S$0.__GetSnackBarState__progressAnimation]: dart.fieldType(dart.nullable(animations.CurvedAnimation)),
    [S$0._backgroundBoxKey]: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))
  }));
  snackbar.RowStyle = class RowStyle extends core._Enum {
    [S$._enumToString]() {
      return "RowStyle." + this[S$._name];
    }
  };
  (snackbar.RowStyle.new = function(index, name) {
    snackbar.RowStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = snackbar.RowStyle.prototype;
  dart.addTypeTests(snackbar.RowStyle);
  dart.addTypeCaches(snackbar.RowStyle);
  dart.setMethodSignature(snackbar.RowStyle, () => ({
    __proto__: dart.getMethods(snackbar.RowStyle.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(snackbar.RowStyle, I[41]);
  dart.setStaticFieldSignature(snackbar.RowStyle, () => ['values', 'icon', 'action', 'all', 'none']);
  dart.defineLazy(snackbar.RowStyle, {
    /*snackbar.RowStyle.values*/get values() {
      return C[80] || CT.C80;
    },
    /*snackbar.RowStyle.icon*/get icon() {
      return C[81] || CT.C81;
    },
    /*snackbar.RowStyle.action*/get action() {
      return C[82] || CT.C82;
    },
    /*snackbar.RowStyle.all*/get all() {
      return C[83] || CT.C83;
    },
    /*snackbar.RowStyle.none*/get none() {
      return C[84] || CT.C84;
    }
  }, false);
  snackbar.SnackbarStatus = class SnackbarStatus extends core._Enum {
    [S$._enumToString]() {
      return "SnackbarStatus." + this[S$._name];
    }
  };
  (snackbar.SnackbarStatus.new = function(index, name) {
    snackbar.SnackbarStatus.__proto__.new.call(this, index, name);
    ;
  }).prototype = snackbar.SnackbarStatus.prototype;
  dart.addTypeTests(snackbar.SnackbarStatus);
  dart.addTypeCaches(snackbar.SnackbarStatus);
  dart.setMethodSignature(snackbar.SnackbarStatus, () => ({
    __proto__: dart.getMethods(snackbar.SnackbarStatus.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(snackbar.SnackbarStatus, I[41]);
  dart.setStaticFieldSignature(snackbar.SnackbarStatus, () => ['values', 'OPEN', 'CLOSED', 'OPENING', 'CLOSING']);
  dart.defineLazy(snackbar.SnackbarStatus, {
    /*snackbar.SnackbarStatus.values*/get values() {
      return C[85] || CT.C85;
    },
    /*snackbar.SnackbarStatus.OPEN*/get OPEN() {
      return C[86] || CT.C86;
    },
    /*snackbar.SnackbarStatus.CLOSED*/get CLOSED() {
      return C[87] || CT.C87;
    },
    /*snackbar.SnackbarStatus.OPENING*/get OPENING() {
      return C[88] || CT.C88;
    },
    /*snackbar.SnackbarStatus.CLOSING*/get CLOSING() {
      return C[89] || CT.C89;
    }
  }, false);
  snackbar.SnackPosition = class SnackPosition extends core._Enum {
    [S$._enumToString]() {
      return "SnackPosition." + this[S$._name];
    }
  };
  (snackbar.SnackPosition.new = function(index, name) {
    snackbar.SnackPosition.__proto__.new.call(this, index, name);
    ;
  }).prototype = snackbar.SnackPosition.prototype;
  dart.addTypeTests(snackbar.SnackPosition);
  dart.addTypeCaches(snackbar.SnackPosition);
  dart.setMethodSignature(snackbar.SnackPosition, () => ({
    __proto__: dart.getMethods(snackbar.SnackPosition.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(snackbar.SnackPosition, I[41]);
  dart.setStaticFieldSignature(snackbar.SnackPosition, () => ['values', 'TOP', 'BOTTOM']);
  dart.defineLazy(snackbar.SnackPosition, {
    /*snackbar.SnackPosition.values*/get values() {
      return C[90] || CT.C90;
    },
    /*snackbar.SnackPosition.TOP*/get TOP() {
      return C[91] || CT.C91;
    },
    /*snackbar.SnackPosition.BOTTOM*/get BOTTOM() {
      return C[23] || CT.C23;
    }
  }, false);
  snackbar.SnackStyle = class SnackStyle extends core._Enum {
    [S$._enumToString]() {
      return "SnackStyle." + this[S$._name];
    }
  };
  (snackbar.SnackStyle.new = function(index, name) {
    snackbar.SnackStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = snackbar.SnackStyle.prototype;
  dart.addTypeTests(snackbar.SnackStyle);
  dart.addTypeCaches(snackbar.SnackStyle);
  dart.setMethodSignature(snackbar.SnackStyle, () => ({
    __proto__: dart.getMethods(snackbar.SnackStyle.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(snackbar.SnackStyle, I[41]);
  dart.setStaticFieldSignature(snackbar.SnackStyle, () => ['values', 'FLOATING', 'GROUNDED']);
  dart.defineLazy(snackbar.SnackStyle, {
    /*snackbar.SnackStyle.values*/get values() {
      return C[92] || CT.C92;
    },
    /*snackbar.SnackStyle.FLOATING*/get FLOATING() {
      return C[24] || CT.C24;
    },
    /*snackbar.SnackStyle.GROUNDED*/get GROUNDED() {
      return C[93] || CT.C93;
    }
  }, false);
  snackbar_controller.SnackbarController = class SnackbarController extends core.Object {
    get key() {
      return this[S$0.key];
    }
    set key(value) {
      super.key = value;
    }
    get snackbar() {
      return this[S$0.snackbar];
    }
    set snackbar(value) {
      super.snackbar = value;
    }
    static get isSnackbarBeingShown() {
      return snackbar_controller.SnackbarController._snackBarQueue[S$0._isJobInProgress];
    }
    get [S$0._filterBlurAnimation]() {
      let t198;
      t198 = this[S$0.__SnackbarController__filterBlurAnimation];
      return t198 == null ? dart.throw(new _internal.LateError.fieldNI("_filterBlurAnimation")) : t198;
    }
    set [S$0._filterBlurAnimation](_filterBlurAnimation$35param) {
      this[S$0.__SnackbarController__filterBlurAnimation] = _filterBlurAnimation$35param;
    }
    get [S$0._filterColorAnimation]() {
      let t198;
      t198 = this[S$0.__SnackbarController__filterColorAnimation];
      return t198 == null ? dart.throw(new _internal.LateError.fieldNI("_filterColorAnimation")) : t198;
    }
    set [S$0._filterColorAnimation](_filterColorAnimation$35param) {
      this[S$0.__SnackbarController__filterColorAnimation] = _filterColorAnimation$35param;
    }
    get [S$0._snackbarStatus]() {
      return this[S$0.__SnackbarController__snackbarStatus_isSet] ? this[S$0.__SnackbarController__snackbarStatus] : dart.throw(new _internal.LateError.fieldNI("_snackbarStatus"));
    }
    set [S$0._snackbarStatus](_snackbarStatus$35param) {
      this[S$0.__SnackbarController__snackbarStatus_isSet] = true;
      this[S$0.__SnackbarController__snackbarStatus] = _snackbarStatus$35param;
    }
    get [S$0._initialAlignment]() {
      return this[S$0.__SnackbarController__initialAlignment_isSet] ? this[S$0.__SnackbarController__initialAlignment] : dart.throw(new _internal.LateError.fieldNI("_initialAlignment"));
    }
    set [S$0._initialAlignment](_initialAlignment$35param) {
      if (this[S$0.__SnackbarController__initialAlignment_isSet])
        dart.throw(new _internal.LateError.fieldAI("_initialAlignment"));
      else {
        this[S$0.__SnackbarController__initialAlignment_isSet] = true;
        this[S$0.__SnackbarController__initialAlignment] = _initialAlignment$35param;
      }
    }
    get [S$0._endAlignment]() {
      return this[S$0.__SnackbarController__endAlignment_isSet] ? this[S$0.__SnackbarController__endAlignment] : dart.throw(new _internal.LateError.fieldNI("_endAlignment"));
    }
    set [S$0._endAlignment](_endAlignment$35param) {
      if (this[S$0.__SnackbarController__endAlignment_isSet])
        dart.throw(new _internal.LateError.fieldAI("_endAlignment"));
      else {
        this[S$0.__SnackbarController__endAlignment_isSet] = true;
        this[S$0.__SnackbarController__endAlignment] = _endAlignment$35param;
      }
    }
    get [S$0._animation]() {
      let t198;
      t198 = this[S$0.__SnackbarController__animation];
      return t198 == null ? dart.throw(new _internal.LateError.fieldNI("_animation")) : t198;
    }
    set [S$0._animation](_animation$35param) {
      if (this[S$0.__SnackbarController__animation] == null)
        this[S$0.__SnackbarController__animation] = _animation$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_animation"));
    }
    get [S$0._controller]() {
      let t198;
      t198 = this[S$0.__SnackbarController__controller];
      return t198 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t198;
    }
    set [S$0._controller](_controller$35param) {
      if (this[S$0.__SnackbarController__controller] == null)
        this[S$0.__SnackbarController__controller] = _controller$35param;
      else
        dart.throw(new _internal.LateError.fieldAI("_controller"));
    }
    static ['_#new#tearOff'](snackbar) {
      return new snackbar_controller.SnackbarController.new(snackbar);
    }
    get future() {
      return this[S$0._transitionCompleter].future;
    }
    close(opts) {
      let withAnimations = opts && 'withAnimations' in opts ? opts.withAnimations : true;
      return async.async(dart.void, (function* close() {
        if (!withAnimations) {
          this[S$0._removeOverlay]();
          return;
        }
        this[S$0._removeEntry]();
        yield this.future;
      }).bind(this));
    }
    show() {
      return snackbar_controller.SnackbarController._snackBarQueue[S$0._addJob](this);
    }
    [S$0._cancelTimer]() {
      if (this[S$0._timer] != null && dart.nullCheck(this[S$0._timer]).isActive) {
        dart.nullCheck(this[S$0._timer]).cancel();
      }
    }
    [S$0._configureAlignment](snackPosition) {
      switch (this.snackbar.snackPosition) {
        case C[91] || CT.C91:
          {
            {
              this[S$0._initialAlignment] = C[94] || CT.C94;
              this[S$0._endAlignment] = C[95] || CT.C95;
              break;
            }
          }
        case C[23] || CT.C23:
          {
            {
              this[S$0._initialAlignment] = C[96] || CT.C96;
              this[S$0._endAlignment] = C[97] || CT.C97;
              break;
            }
          }
      }
    }
    [S$0._configureOverlay]() {
      this[S$0._overlayState] = overlay.Overlay.of(dart.nullCheck(extension_navigation['GetNavigation|get#overlayContext'](get_main.Get)));
      this[S$0._overlayEntries][S$.$clear]();
      this[S$0._overlayEntries][S$.$addAll](this[S$0._createOverlayEntries](this[S$0._getBodyWidget]()));
      dart.nullCheck(this[S$0._overlayState]).insertAll(this[S$0._overlayEntries]);
      this[S$0._configureSnackBarDisplay]();
    }
    [S$0._configureSnackBarDisplay]() {
      if (!!this[S$0._transitionCompleter].isCompleted) dart.assertFailed("Cannot configure a snackbar after disposing it.", I[43], 99, 12, "!_transitionCompleter.isCompleted");
      this[S$0._controller] = this[S$0._createAnimationController]();
      this[S$0._configureAlignment](this.snackbar.snackPosition);
      this[S$0._snackbarStatus] = this.snackbar.snackbarStatus;
      this[S$0._filterBlurAnimation] = this[S$0._createBlurFilterAnimation]();
      this[S$0._filterColorAnimation] = this[S$0._createColorOverlayColor]();
      this[S$0._animation] = this[S$0._createAnimation]();
      this[S$0._animation].addStatusListener(dart.bind(this, S$0._handleStatusChanged));
      this[S$0._configureTimer]();
      this[S$0._controller].forward();
    }
    [S$0._configureTimer]() {
      if (this.snackbar.duration != null) {
        if (this[S$0._timer] != null && dart.nullCheck(this[S$0._timer]).isActive) {
          dart.nullCheck(this[S$0._timer]).cancel();
        }
        this[S$0._timer] = async.Timer.new(dart.nullCheck(this.snackbar.duration), dart.bind(this, S$0._removeEntry));
      } else {
        if (this[S$0._timer] != null) {
          dart.nullCheck(this[S$0._timer]).cancel();
        }
      }
    }
    [S$0._createAnimation]() {
      if (!!this[S$0._transitionCompleter].isCompleted) dart.assertFailed("Cannot create a animation from a disposed snackbar", I[43], 129, 12, "!_transitionCompleter.isCompleted");
      return new tweens.AlignmentTween.new({begin: this[S$0._initialAlignment], end: this[S$0._endAlignment]}).animate(new animations.CurvedAnimation.new({parent: this[S$0._controller], curve: this.snackbar.forwardAnimationCurve, reverseCurve: this.snackbar.reverseAnimationCurve}));
    }
    [S$0._createAnimationController]() {
      if (!!this[S$0._transitionCompleter].isCompleted) dart.assertFailed("Cannot create a animationController from a disposed snackbar", I[43], 144, 12, "!_transitionCompleter.isCompleted");
      if (!this.snackbar.animationDuration['>='](core.Duration.zero)) dart.assertFailed(null, I[43], 146, 12, "snackbar.animationDuration >= Duration.zero");
      return new animation_controller.AnimationController.new({duration: this.snackbar.animationDuration, debugLabel: dart.str(this[S$.$runtimeType]), vsync: dart.nullCheck(this[S$0._overlayState])});
    }
    [S$0._createBlurFilterAnimation]() {
      return new (T$.TweenOfdouble()).new({begin: 0, end: this.snackbar.overlayBlur}).animate(new animations.CurvedAnimation.new({parent: this[S$0._controller], curve: C[98] || CT.C98}));
    }
    [S$0._createColorOverlayColor]() {
      return new tween.ColorTween.new({begin: C[78] || CT.C78, end: this.snackbar.overlayColor}).animate(new animations.CurvedAnimation.new({parent: this[S$0._controller], curve: C[98] || CT.C98}));
    }
    [S$0._createOverlayEntries](child) {
      return (() => {
        let t198 = T$.JSArrayOfOverlayEntry().of([]);
        if (this.snackbar.overlayBlur > 0) t198[S$.$addAll](T$.JSArrayOfOverlayEntry().of([new overlay.OverlayEntry.new({builder: dart.fn(context => new gesture_detector.GestureDetector.new({onTap: dart.fn(() => {
                if (this.snackbar.isDismissible && !this[S$0._onTappedDismiss]) {
                  this[S$0._onTappedDismiss] = true;
                  this.close();
                }
              }, T$.VoidTovoid()), child: new transitions.AnimatedBuilder.new({animation: this[S$0._filterBlurAnimation], builder: dart.fn((context, child) => new basic.BackdropFilter.new({filter: ui.ImageFilter.blur({sigmaX: math.max(core.double, 0.001, this[S$0._filterBlurAnimation].value), sigmaY: math.max(core.double, 0.001, this[S$0._filterBlurAnimation].value)}), child: new container.Container.new({constraints: C[100] || CT.C100, color: this[S$0._filterColorAnimation].value})}), T$.BuildContextAndWidgetNToBackdropFilter())})}), T$.BuildContextToGestureDetector()), maintainState: false, opaque: false})]));
        t198.push(new overlay.OverlayEntry.new({builder: dart.fn(context => new basic.Semantics.new({child: new transitions.AlignTransition.new({alignment: this[S$0._animation], child: this.snackbar.isDismissible ? this[S$0._getDismissibleSnack](child) : this[S$0._getSnackbarContainer](child)}), focused: false, container: true, explicitChildNodes: true}), T$.BuildContextToSemantics()), maintainState: false, opaque: false}));
        return t198;
      })();
    }
    [S$0._getBodyWidget]() {
      return new basic.Builder.new({builder: dart.fn(_ => new gesture_detector.GestureDetector.new({child: this.snackbar, onTap: this.snackbar.onTap != null ? dart.fn(() => {
            let t199;
            t199 = this.snackbar.onTap;
            return t199 == null ? null : t199(this.snackbar);
          }, T$.VoidTovoid()) : null}), T$.BuildContextToGestureDetector())});
    }
    [S$0._getDefaultDismissDirection]() {
      if (this.snackbar.snackPosition === snackbar.SnackPosition.TOP) {
        return dismissible.DismissDirection.up;
      }
      return dismissible.DismissDirection.down;
    }
    [S$0._getDismissibleSnack](child) {
      let t199;
      return new dismissible.Dismissible.new({direction: (t199 = this.snackbar.dismissDirection, t199 == null ? this[S$0._getDefaultDismissDirection]() : t199), resizeDuration: null, confirmDismiss: dart.fn(_ => {
          if (this[S$0._currentStatus] === snackbar.SnackbarStatus.OPENING || this[S$0._currentStatus] === snackbar.SnackbarStatus.CLOSING) {
            return T$.FutureOfboolN().value(false);
          }
          return T$.FutureOfboolN().value(true);
        }, T$.DismissDirectionToFutureOfboolN()), key: C[101] || CT.C101, onDismissed: dart.fn(_ => {
          this[S$0._wasDismissedBySwipe] = true;
          this[S$0._removeEntry]();
        }, T$.DismissDirectionTovoid()), child: this[S$0._getSnackbarContainer](child)});
    }
    [S$0._getSnackbarContainer](child) {
      return new container.Container.new({margin: this.snackbar.margin, child: child});
    }
    [S$0._handleStatusChanged](status) {
      let t199, t199$, t199$0, t199$1;
      switch (status) {
        case C[102] || CT.C102:
          {
            this[S$0._currentStatus] = snackbar.SnackbarStatus.OPEN;
            t199 = this[S$0._snackbarStatus];
            t199 == null ? null : t199(this[S$0._currentStatus]);
            if (this[S$0._overlayEntries][S$.$isNotEmpty]) this[S$0._overlayEntries][S$.$first].opaque = false;
            break;
          }
        case C[103] || CT.C103:
          {
            this[S$0._currentStatus] = snackbar.SnackbarStatus.OPENING;
            t199$ = this[S$0._snackbarStatus];
            t199$ == null ? null : t199$(this[S$0._currentStatus]);
            break;
          }
        case C[104] || CT.C104:
          {
            this[S$0._currentStatus] = snackbar.SnackbarStatus.CLOSING;
            t199$0 = this[S$0._snackbarStatus];
            t199$0 == null ? null : t199$0(this[S$0._currentStatus]);
            if (this[S$0._overlayEntries][S$.$isNotEmpty]) this[S$0._overlayEntries][S$.$first].opaque = false;
            break;
          }
        case C[105] || CT.C105:
          {
            if (!!this[S$0._overlayEntries][S$.$first].opaque) dart.assertFailed(null, I[43], 294, 16, "!_overlayEntries.first.opaque");
            this[S$0._currentStatus] = snackbar.SnackbarStatus.CLOSED;
            t199$1 = this[S$0._snackbarStatus];
            t199$1 == null ? null : t199$1(this[S$0._currentStatus]);
            this[S$0._removeOverlay]();
            break;
          }
      }
    }
    [S$0._removeEntry]() {
      if (!!this[S$0._transitionCompleter].isCompleted) dart.assertFailed("Cannot remove entry from a disposed snackbar", I[43], 304, 7, "!_transitionCompleter.isCompleted");
      this[S$0._cancelTimer]();
      if (this[S$0._wasDismissedBySwipe]) {
        async.Timer.new(C[13] || CT.C13, dart.bind(this[S$0._controller], 'reset'));
        this[S$0._wasDismissedBySwipe] = false;
      } else {
        this[S$0._controller].reverse();
      }
    }
    [S$0._removeOverlay]() {
      for (let element of this[S$0._overlayEntries]) {
        element.remove();
      }
      if (!!this[S$0._transitionCompleter].isCompleted) dart.assertFailed("Cannot remove overlay from a disposed snackbar", I[43], 323, 12, "!_transitionCompleter.isCompleted");
      this[S$0._controller].dispose();
      this[S$0._overlayEntries][S$.$clear]();
      this[S$0._transitionCompleter].complete();
    }
    [S$0._show]() {
      this[S$0._configureOverlay]();
      return this.future;
    }
    static cancelAllSnackbars() {
      snackbar_controller.SnackbarController._snackBarQueue[S$0._cancelAllJobs]();
    }
    static closeCurrentSnackbar() {
      return async.async(dart.void, function* closeCurrentSnackbar() {
        yield snackbar_controller.SnackbarController._snackBarQueue[S$0._closeCurrentJob]();
      });
    }
  };
  (snackbar_controller.SnackbarController.new = function(snackbar) {
    this[S$0.key] = T$.GlobalKeyOfGetSnackBarState().new();
    this[S$0.__SnackbarController__filterBlurAnimation] = null;
    this[S$0.__SnackbarController__filterColorAnimation] = null;
    this[S$0._transitionCompleter] = async.Completer.new();
    this[S$0.__SnackbarController__snackbarStatus] = null;
    this[S$0.__SnackbarController__snackbarStatus_isSet] = false;
    this[S$0.__SnackbarController__initialAlignment] = null;
    this[S$0.__SnackbarController__initialAlignment_isSet] = false;
    this[S$0.__SnackbarController__endAlignment] = null;
    this[S$0.__SnackbarController__endAlignment_isSet] = false;
    this[S$0._wasDismissedBySwipe] = false;
    this[S$0._onTappedDismiss] = false;
    this[S$0._timer] = null;
    this[S$0.__SnackbarController__animation] = null;
    this[S$0.__SnackbarController__controller] = null;
    this[S$0._currentStatus] = null;
    this[S$0._overlayEntries] = T$.JSArrayOfOverlayEntry().of([]);
    this[S$0._overlayState] = null;
    this[S$0.snackbar] = snackbar;
    ;
  }).prototype = snackbar_controller.SnackbarController.prototype;
  dart.addTypeTests(snackbar_controller.SnackbarController);
  dart.addTypeCaches(snackbar_controller.SnackbarController);
  dart.setMethodSignature(snackbar_controller.SnackbarController, () => ({
    __proto__: dart.getMethods(snackbar_controller.SnackbarController.__proto__),
    close: dart.fnType(async.Future$(dart.void), [], {withAnimations: core.bool}, {}),
    show: dart.fnType(async.Future$(dart.void), []),
    [S$0._cancelTimer]: dart.fnType(dart.void, []),
    [S$0._configureAlignment]: dart.fnType(dart.void, [snackbar.SnackPosition]),
    [S$0._configureOverlay]: dart.fnType(dart.void, []),
    [S$0._configureSnackBarDisplay]: dart.fnType(dart.void, []),
    [S$0._configureTimer]: dart.fnType(dart.void, []),
    [S$0._createAnimation]: dart.fnType(animation.Animation$(alignment$.Alignment), []),
    [S$0._createAnimationController]: dart.fnType(animation_controller.AnimationController, []),
    [S$0._createBlurFilterAnimation]: dart.fnType(animation.Animation$(core.double), []),
    [S$0._createColorOverlayColor]: dart.fnType(animation.Animation$(dart.nullable(ui.Color)), []),
    [S$0._createOverlayEntries]: dart.fnType(core.Iterable$(overlay.OverlayEntry), [framework.Widget]),
    [S$0._getBodyWidget]: dart.fnType(framework.Widget, []),
    [S$0._getDefaultDismissDirection]: dart.fnType(dismissible.DismissDirection, []),
    [S$0._getDismissibleSnack]: dart.fnType(framework.Widget, [framework.Widget]),
    [S$0._getSnackbarContainer]: dart.fnType(framework.Widget, [framework.Widget]),
    [S$0._handleStatusChanged]: dart.fnType(dart.void, [animation.AnimationStatus]),
    [S$0._removeEntry]: dart.fnType(dart.void, []),
    [S$0._removeOverlay]: dart.fnType(dart.void, []),
    [S$0._show]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setStaticMethodSignature(snackbar_controller.SnackbarController, () => ['cancelAllSnackbars', 'closeCurrentSnackbar']);
  dart.setGetterSignature(snackbar_controller.SnackbarController, () => ({
    __proto__: dart.getGetters(snackbar_controller.SnackbarController.__proto__),
    [S$0._filterBlurAnimation]: animation.Animation$(core.double),
    [S$0._filterColorAnimation]: animation.Animation$(dart.nullable(ui.Color)),
    [S$0._snackbarStatus]: dart.nullable(dart.fnType(dart.void, [dart.nullable(snackbar.SnackbarStatus)])),
    [S$0._initialAlignment]: dart.nullable(alignment$.Alignment),
    [S$0._endAlignment]: dart.nullable(alignment$.Alignment),
    [S$0._animation]: animation.Animation$(alignment$.Alignment),
    [S$0._controller]: animation_controller.AnimationController,
    future: async.Future$(dart.void)
  }));
  dart.setSetterSignature(snackbar_controller.SnackbarController, () => ({
    __proto__: dart.getSetters(snackbar_controller.SnackbarController.__proto__),
    [S$0._filterBlurAnimation]: animation.Animation$(core.double),
    [S$0._filterColorAnimation]: animation.Animation$(dart.nullable(ui.Color)),
    [S$0._snackbarStatus]: dart.nullable(dart.fnType(dart.void, [dart.nullable(snackbar.SnackbarStatus)])),
    [S$0._initialAlignment]: dart.nullable(alignment$.Alignment),
    [S$0._endAlignment]: dart.nullable(alignment$.Alignment),
    [S$0._animation]: animation.Animation$(alignment$.Alignment),
    [S$0._controller]: animation_controller.AnimationController
  }));
  dart.setStaticGetterSignature(snackbar_controller.SnackbarController, () => ['isSnackbarBeingShown']);
  dart.setLibraryUri(snackbar_controller.SnackbarController, I[44]);
  dart.setFieldSignature(snackbar_controller.SnackbarController, () => ({
    __proto__: dart.getFields(snackbar_controller.SnackbarController.__proto__),
    key: dart.finalFieldType(framework.GlobalKey$(snackbar.GetSnackBarState)),
    [S$0.__SnackbarController__filterBlurAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [S$0.__SnackbarController__filterColorAnimation]: dart.fieldType(dart.nullable(animation.Animation$(dart.nullable(ui.Color)))),
    snackbar: dart.finalFieldType(snackbar.GetSnackBar),
    [S$0._transitionCompleter]: dart.finalFieldType(async.Completer),
    [S$0.__SnackbarController__snackbarStatus]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(snackbar.SnackbarStatus)]))),
    [S$0.__SnackbarController__snackbarStatus_isSet]: dart.fieldType(core.bool),
    [S$0.__SnackbarController__initialAlignment]: dart.fieldType(dart.nullable(alignment$.Alignment)),
    [S$0.__SnackbarController__initialAlignment_isSet]: dart.fieldType(core.bool),
    [S$0.__SnackbarController__endAlignment]: dart.fieldType(dart.nullable(alignment$.Alignment)),
    [S$0.__SnackbarController__endAlignment_isSet]: dart.fieldType(core.bool),
    [S$0._wasDismissedBySwipe]: dart.fieldType(core.bool),
    [S$0._onTappedDismiss]: dart.fieldType(core.bool),
    [S$0._timer]: dart.fieldType(dart.nullable(async.Timer)),
    [S$0.__SnackbarController__animation]: dart.fieldType(dart.nullable(animation.Animation$(alignment$.Alignment))),
    [S$0.__SnackbarController__controller]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [S$0._currentStatus]: dart.fieldType(dart.nullable(snackbar.SnackbarStatus)),
    [S$0._overlayEntries]: dart.finalFieldType(core.List$(overlay.OverlayEntry)),
    [S$0._overlayState]: dart.fieldType(dart.nullable(overlay.OverlayState))
  }));
  dart.setStaticFieldSignature(snackbar_controller.SnackbarController, () => ['_snackBarQueue']);
  dart.defineLazy(snackbar_controller.SnackbarController, {
    /*snackbar_controller.SnackbarController._snackBarQueue*/get _snackBarQueue() {
      return new snackbar_controller._SnackBarQueue.new();
    }
  }, false);
  snackbar_controller._SnackBarQueue = class _SnackBarQueue extends core.Object {
    get [S$0._currentSnackbar]() {
      if (this[S$0._snackbarList][S$.$isEmpty]) return null;
      return this[S$0._snackbarList][S$.$first];
    }
    get [S$0._isJobInProgress]() {
      return this[S$0._snackbarList][S$.$isNotEmpty];
    }
    [S$0._addJob](job) {
      return async.async(dart.void, (function* _addJob() {
        this[S$0._snackbarList][S$.$add](job);
        let data = (yield this[S$0._queue].add(dart.dynamic, dart.bind(job, S$0._show)));
        this[S$0._snackbarList][S$.$remove](job);
        return data;
      }).bind(this));
    }
    [S$0._cancelAllJobs]() {
      return async.async(dart.void, (function* _cancelAllJobs() {
        let t199;
        yield (t199 = this[S$0._currentSnackbar], t199 == null ? null : t199.close());
        this[S$0._queue].cancelAllJobs();
        this[S$0._snackbarList][S$.$clear]();
      }).bind(this));
    }
    [S$0._closeCurrentJob]() {
      return async.async(dart.void, (function* _closeCurrentJob() {
        if (this[S$0._currentSnackbar] == null) return;
        yield dart.nullCheck(this[S$0._currentSnackbar]).close();
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new snackbar_controller._SnackBarQueue.new();
    }
  };
  (snackbar_controller._SnackBarQueue.new = function() {
    this[S$0._queue] = new get_queue.GetQueue.new();
    this[S$0._snackbarList] = T$.JSArrayOfSnackbarController().of([]);
    ;
  }).prototype = snackbar_controller._SnackBarQueue.prototype;
  dart.addTypeTests(snackbar_controller._SnackBarQueue);
  dart.addTypeCaches(snackbar_controller._SnackBarQueue);
  dart.setMethodSignature(snackbar_controller._SnackBarQueue, () => ({
    __proto__: dart.getMethods(snackbar_controller._SnackBarQueue.__proto__),
    [S$0._addJob]: dart.fnType(async.Future$(dart.void), [snackbar_controller.SnackbarController]),
    [S$0._cancelAllJobs]: dart.fnType(async.Future$(dart.void), []),
    [S$0._closeCurrentJob]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(snackbar_controller._SnackBarQueue, () => ({
    __proto__: dart.getGetters(snackbar_controller._SnackBarQueue.__proto__),
    [S$0._currentSnackbar]: dart.nullable(snackbar_controller.SnackbarController),
    [S$0._isJobInProgress]: core.bool
  }));
  dart.setLibraryUri(snackbar_controller._SnackBarQueue, I[44]);
  dart.setFieldSignature(snackbar_controller._SnackBarQueue, () => ({
    __proto__: dart.getFields(snackbar_controller._SnackBarQueue.__proto__),
    [S$0._queue]: dart.finalFieldType(get_queue.GetQueue),
    [S$0._snackbarList]: dart.finalFieldType(core.List$(snackbar_controller.SnackbarController))
  }));
  const _is_GetStream_default = Symbol('_is_GetStream_default');
  rx_stream.GetStream$ = dart.generic(T => {
    var __t$LightSubscriptionOfT = () => (__t$LightSubscriptionOfT = dart.constFn(rx_stream.LightSubscription$(T)))();
    var __t$JSArrayOfLightSubscriptionOfT = () => (__t$JSArrayOfLightSubscriptionOfT = dart.constFn(_interceptors.JSArray$(__t$LightSubscriptionOfT())))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$TToNvoid = () => (__t$TToNvoid = dart.constFn(dart.nullable(__t$TTovoid())))();
    var __t$GetStreamTransformationOfT = () => (__t$GetStreamTransformationOfT = dart.constFn(rx_stream.GetStreamTransformation$(T)))();
    class GetStream extends core.Object {
      get onListen() {
        return this[S$0.onListen];
      }
      set onListen(value) {
        this[S$0.onListen] = value;
      }
      get onPause() {
        return this[S$0.onPause];
      }
      set onPause(value) {
        this[S$0.onPause] = value;
      }
      get onResume() {
        return this[S$0.onResume];
      }
      set onResume(value) {
        this[S$0.onResume] = value;
      }
      get onCancel() {
        return this[S$0.onCancel];
      }
      set onCancel(value) {
        this[S$0.onCancel] = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onPause = opts && 'onPause' in opts ? opts.onPause : null;
        let onResume = opts && 'onResume' in opts ? opts.onResume : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return new (rx_stream.GetStream$(T)).new({onListen: onListen, onPause: onPause, onResume: onResume, onCancel: onCancel});
      }
      removeSubscription(subs) {
        __t$LightSubscriptionOfT().as(subs);
        return async.async(T$.boolN(), (function* removeSubscription() {
          let t199;
          if (!dart.nullCheck(this[S$0._isBusy])) {
            return dart.nullCheck(this[S$0._onData])[S$.$remove](subs);
          } else {
            yield async.Future.delayed(core.Duration.zero);
            t199 = this[S$0._onData];
            return t199 == null ? null : t199[S$.$remove](subs);
          }
        }).bind(this));
      }
      addSubscription(subs) {
        __t$LightSubscriptionOfT().as(subs);
        return async.async(dart.void, (function* addSubscription() {
          if (!dart.nullCheck(this[S$0._isBusy])) {
            return dart.nullCheck(this[S$0._onData])[S$.$add](subs);
          } else {
            yield async.Future.delayed(core.Duration.zero);
            return dart.nullCheck(this[S$0._onData])[S$.$add](subs);
          }
        }).bind(this));
      }
      get length() {
        let t199;
        t199 = this[S$0._onData];
        return t199 == null ? null : t199[S$.$length];
      }
      get hasListeners() {
        return dart.nullCheck(this[S$0._onData])[S$.$isNotEmpty];
      }
      [S$0._notifyData](data) {
        let t199;
        this[S$0._isBusy] = true;
        for (let item of dart.nullCheck(this[S$0._onData])) {
          if (!item.isPaused) {
            t199 = __t$TToNvoid().as(item[S$0._data]);
            t199 == null ? null : t199(data);
          }
        }
        this[S$0._isBusy] = false;
      }
      [S$0._notifyError](error, stackTrace = null) {
        let t199, t199$, t199$0, t199$1;
        if (!!this.isClosed) dart.assertFailed("You cannot add errors to a closed stream.", I[45], 54, 12, "!isClosed");
        this[S$0._isBusy] = true;
        let itemsToRemove = __t$JSArrayOfLightSubscriptionOfT().of([]);
        for (let item of dart.nullCheck(this[S$0._onData])) {
          if (!item.isPaused) {
            if (stackTrace != null) {
              t199 = item[S$0._onError];
              t199 == null ? null : dart.dcall(t199, [error, stackTrace]);
            } else {
              t199$ = item[S$0._onError];
              t199$ == null ? null : dart.dcall(t199$, [error]);
            }
            if (dart.test((t199$0 = item.cancelOnError, t199$0 == null ? false : t199$0))) {
              itemsToRemove[S$.$add](item);
              item.pause();
              t199$1 = item[S$0._onDone];
              t199$1 == null ? null : t199$1();
            }
          }
        }
        for (let item of itemsToRemove) {
          dart.nullCheck(this[S$0._onData])[S$.$remove](item);
        }
        this[S$0._isBusy] = false;
      }
      [S$0._notifyDone]() {
        let t199;
        if (!!this.isClosed) dart.assertFailed("You cannot close a closed stream.", I[45], 80, 12, "!isClosed");
        this[S$0._isBusy] = true;
        for (let item of dart.nullCheck(this[S$0._onData])) {
          if (!item.isPaused) {
            t199 = item[S$0._onDone];
            t199 == null ? null : t199();
          }
        }
        this[S$0._isBusy] = false;
      }
      get value() {
        return this[S$0._value$3];
      }
      add(event) {
        T.as(event);
        if (!!this.isClosed) dart.assertFailed("You cannot add event to closed Stream", I[45], 95, 12, "!isClosed");
        this[S$0._value$3] = event;
        this[S$0._notifyData](event);
      }
      get isClosed() {
        return this[S$0._onData] == null;
      }
      addError(error, stackTrace = null) {
        if (!!this.isClosed) dart.assertFailed("You cannot add error to closed Stream", I[45], 103, 12, "!isClosed");
        this[S$0._notifyError](error, stackTrace);
      }
      close() {
        if (!!this.isClosed) dart.assertFailed("You cannot close a closed Stream", I[45], 108, 12, "!isClosed");
        this[S$0._notifyDone]();
        this[S$0._onData] = null;
        this[S$0._isBusy] = null;
        this[S$0._value$3] = null;
      }
      listen(onData, opts) {
        let t199, t199$;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let subs = (t199 = new (__t$LightSubscriptionOfT()).new(dart.bind(this, 'removeSubscription'), {onPause: this.onPause, onResume: this.onResume, onCancel: this.onCancel}), (() => {
          t199.onData(onData);
          t199.onError(onError);
          t199.onDone(onDone);
          t199.cancelOnError = cancelOnError;
          return t199;
        })());
        this.addSubscription(subs);
        t199$ = this.onListen;
        t199$ == null ? null : t199$();
        return subs;
      }
      get stream() {
        return new (__t$GetStreamTransformationOfT()).new(dart.bind(this, 'addSubscription'), dart.bind(this, 'removeSubscription'));
      }
    }
    (GetStream.new = function(opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      this[S$0._onData] = __t$JSArrayOfLightSubscriptionOfT().of([]);
      this[S$0._isBusy] = false;
      this[S$0._value$3] = null;
      this[S$0.onListen] = onListen;
      this[S$0.onPause] = onPause;
      this[S$0.onResume] = onResume;
      this[S$0.onCancel] = onCancel;
      ;
    }).prototype = GetStream.prototype;
    dart.addTypeTests(GetStream);
    GetStream.prototype[_is_GetStream_default] = true;
    dart.addTypeCaches(GetStream);
    dart.setMethodSignature(GetStream, () => ({
      __proto__: dart.getMethods(GetStream.__proto__),
      removeSubscription: dart.fnType(async.FutureOr$(dart.nullable(core.bool)), [dart.nullable(core.Object)]),
      addSubscription: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._notifyData]: dart.fnType(dart.void, [T]),
      [S$0._notifyError]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      [S$0._notifyDone]: dart.fnType(dart.void, []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      close: dart.fnType(dart.void, []),
      listen: dart.fnType(rx_stream.LightSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setGetterSignature(GetStream, () => ({
      __proto__: dart.getGetters(GetStream.__proto__),
      length: dart.nullable(core.int),
      hasListeners: core.bool,
      value: dart.nullable(T),
      isClosed: core.bool,
      stream: async.Stream$(T)
    }));
    dart.setLibraryUri(GetStream, I[46]);
    dart.setFieldSignature(GetStream, () => ({
      __proto__: dart.getFields(GetStream.__proto__),
      onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onPause: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onResume: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$0._onData]: dart.fieldType(dart.nullable(core.List$(rx_stream.LightSubscription$(T)))),
      [S$0._isBusy]: dart.fieldType(dart.nullable(core.bool)),
      [S$0._value$3]: dart.fieldType(dart.nullable(T))
    }));
    return GetStream;
  });
  rx_stream.GetStream = rx_stream.GetStream$();
  dart.addTypeTests(rx_stream.GetStream, _is_GetStream_default);
  const _is_LightSubscription_default = Symbol('_is_LightSubscription_default');
  rx_stream.LightSubscription$ = dart.generic(T => {
    class LightSubscription extends async.StreamSubscription$(T) {
      get onPause() {
        return this[S$0.onPause$1];
      }
      set onPause(value) {
        super.onPause = value;
      }
      get onResume() {
        return this[S$0.onResume$1];
      }
      set onResume(value) {
        super.onResume = value;
      }
      get onCancel() {
        return this[S$0.onCancel$1];
      }
      set onCancel(value) {
        super.onCancel = value;
      }
      get cancelOnError() {
        return this[S$0.cancelOnError];
      }
      set cancelOnError(value) {
        this[S$0.cancelOnError] = value;
      }
      static ['_#new#tearOff'](T, _removeSubscription, opts) {
        let onPause = opts && 'onPause' in opts ? opts.onPause : null;
        let onResume = opts && 'onResume' in opts ? opts.onResume : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return new (rx_stream.LightSubscription$(T)).new(_removeSubscription, {onPause: onPause, onResume: onResume, onCancel: onCancel});
      }
      cancel() {
        let t199;
        this[S$0._removeSubscription](this);
        t199 = this.onCancel;
        t199 == null ? null : t199();
        return T$.FutureOfvoid().value();
      }
      onData(handleData) {
        return this[S$0._data] = handleData;
      }
      onError(handleError) {
        return this[S$0._onError] = handleError;
      }
      onDone(handleDone) {
        return this[S$0._onDone] = handleDone;
      }
      pause(resumeSignal = null) {
        let t199;
        this[S$0._isPaused] = true;
        t199 = this.onPause;
        t199 == null ? null : t199();
      }
      resume() {
        let t199;
        this[S$0._isPaused] = false;
        t199 = this.onResume;
        t199 == null ? null : t199();
      }
      get isPaused() {
        return this[S$0._isPaused];
      }
      asFuture(E, futureValue = null) {
        return async.Future$(E).value(futureValue);
      }
    }
    (LightSubscription.new = function(_removeSubscription, opts) {
      let onPause = opts && 'onPause' in opts ? opts.onPause : null;
      let onResume = opts && 'onResume' in opts ? opts.onResume : null;
      let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
      this[S$0.cancelOnError] = false;
      this[S$0._data] = null;
      this[S$0._onError] = null;
      this[S$0._onDone] = null;
      this[S$0._isPaused] = false;
      this[S$0._removeSubscription] = _removeSubscription;
      this[S$0.onPause$1] = onPause;
      this[S$0.onResume$1] = onResume;
      this[S$0.onCancel$1] = onCancel;
      ;
    }).prototype = LightSubscription.prototype;
    dart.addTypeTests(LightSubscription);
    LightSubscription.prototype[_is_LightSubscription_default] = true;
    dart.addTypeCaches(LightSubscription);
    dart.setMethodSignature(LightSubscription, () => ({
      __proto__: dart.getMethods(LightSubscription.__proto__),
      cancel: dart.fnType(async.Future$(dart.void), []),
      onData: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, [T]))]),
      onError: dart.fnType(dart.void, [dart.nullable(core.Function)]),
      onDone: dart.fnType(dart.void, [dart.nullable(dart.fnType(dart.void, []))]),
      pause: dart.fnType(dart.void, [], [dart.nullable(async.Future$(dart.void))]),
      resume: dart.fnType(dart.void, []),
      asFuture: dart.gFnType(E => [async.Future$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(LightSubscription, () => ({
      __proto__: dart.getGetters(LightSubscription.__proto__),
      isPaused: core.bool
    }));
    dart.setLibraryUri(LightSubscription, I[46]);
    dart.setFieldSignature(LightSubscription, () => ({
      __proto__: dart.getFields(LightSubscription.__proto__),
      [S$0._removeSubscription]: dart.finalFieldType(dart.fnType(async.FutureOr$(dart.nullable(core.bool)), [rx_stream.LightSubscription$(T)])),
      onPause: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onResume: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onCancel: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      cancelOnError: dart.fieldType(dart.nullable(core.bool)),
      [S$0._data]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [T]))),
      [S$0._onError]: dart.fieldType(dart.nullable(core.Function)),
      [S$0._onDone]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$0._isPaused]: dart.fieldType(core.bool)
    }));
    return LightSubscription;
  });
  rx_stream.LightSubscription = rx_stream.LightSubscription$();
  dart.addTypeTests(rx_stream.LightSubscription, _is_LightSubscription_default);
  const _is_GetStreamTransformation_default = Symbol('_is_GetStreamTransformation_default');
  rx_stream.GetStreamTransformation$ = dart.generic(T => {
    var __t$LightSubscriptionOfT = () => (__t$LightSubscriptionOfT = dart.constFn(rx_stream.LightSubscription$(T)))();
    class GetStreamTransformation extends async.Stream$(T) {
      static ['_#new#tearOff'](T, _addSubscription, _removeSubscription) {
        return new (rx_stream.GetStreamTransformation$(T)).new(_addSubscription, _removeSubscription);
      }
      listen(onData, opts) {
        let t199, t199$;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let subs = (t199 = new (__t$LightSubscriptionOfT()).new(this[S$0._removeSubscription]), (() => {
          t199.onData(onData);
          t199.onError(onError);
          t199.onDone(onDone);
          return t199;
        })());
        t199$ = subs;
        this[S$0._addSubscription](t199$);
        return subs;
      }
    }
    (GetStreamTransformation.new = function(_addSubscription, _removeSubscription) {
      this[S$0._addSubscription] = _addSubscription;
      this[S$0._removeSubscription] = _removeSubscription;
      GetStreamTransformation.__proto__.new.call(this);
      ;
    }).prototype = GetStreamTransformation.prototype;
    dart.addTypeTests(GetStreamTransformation);
    GetStreamTransformation.prototype[_is_GetStreamTransformation_default] = true;
    dart.addTypeCaches(GetStreamTransformation);
    dart.setMethodSignature(GetStreamTransformation, () => ({
      __proto__: dart.getMethods(GetStreamTransformation.__proto__),
      listen: dart.fnType(rx_stream.LightSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(GetStreamTransformation, I[46]);
    dart.setFieldSignature(GetStreamTransformation, () => ({
      __proto__: dart.getFields(GetStreamTransformation.__proto__),
      [S$0._addSubscription]: dart.finalFieldType(dart.fnType(dart.void, [rx_stream.LightSubscription$(T)])),
      [S$0._removeSubscription]: dart.finalFieldType(dart.fnType(async.FutureOr$(dart.nullable(core.bool)), [rx_stream.LightSubscription$(T)]))
    }));
    return GetStreamTransformation;
  });
  rx_stream.GetStreamTransformation = rx_stream.GetStreamTransformation$();
  dart.addTypeTests(rx_stream.GetStreamTransformation, _is_GetStreamTransformation_default);
  const _is_Node_default = Symbol('_is_Node_default');
  rx_stream.Node$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$NodeOfT = () => (__t$NodeOfT = dart.constFn(rx_stream.Node$(T)))();
    var __t$NodeNOfT = () => (__t$NodeNOfT = dart.constFn(dart.nullable(__t$NodeOfT())))();
    class Node extends core.Object {
      get data() {
        return this[S$0.data];
      }
      set data(value) {
        this[S$0.data] = __t$TN().as(value);
      }
      get next() {
        return this[S$0.next];
      }
      set next(value) {
        this[S$0.next] = __t$NodeNOfT().as(value);
      }
      static ['_#new#tearOff'](T, opts) {
        let data = opts && 'data' in opts ? opts.data : null;
        let next = opts && 'next' in opts ? opts.next : null;
        return new (rx_stream.Node$(T)).new({data: data, next: next});
      }
    }
    (Node.new = function(opts) {
      let data = opts && 'data' in opts ? opts.data : null;
      let next = opts && 'next' in opts ? opts.next : null;
      this[S$0.data] = data;
      this[S$0.next] = next;
      ;
    }).prototype = Node.prototype;
    dart.addTypeTests(Node);
    Node.prototype[_is_Node_default] = true;
    dart.addTypeCaches(Node);
    dart.setLibraryUri(Node, I[46]);
    dart.setFieldSignature(Node, () => ({
      __proto__: dart.getFields(Node.__proto__),
      data: dart.fieldType(dart.nullable(T)),
      next: dart.fieldType(dart.nullable(rx_stream.Node$(T)))
    }));
    return Node;
  });
  rx_stream.Node = rx_stream.Node$();
  dart.addTypeTests(rx_stream.Node, _is_Node_default);
  const _is_MiniSubscription_default = Symbol('_is_MiniSubscription_default');
  rx_stream.MiniSubscription$ = dart.generic(T => {
    class MiniSubscription extends core.Object {
      get data() {
        return this[S$0.data$1];
      }
      set data(value) {
        super.data = value;
      }
      get onError() {
        return this[S$0.onError];
      }
      set onError(value) {
        super.onError = value;
      }
      get onDone() {
        return this[S$0.onDone];
      }
      set onDone(value) {
        super.onDone = value;
      }
      get cancelOnError() {
        return this[S$0.cancelOnError$1];
      }
      set cancelOnError(value) {
        super.cancelOnError = value;
      }
      get listener() {
        return this[S$0.listener];
      }
      set listener(value) {
        super.listener = value;
      }
      static ['_#new#tearOff'](T, data, onError, onDone, cancelOnError, listener) {
        return new (rx_stream.MiniSubscription$(T)).new(data, onError, onDone, cancelOnError, listener);
      }
      cancel() {
        return async.async(dart.void, (function* cancel() {
          return this.listener.removeListener(this);
        }).bind(this));
      }
    }
    (MiniSubscription.new = function(data, onError, onDone, cancelOnError, listener) {
      this[S$0.data$1] = data;
      this[S$0.onError] = onError;
      this[S$0.onDone] = onDone;
      this[S$0.cancelOnError$1] = cancelOnError;
      this[S$0.listener] = listener;
      ;
    }).prototype = MiniSubscription.prototype;
    dart.addTypeTests(MiniSubscription);
    MiniSubscription.prototype[_is_MiniSubscription_default] = true;
    dart.addTypeCaches(MiniSubscription);
    dart.setMethodSignature(MiniSubscription, () => ({
      __proto__: dart.getMethods(MiniSubscription.__proto__),
      cancel: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(MiniSubscription, I[46]);
    dart.setFieldSignature(MiniSubscription, () => ({
      __proto__: dart.getFields(MiniSubscription.__proto__),
      data: dart.finalFieldType(dart.fnType(dart.void, [T])),
      onError: dart.finalFieldType(dart.nullable(core.Function)),
      onDone: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      cancelOnError: dart.finalFieldType(core.bool),
      listener: dart.finalFieldType(rx_stream.FastList$(T))
    }));
    return MiniSubscription;
  });
  rx_stream.MiniSubscription = rx_stream.MiniSubscription$();
  dart.addTypeTests(rx_stream.MiniSubscription, _is_MiniSubscription_default);
  const _is_MiniStream_default = Symbol('_is_MiniStream_default');
  rx_stream.MiniStream$ = dart.generic(T => {
    var __t$FastListOfT = () => (__t$FastListOfT = dart.constFn(rx_stream.FastList$(T)))();
    var __t$MiniSubscriptionOfT = () => (__t$MiniSubscriptionOfT = dart.constFn(rx_stream.MiniSubscription$(T)))();
    class MiniStream extends core.Object {
      get listenable() {
        return this[S$0.listenable];
      }
      set listenable(value) {
        this[S$0.listenable] = __t$FastListOfT().as(value);
      }
      get [S$0._value$3]() {
        let t199;
        return this[S$0.__MiniStream__value_isSet] ? (t199 = this[S$0.__MiniStream__value], t199) : dart.throw(new _internal.LateError.fieldNI("_value"));
      }
      set [S$0._value$3](_value$35param) {
        this[S$0.__MiniStream__value_isSet] = true;
        this[S$0.__MiniStream__value] = _value$35param;
      }
      get value() {
        return this[S$0._value$3];
      }
      set value(val) {
        T.as(val);
        this.add(val);
      }
      add(event) {
        T.as(event);
        this[S$0._value$3] = event;
        this.listenable[S$0._notifyData](event);
      }
      addError(error, stackTrace = null) {
        this.listenable[S$0._notifyError](error, stackTrace);
      }
      get length() {
        return this.listenable.length;
      }
      get hasListeners() {
        return this.listenable.isNotEmpty;
      }
      get isClosed() {
        return this[S$0._isClosed$2];
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        let subs = new (__t$MiniSubscriptionOfT()).new(onData, onError, onDone, cancelOnError, this.listenable);
        this.listenable.addListener(subs);
        return subs;
      }
      close() {
        if (this[S$0._isClosed$2]) {
          dart.throw("You can not close a closed Stream");
        }
        this.listenable[S$0._notifyDone]();
        this.listenable.clear();
        this[S$0._isClosed$2] = true;
      }
      static ['_#new#tearOff'](T) {
        return new (rx_stream.MiniStream$(T)).new();
      }
    }
    (MiniStream.new = function() {
      this[S$0.listenable] = new (__t$FastListOfT()).new();
      this[S$0.__MiniStream__value] = null;
      this[S$0.__MiniStream__value_isSet] = false;
      this[S$0._isClosed$2] = false;
      ;
    }).prototype = MiniStream.prototype;
    dart.addTypeTests(MiniStream);
    MiniStream.prototype[_is_MiniStream_default] = true;
    dart.addTypeCaches(MiniStream);
    dart.setMethodSignature(MiniStream, () => ({
      __proto__: dart.getMethods(MiniStream.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      listen: dart.fnType(rx_stream.MiniSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: core.bool, onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(MiniStream, () => ({
      __proto__: dart.getGetters(MiniStream.__proto__),
      [S$0._value$3]: T,
      value: T,
      length: core.int,
      hasListeners: core.bool,
      isClosed: core.bool
    }));
    dart.setSetterSignature(MiniStream, () => ({
      __proto__: dart.getSetters(MiniStream.__proto__),
      [S$0._value$3]: T,
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(MiniStream, I[46]);
    dart.setFieldSignature(MiniStream, () => ({
      __proto__: dart.getFields(MiniStream.__proto__),
      listenable: dart.fieldType(rx_stream.FastList$(T)),
      [S$0.__MiniStream__value]: dart.fieldType(dart.nullable(T)),
      [S$0.__MiniStream__value_isSet]: dart.fieldType(core.bool),
      [S$0._isClosed$2]: dart.fieldType(core.bool)
    }));
    return MiniStream;
  });
  rx_stream.MiniStream = rx_stream.MiniStream$();
  dart.addTypeTests(rx_stream.MiniStream, _is_MiniStream_default);
  const _is_FastList_default = Symbol('_is_FastList_default');
  rx_stream.FastList$ = dart.generic(T => {
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var __t$MiniSubscriptionOfT = () => (__t$MiniSubscriptionOfT = dart.constFn(rx_stream.MiniSubscription$(T)))();
    var __t$NodeOfMiniSubscriptionOfT = () => (__t$NodeOfMiniSubscriptionOfT = dart.constFn(rx_stream.Node$(__t$MiniSubscriptionOfT())))();
    class FastList extends core.Object {
      [S$0._notifyData](data) {
        let t202, t201, t200, t199, t199$;
        T.as(data);
        let currentNode = this[S$0._head];
        do {
          t199 = currentNode;
          t199 == null ? null : (t200 = t199.data, t200 == null ? null : (t201 = t200, t202 = data, __t$TTovoid().as(t201.data)(t202)));
          currentNode = (t199$ = currentNode, t199$ == null ? null : t199$.next);
        } while (currentNode != null);
      }
      [S$0._notifyDone]() {
        let t201, t200, t199, t199$;
        let currentNode = this[S$0._head];
        do {
          t199 = currentNode;
          t199 == null ? null : (t200 = t199.data, t200 == null ? null : (t201 = t200.onDone, t201 == null ? null : t201()));
          currentNode = (t199$ = currentNode, t199$ == null ? null : t199$.next);
        } while (currentNode != null);
      }
      [S$0._notifyError](error, stackTrace = null) {
        let t199;
        let currentNode = this[S$0._head];
        while (currentNode != null) {
          t199 = dart.nullCheck(currentNode.data).onError;
          t199 == null ? null : dart.dcall(t199, [error, stackTrace]);
          currentNode = currentNode.next;
        }
      }
      get isEmpty() {
        return this[S$0._head] == null;
      }
      get isNotEmpty() {
        return !this.isEmpty;
      }
      get length() {
        let length = 0;
        let currentNode = this[S$0._head];
        while (currentNode != null) {
          currentNode = currentNode.next;
          length = length + 1;
        }
        return length;
      }
      [S$0._elementAt](position) {
        if (this.isEmpty || this.length < position || position < 0) return null;
        let node = this[S$0._head];
        let current = 0;
        while (current !== position) {
          node = dart.nullCheck(node).next;
          current = current + 1;
        }
        return dart.nullCheck(node).data;
      }
      addListener(data) {
        __t$MiniSubscriptionOfT().as(data);
        let newNode = new (__t$NodeOfMiniSubscriptionOfT()).new({data: data});
        if (this.isEmpty) {
          this[S$0._head] = newNode;
        } else {
          let currentNode = dart.nullCheck(this[S$0._head]);
          while (currentNode.next != null) {
            currentNode = dart.nullCheck(currentNode.next);
          }
          currentNode.next = newNode;
        }
      }
      contains(element) {
        T.as(element);
        let length = this.length;
        for (let i = 0; i < length; i = i + 1) {
          if (dart.equals(this[S$0._elementAt](i), element)) return true;
          if (length !== this.length) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        return false;
      }
      removeListener(element) {
        __t$MiniSubscriptionOfT().as(element);
        let length = this.length;
        for (let i = 0; i < length; i = i + 1) {
          if (dart.equals(this[S$0._elementAt](i), element)) {
            this[S$0._removeAt](i);
            break;
          }
        }
      }
      clear() {
        let length = this.length;
        for (let i = 0; i < length; i = i + 1) {
          this[S$0._removeAt](i);
        }
      }
      [S$0._removeAt](position) {
        let index = 0;
        let currentNode = this[S$0._head];
        let previousNode = null;
        if (this.isEmpty || this.length < position || position < 0) {
          dart.throw(core.Exception.new("Invalid position"));
        } else if (position === 0) {
          this[S$0._head] = dart.nullCheck(this[S$0._head]).next;
        } else {
          while (index !== position) {
            previousNode = currentNode;
            currentNode = dart.nullCheck(currentNode).next;
            index = index + 1;
          }
          if (previousNode == null) {
            this[S$0._head] = null;
          } else {
            previousNode.next = dart.nullCheck(currentNode).next;
          }
          dart.nullCheck(currentNode).next = null;
        }
        return dart.nullCheck(currentNode).data;
      }
      static ['_#new#tearOff'](T) {
        return new (rx_stream.FastList$(T)).new();
      }
    }
    (FastList.new = function() {
      this[S$0._head] = null;
      ;
    }).prototype = FastList.prototype;
    dart.addTypeTests(FastList);
    FastList.prototype[_is_FastList_default] = true;
    dart.addTypeCaches(FastList);
    dart.setMethodSignature(FastList, () => ({
      __proto__: dart.getMethods(FastList.__proto__),
      [S$0._notifyData]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [S$0._notifyDone]: dart.fnType(dart.void, []),
      [S$0._notifyError]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      [S$0._elementAt]: dart.fnType(dart.nullable(rx_stream.MiniSubscription$(T)), [core.int]),
      addListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [S$0._removeAt]: dart.fnType(dart.nullable(rx_stream.MiniSubscription$(T)), [core.int])
    }));
    dart.setGetterSignature(FastList, () => ({
      __proto__: dart.getGetters(FastList.__proto__),
      isEmpty: core.bool,
      isNotEmpty: core.bool,
      length: core.int
    }));
    dart.setLibraryUri(FastList, I[46]);
    dart.setFieldSignature(FastList, () => ({
      __proto__: dart.getFields(FastList.__proto__),
      [S$0._head]: dart.fieldType(dart.nullable(rx_stream.Node$(rx_stream.MiniSubscription$(T))))
    }));
    return FastList;
  });
  rx_stream.FastList = rx_stream.FastList$();
  dart.addTypeTests(rx_stream.FastList, _is_FastList_default);
  const _is_NotifyManager_default = Symbol('_is_NotifyManager_default');
  rx_types.NotifyManager$ = dart.generic(T => {
    var __t$GetStreamOfT = () => (__t$GetStreamOfT = dart.constFn(rx_stream.GetStream$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class NotifyManager extends core.Object {}
    NotifyManager[dart.mixinOn] = Object => class NotifyManager extends Object {
      get subject() {
        return this[S$0.subject];
      }
      set subject(value) {
        this[S$0.subject] = __t$GetStreamOfT().as(value);
      }
      get [S$0._subscriptions]() {
        return this[S$0._subscriptions$1];
      }
      set [S$0._subscriptions](value) {
        super[S$0._subscriptions] = value;
      }
      get canUpdate() {
        return this[S$0._subscriptions][S$.$isNotEmpty];
      }
      addListener(rxGetx) {
        let t202, t201, t200, t199;
        __t$GetStreamOfT().as(rxGetx);
        if (!this[S$0._subscriptions][S$.$containsKey](rxGetx)) {
          let subs = rxGetx.listen(dart.fn(data => {
            if (!this.subject.isClosed) this.subject.add(data);
          }, __t$TTovoid()));
          let listSubscriptions = (t199 = this[S$0._subscriptions], t200 = rxGetx, t201 = t199[S$.$_get](t200), t201 == null ? (t202 = T$.JSArrayOfStreamSubscription().of([]), t199[S$.$_set](t200, t202), t202) : t201);
          listSubscriptions[S$.$add](subs);
        }
      }
      listen(onData, opts) {
        let t199;
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return this.subject.listen(onData, {onError: onError, onDone: onDone, cancelOnError: (t199 = cancelOnError, t199 == null ? false : t199)});
      }
      close() {
        this[S$0._subscriptions][S$.$forEach](dart.fn((getStream, _subscriptions) => {
          for (let subscription of _subscriptions) {
            subscription.cancel();
          }
        }, T$.GetStreamAndListOfStreamSubscriptionTovoid()));
        this[S$0._subscriptions][S$.$clear]();
        this.subject.close();
      }
    };
    (NotifyManager[dart.mixinNew] = function() {
      this[S$0.subject] = new (__t$GetStreamOfT()).new();
      this[S$0._subscriptions$1] = new (T$.LinkedMapOfGetStream$ListOfStreamSubscription()).new();
    }).prototype = NotifyManager.prototype;
    dart.addTypeTests(NotifyManager);
    NotifyManager.prototype[_is_NotifyManager_default] = true;
    dart.addTypeCaches(NotifyManager);
    NotifyManager[dart.implements] = () => [core.Object];
    dart.setMethodSignature(NotifyManager, () => ({
      __proto__: dart.getMethods(NotifyManager.__proto__),
      addListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(NotifyManager, () => ({
      __proto__: dart.getGetters(NotifyManager.__proto__),
      canUpdate: core.bool
    }));
    dart.setLibraryUri(NotifyManager, I[47]);
    dart.setFieldSignature(NotifyManager, () => ({
      __proto__: dart.getFields(NotifyManager.__proto__),
      subject: dart.fieldType(rx_stream.GetStream$(T)),
      [S$0._subscriptions]: dart.finalFieldType(core.Map$(rx_stream.GetStream, core.List$(async.StreamSubscription)))
    }));
    return NotifyManager;
  });
  rx_types.NotifyManager = rx_types.NotifyManager$();
  dart.addTypeTests(rx_types.NotifyManager, _is_NotifyManager_default);
  const _is_RxObjectMixin_default = Symbol('_is_RxObjectMixin_default');
  rx_types.RxObjectMixin$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$RxObjectMixinOfT = () => (__t$RxObjectMixinOfT = dart.constFn(rx_types.RxObjectMixin$(T)))();
    var __t$StreamOfT = () => (__t$StreamOfT = dart.constFn(async.Stream$(T)))();
    var __t$TTovoid = () => (__t$TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    class RxObjectMixin extends rx_types.NotifyManager$(T) {}
    RxObjectMixin[dart.mixinOn] = NotifyManager => {
      class RxObjectMixin extends NotifyManager {
        get [S$0.__RxObjectMixin__value]() {
          return this[S$0._$35RxObjectMixin$35_value];
        }
        set [S$0.__RxObjectMixin__value](value) {
          this[S$0._$35RxObjectMixin$35_value] = value;
        }
        get [S$0.__RxObjectMixin__value_isSet]() {
          return this[S$0._$35RxObjectMixin$35_value$35isSet];
        }
        set [S$0.__RxObjectMixin__value_isSet](value) {
          this[S$0._$35RxObjectMixin$35_value$35isSet] = value;
        }
        get firstRebuild() {
          return this[S$0.firstRebuild];
        }
        set firstRebuild(value) {
          this[S$0.firstRebuild] = value;
        }
        get sentToStream() {
          return this[S$0.sentToStream];
        }
        set sentToStream(value) {
          this[S$0.sentToStream] = value;
        }
        get [S$0._value$4]() {
          let t199;
          return this[S$0.__RxObjectMixin__value_isSet] ? (t199 = this[S$0.__RxObjectMixin__value], t199) : dart.throw(new _internal.LateError.fieldNI("_value"));
        }
        set [S$0._value$4](_value$35param) {
          this[S$0.__RxObjectMixin__value_isSet] = true;
          this[S$0.__RxObjectMixin__value] = _value$35param;
        }
        refresh() {
          this.subject.add(this.value);
        }
        call(v = null) {
          __t$TN().as(v);
          if (v != null) {
            this.value = v;
          }
          return this.value;
        }
        get string() {
          return dart.toString(this.value);
        }
        toString() {
          return dart.toString(this.value);
        }
        toJson() {
          return this.value;
        }
        _equals(o) {
          if (o == null) return false;
          if (T.is(o)) return dart.equals(this.value, o);
          if (__t$RxObjectMixinOfT().is(o)) return dart.equals(this.value, o.value);
          return false;
        }
        get hashCode() {
          return dart.hashCode(this[S$0._value$4]);
        }
        set value(val) {
          T.as(val);
          if (this.subject.isClosed) return;
          this.sentToStream = false;
          if (dart.equals(this[S$0._value$4], val) && !this.firstRebuild) return;
          this.firstRebuild = false;
          this[S$0._value$4] = val;
          this.sentToStream = true;
          this.subject.add(this[S$0._value$4]);
        }
        get value() {
          let t199;
          t199 = rx_types.RxInterface.proxy;
          t199 == null ? null : t199.addListener(this.subject);
          return this[S$0._value$4];
        }
        get stream() {
          return this.subject.stream;
        }
        listenAndPump(onData, opts) {
          let onError = opts && 'onError' in opts ? opts.onError : null;
          let onDone = opts && 'onDone' in opts ? opts.onDone : null;
          let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
          let subscription = this.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
          this.subject.add(this.value);
          return subscription;
        }
        bindStream(stream) {
          let t202, t201, t200, t199;
          __t$StreamOfT().as(stream);
          let listSubscriptions = (t199 = this[S$0._subscriptions], t200 = this.subject, t201 = t199[S$.$_get](t200), t201 == null ? (t202 = T$.JSArrayOfStreamSubscription().of([]), t199[S$.$_set](t200, t202), t202) : t201);
          listSubscriptions[S$.$add](stream.listen(dart.fn(va => this.value = va, __t$TTovoid())));
        }
      }
      dart.defineExtensionMethods(RxObjectMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(RxObjectMixin, ['hashCode']);
      return RxObjectMixin;
    };
    (RxObjectMixin[dart.mixinNew] = function() {
      this[S$0._$35RxObjectMixin$35_value] = null;
      this[S$0._$35RxObjectMixin$35_value$35isSet] = false;
      this[S$0.firstRebuild] = true;
      this[S$0.sentToStream] = false;
    }).prototype = RxObjectMixin.prototype;
    dart.addTypeTests(RxObjectMixin);
    RxObjectMixin.prototype[_is_RxObjectMixin_default] = true;
    dart.addTypeCaches(RxObjectMixin);
    RxObjectMixin[dart.implements] = () => [rx_types.NotifyManager$(T)];
    dart.setMethodSignature(RxObjectMixin, () => ({
      __proto__: dart.getMethods(RxObjectMixin.__proto__),
      refresh: dart.fnType(dart.void, []),
      call: dart.fnType(T, [], [dart.nullable(core.Object)]),
      toJson: dart.fnType(dart.dynamic, []),
      listenAndPump: dart.fnType(async.StreamSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      bindStream: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getGetters(RxObjectMixin.__proto__),
      [S$0._value$4]: T,
      string: core.String,
      value: T,
      stream: async.Stream$(T)
    }));
    dart.setSetterSignature(RxObjectMixin, () => ({
      __proto__: dart.getSetters(RxObjectMixin.__proto__),
      [S$0._value$4]: T,
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RxObjectMixin, I[47]);
    dart.setFieldSignature(RxObjectMixin, () => ({
      __proto__: dart.getFields(RxObjectMixin.__proto__),
      [S$0.__RxObjectMixin__value]: dart.fieldType(dart.nullable(T)),
      [S$0.__RxObjectMixin__value_isSet]: dart.fieldType(core.bool),
      firstRebuild: dart.fieldType(core.bool),
      sentToStream: dart.fieldType(core.bool)
    }));
    return RxObjectMixin;
  });
  rx_types.RxObjectMixin = rx_types.RxObjectMixin$();
  dart.addTypeTests(rx_types.RxObjectMixin, _is_RxObjectMixin_default);
  const _is_RxInterface_default = Symbol('_is_RxInterface_default');
  rx_types.RxInterface$ = dart.generic(T => {
    class RxInterface extends core.Object {
      static notifyChildren(T, observer, builder) {
        let _observer = rx_types.RxInterface.proxy;
        rx_types.RxInterface.proxy = observer;
        let result = builder();
        if (!observer.canUpdate) {
          rx_types.RxInterface.proxy = _observer;
          dart.throw("      [Get] the improper use of a GetX has been detected. \n      You should only use GetX or Obx for the specific widget that will be updated.\n      If you are seeing this error, you probably did not insert any observable variables into GetX/Obx \n      or insert them outside the scope that GetX considers suitable for an update \n      (example: GetX => HeavyWidget => variableObservable).\n      If you need to update a parent widget and a child widget, wrap each one in an Obx/GetX.\n      ");
        }
        rx_types.RxInterface.proxy = _observer;
        return result;
      }
    }
    (RxInterface.new = function() {
      ;
    }).prototype = RxInterface.prototype;
    dart.addTypeTests(RxInterface);
    RxInterface.prototype[_is_RxInterface_default] = true;
    dart.addTypeCaches(RxInterface);
    dart.setStaticMethodSignature(RxInterface, () => ['notifyChildren']);
    dart.setLibraryUri(RxInterface, I[47]);
    dart.setStaticFieldSignature(RxInterface, () => ['proxy']);
    return RxInterface;
  });
  rx_types.RxInterface = rx_types.RxInterface$();
  dart.defineLazy(rx_types.RxInterface, {
    /*rx_types.RxInterface.proxy*/get proxy() {
      return null;
    },
    set proxy(value) {}
  }, false);
  dart.addTypeTests(rx_types.RxInterface, _is_RxInterface_default);
  const _is_RxNotifier_default = Symbol('_is_RxNotifier_default');
  rx_types.RxNotifier$ = dart.generic(T => {
    var __t$GetStreamOfT = () => (__t$GetStreamOfT = dart.constFn(rx_stream.GetStream$(T)))();
    const RxInterface_NotifyManager$36 = class RxInterface_NotifyManager extends rx_types.RxInterface$(T) {};
    (RxInterface_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(T)[dart.mixinNew].call(this);
    }).prototype = RxInterface_NotifyManager$36.prototype;
    dart.applyMixin(RxInterface_NotifyManager$36, rx_types.NotifyManager$(T));
    class RxNotifier extends RxInterface_NotifyManager$36 {
      static ['_#new#tearOff'](T) {
        return new (rx_types.RxNotifier$(T)).new();
      }
      get subject() {
        return super.subject;
      }
      set subject(value) {
        __t$GetStreamOfT().as(value);
        return super.subject = value;
      }
      get [S$0._subscriptions]() {
        return super[S$0._subscriptions];
      }
      get canUpdate() {
        return super.canUpdate;
      }
      addListener(rxGetx) {
        __t$GetStreamOfT().as(rxGetx);
        return super.addListener(rxGetx);
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        return super.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      }
      close() {
        return super.close();
      }
    }
    (RxNotifier.new = function() {
      RxNotifier.__proto__.new.call(this);
      ;
    }).prototype = RxNotifier.prototype;
    dart.addTypeTests(RxNotifier);
    RxNotifier.prototype[_is_RxNotifier_default] = true;
    dart.addTypeCaches(RxNotifier);
    dart.setMethodSignature(RxNotifier, () => ({
      __proto__: dart.getMethods(RxNotifier.__proto__),
      addListener: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.fnType(dart.void, [T])], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      close: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RxNotifier, () => ({
      __proto__: dart.getGetters(RxNotifier.__proto__),
      subject: rx_stream.GetStream$(T),
      [S$0._subscriptions]: core.Map$(rx_stream.GetStream, core.List$(async.StreamSubscription)),
      canUpdate: core.bool
    }));
    dart.setSetterSignature(RxNotifier, () => ({
      __proto__: dart.getSetters(RxNotifier.__proto__),
      subject: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RxNotifier, I[47]);
    return RxNotifier;
  });
  rx_types.RxNotifier = rx_types.RxNotifier$();
  dart.addTypeTests(rx_types.RxNotifier, _is_RxNotifier_default);
  const _is__RxImpl_default = Symbol('_is__RxImpl_default');
  rx_types._RxImpl$ = dart.generic(T => {
    const RxNotifier_RxObjectMixin$36 = class RxNotifier_RxObjectMixin extends rx_types.RxNotifier$(T) {};
    (RxNotifier_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(T)[dart.mixinNew].call(this);
      RxNotifier_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = RxNotifier_RxObjectMixin$36.prototype;
    dart.applyMixin(RxNotifier_RxObjectMixin$36, rx_types.RxObjectMixin$(T));
    class _RxImpl extends RxNotifier_RxObjectMixin$36 {
      addError(error, stackTrace = null) {
        this.subject.addError(error, stackTrace);
      }
      map(R, mapper) {
        return this.stream.map(R, mapper);
      }
      update(fn) {
        fn(this[S$0._value$4]);
        this.subject.add(this[S$0._value$4]);
      }
      trigger(v) {
        T.as(v);
        let firstRebuild = this.firstRebuild;
        this.value = v;
        if (!firstRebuild && !this.sentToStream) {
          this.subject.add(v);
        }
      }
    }
    (_RxImpl.new = function(initial) {
      _RxImpl.__proto__.new.call(this);
      this[S$0._value$4] = initial;
    }).prototype = _RxImpl.prototype;
    dart.addTypeTests(_RxImpl);
    _RxImpl.prototype[_is__RxImpl_default] = true;
    dart.addTypeCaches(_RxImpl);
    dart.setMethodSignature(_RxImpl, () => ({
      __proto__: dart.getMethods(_RxImpl.__proto__),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      map: dart.gFnType(R => [async.Stream$(R), [dart.fnType(R, [dart.nullable(T)])]], R => [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(T)])]),
      trigger: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_RxImpl, I[47]);
    return _RxImpl;
  });
  rx_types._RxImpl = rx_types._RxImpl$();
  dart.addTypeTests(rx_types._RxImpl, _is__RxImpl_default);
  const _is_Rx_default = Symbol('_is_Rx_default');
  rx_types.Rx$ = dart.generic(T => {
    class Rx extends rx_types._RxImpl$(T) {
      static ['_#new#tearOff'](T, initial) {
        return new (rx_types.Rx$(T)).new(initial);
      }
      toJson() {
        let t199;
        try {
          t199 = this.value;
          return t199 == null ? null : dart.dsend(t199, 'toJson', []);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Exception.is(_)) {
            dart.throw(dart.str(dart.wrapType(T)) + " has not method [toJson]");
          } else
            throw e;
        }
      }
    }
    (Rx.new = function(initial) {
      Rx.__proto__.new.call(this, initial);
      ;
    }).prototype = Rx.prototype;
    dart.addTypeTests(Rx);
    Rx.prototype[_is_Rx_default] = true;
    dart.addTypeCaches(Rx);
    dart.setLibraryUri(Rx, I[47]);
    return Rx;
  });
  rx_types.Rx = rx_types.Rx$();
  dart.addTypeTests(rx_types.Rx, _is_Rx_default);
  rx_types.RxBool = class RxBool extends rx_types.Rx$(core.bool) {
    static ['_#new#tearOff'](initial) {
      return new rx_types.RxBool.new(initial);
    }
    toString() {
      return this.value ? "true" : "false";
    }
  };
  (rx_types.RxBool.new = function(initial) {
    rx_types.RxBool.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxBool.prototype;
  dart.addTypeTests(rx_types.RxBool);
  dart.addTypeCaches(rx_types.RxBool);
  dart.setLibraryUri(rx_types.RxBool, I[47]);
  dart.defineExtensionMethods(rx_types.RxBool, ['toString']);
  rx_types.RxnBool = class RxnBool extends rx_types.Rx$(dart.nullable(core.bool)) {
    static ['_#new#tearOff'](initial = null) {
      return new rx_types.RxnBool.new(initial);
    }
    toString() {
      return dart.str(this.value);
    }
  };
  (rx_types.RxnBool.new = function(initial = null) {
    rx_types.RxnBool.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxnBool.prototype;
  dart.addTypeTests(rx_types.RxnBool);
  dart.addTypeCaches(rx_types.RxnBool);
  dart.setLibraryUri(rx_types.RxnBool, I[47]);
  dart.defineExtensionMethods(rx_types.RxnBool, ['toString']);
  const _is_Rxn_default = Symbol('_is_Rxn_default');
  rx_types.Rxn$ = dart.generic(T => {
    class Rxn extends rx_types.Rx$(dart.nullable(T)) {
      static ['_#new#tearOff'](T, initial = null) {
        return new (rx_types.Rxn$(T)).new(initial);
      }
      toJson() {
        let t200;
        try {
          t200 = this.value;
          return t200 == null ? null : dart.dsend(t200, 'toJson', []);
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Exception.is(_)) {
            dart.throw(dart.str(dart.wrapType(T)) + " has not method [toJson]");
          } else
            throw e;
        }
      }
    }
    (Rxn.new = function(initial = null) {
      Rxn.__proto__.new.call(this, initial);
      ;
    }).prototype = Rxn.prototype;
    dart.addTypeTests(Rxn);
    Rxn.prototype[_is_Rxn_default] = true;
    dart.addTypeCaches(Rxn);
    dart.setLibraryUri(Rxn, I[47]);
    return Rxn;
  });
  rx_types.Rxn = rx_types.Rxn$();
  dart.addTypeTests(rx_types.Rxn, _is_Rxn_default);
  rx_types.RxNum = class RxNum extends rx_types.Rx$(core.num) {
    static ['_#new#tearOff'](initial) {
      return new rx_types.RxNum.new(initial);
    }
    ['+'](other) {
      this.value = this.value + other;
      return this.value;
    }
    ['-'](other) {
      this.value = this.value - other;
      return this.value;
    }
  };
  (rx_types.RxNum.new = function(initial) {
    rx_types.RxNum.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxNum.prototype;
  dart.addTypeTests(rx_types.RxNum);
  dart.addTypeCaches(rx_types.RxNum);
  dart.setMethodSignature(rx_types.RxNum, () => ({
    __proto__: dart.getMethods(rx_types.RxNum.__proto__),
    '+': dart.fnType(core.num, [core.num]),
    '-': dart.fnType(core.num, [core.num])
  }));
  dart.setLibraryUri(rx_types.RxNum, I[47]);
  rx_types.RxnNum = class RxnNum extends rx_types.Rx$(dart.nullable(core.num)) {
    static ['_#new#tearOff'](initial = null) {
      return new rx_types.RxnNum.new(initial);
    }
    ['+'](other) {
      if (this.value != null) {
        this.value = dart.nullCheck(this.value) + other;
        return this.value;
      }
      return null;
    }
    ['-'](other) {
      if (this.value != null) {
        this.value = dart.nullCheck(this.value) - other;
        return this.value;
      }
      return null;
    }
  };
  (rx_types.RxnNum.new = function(initial = null) {
    rx_types.RxnNum.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxnNum.prototype;
  dart.addTypeTests(rx_types.RxnNum);
  dart.addTypeCaches(rx_types.RxnNum);
  dart.setMethodSignature(rx_types.RxnNum, () => ({
    __proto__: dart.getMethods(rx_types.RxnNum.__proto__),
    '+': dart.fnType(dart.nullable(core.num), [core.num]),
    '-': dart.fnType(dart.nullable(core.num), [core.num])
  }));
  dart.setLibraryUri(rx_types.RxnNum, I[47]);
  rx_types.RxDouble = class RxDouble extends rx_types.Rx$(core.double) {
    static ['_#new#tearOff'](initial) {
      return new rx_types.RxDouble.new(initial);
    }
  };
  (rx_types.RxDouble.new = function(initial) {
    rx_types.RxDouble.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxDouble.prototype;
  dart.addTypeTests(rx_types.RxDouble);
  dart.addTypeCaches(rx_types.RxDouble);
  dart.setLibraryUri(rx_types.RxDouble, I[47]);
  rx_types.RxnDouble = class RxnDouble extends rx_types.Rx$(dart.nullable(core.double)) {
    static ['_#new#tearOff'](initial = null) {
      return new rx_types.RxnDouble.new(initial);
    }
  };
  (rx_types.RxnDouble.new = function(initial = null) {
    rx_types.RxnDouble.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxnDouble.prototype;
  dart.addTypeTests(rx_types.RxnDouble);
  dart.addTypeCaches(rx_types.RxnDouble);
  dart.setLibraryUri(rx_types.RxnDouble, I[47]);
  rx_types.RxInt = class RxInt extends rx_types.Rx$(core.int) {
    static ['_#new#tearOff'](initial) {
      return new rx_types.RxInt.new(initial);
    }
    ['+'](other) {
      this.value = this.value + other;
      return this;
    }
    ['-'](other) {
      this.value = this.value - other;
      return this;
    }
  };
  (rx_types.RxInt.new = function(initial) {
    rx_types.RxInt.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxInt.prototype;
  dart.addTypeTests(rx_types.RxInt);
  dart.addTypeCaches(rx_types.RxInt);
  dart.setMethodSignature(rx_types.RxInt, () => ({
    __proto__: dart.getMethods(rx_types.RxInt.__proto__),
    '+': dart.fnType(rx_types.RxInt, [core.int]),
    '-': dart.fnType(rx_types.RxInt, [core.int])
  }));
  dart.setLibraryUri(rx_types.RxInt, I[47]);
  rx_types.RxnInt = class RxnInt extends rx_types.Rx$(dart.nullable(core.int)) {
    static ['_#new#tearOff'](initial = null) {
      return new rx_types.RxnInt.new(initial);
    }
    ['+'](other) {
      if (this.value != null) {
        this.value = dart.nullCheck(this.value) + other;
      }
      return this;
    }
    ['-'](other) {
      if (this.value != null) {
        this.value = dart.nullCheck(this.value) - other;
      }
      return this;
    }
  };
  (rx_types.RxnInt.new = function(initial = null) {
    rx_types.RxnInt.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxnInt.prototype;
  dart.addTypeTests(rx_types.RxnInt);
  dart.addTypeCaches(rx_types.RxnInt);
  dart.setMethodSignature(rx_types.RxnInt, () => ({
    __proto__: dart.getMethods(rx_types.RxnInt.__proto__),
    '+': dart.fnType(rx_types.RxnInt, [core.int]),
    '-': dart.fnType(rx_types.RxnInt, [core.int])
  }));
  dart.setLibraryUri(rx_types.RxnInt, I[47]);
  rx_types.RxString = class RxString extends rx_types.Rx$(core.String) {
    static ['_#new#tearOff'](initial) {
      return new rx_types.RxString.new(initial);
    }
    allMatches(string, start = 0) {
      return this.value[S$0.$allMatches](string, start);
    }
    matchAsPrefix(string, start = 0) {
      return this.value[S$0.$matchAsPrefix](string, start);
    }
    compareTo(other) {
      core.String.as(other);
      return this.value[S$.$compareTo](other);
    }
  };
  (rx_types.RxString.new = function(initial) {
    rx_types.RxString.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxString.prototype;
  dart.addTypeTests(rx_types.RxString);
  dart.addTypeCaches(rx_types.RxString);
  rx_types.RxString[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
  dart.setMethodSignature(rx_types.RxString, () => ({
    __proto__: dart.getMethods(rx_types.RxString.__proto__),
    allMatches: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    [S$0.$allMatches]: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    matchAsPrefix: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    [S$0.$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [S$.$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(rx_types.RxString, I[47]);
  dart.defineExtensionMethods(rx_types.RxString, ['allMatches', 'matchAsPrefix', 'compareTo']);
  rx_types.RxnString = class RxnString extends rx_types.Rx$(dart.nullable(core.String)) {
    static ['_#new#tearOff'](initial = null) {
      return new rx_types.RxnString.new(initial);
    }
    allMatches(string, start = 0) {
      return dart.nullCheck(this.value)[S$0.$allMatches](string, start);
    }
    matchAsPrefix(string, start = 0) {
      return dart.nullCheck(this.value)[S$0.$matchAsPrefix](string, start);
    }
    compareTo(other) {
      core.String.as(other);
      return dart.nullCheck(this.value)[S$.$compareTo](other);
    }
  };
  (rx_types.RxnString.new = function(initial = null) {
    rx_types.RxnString.__proto__.new.call(this, initial);
    ;
  }).prototype = rx_types.RxnString.prototype;
  dart.addTypeTests(rx_types.RxnString);
  dart.addTypeCaches(rx_types.RxnString);
  rx_types.RxnString[dart.implements] = () => [core.Comparable$(core.String), core.Pattern];
  dart.setMethodSignature(rx_types.RxnString, () => ({
    __proto__: dart.getMethods(rx_types.RxnString.__proto__),
    allMatches: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    [S$0.$allMatches]: dart.fnType(core.Iterable$(core.Match), [core.String], [core.int]),
    matchAsPrefix: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    [S$0.$matchAsPrefix]: dart.fnType(dart.nullable(core.Match), [core.String], [core.int]),
    compareTo: dart.fnType(core.int, [dart.nullable(core.Object)]),
    [S$.$compareTo]: dart.fnType(core.int, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(rx_types.RxnString, I[47]);
  dart.defineExtensionMethods(rx_types.RxnString, ['allMatches', 'matchAsPrefix', 'compareTo']);
  const _is_RxList_default = Symbol('_is_RxList_default');
  rx_types.RxList$ = dart.generic(E => {
    var __t$ListOfE = () => (__t$ListOfE = dart.constFn(core.List$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    const ListMixin_NotifyManager$36 = class ListMixin_NotifyManager extends collection.ListMixin$(E) {};
    (ListMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.List$(E))[dart.mixinNew].call(this);
    }).prototype = ListMixin_NotifyManager$36.prototype;
    dart.applyMixin(ListMixin_NotifyManager$36, rx_types.NotifyManager$(core.List$(E)));
    const ListMixin_RxObjectMixin$36 = class ListMixin_RxObjectMixin extends ListMixin_NotifyManager$36 {};
    (ListMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.List$(E))[dart.mixinNew].call(this);
      ListMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = ListMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(ListMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.List$(E)));
    class RxList extends ListMixin_RxObjectMixin$36 {
      static ['_#new#tearOff'](E, initial = C[106] || CT.C106) {
        return new (rx_types.RxList$(E)).new(initial);
      }
      static filled(length, fill, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return new (rx_types.RxList$(E)).new(core.List$(E).filled(length, fill, {growable: growable}));
      }
      static ['_#filled#tearOff'](E, length, fill, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return rx_types.RxList$(E).filled(length, fill, {growable: growable});
      }
      static empty(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return new (rx_types.RxList$(E)).new(core.List$(E).empty({growable: growable}));
      }
      static ['_#empty#tearOff'](E, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : false;
        return rx_types.RxList$(E).empty({growable: growable});
      }
      static from(elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(E)).new(core.List$(E).from(elements, {growable: growable}));
      }
      static ['_#from#tearOff'](E, elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return rx_types.RxList$(E).from(elements, {growable: growable});
      }
      static of(elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(E)).new(core.List$(E).of(elements, {growable: growable}));
      }
      static ['_#of#tearOff'](E, elements, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return rx_types.RxList$(E).of(elements, {growable: growable});
      }
      static generate(length, generator, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return new (rx_types.RxList$(E)).new(core.List$(E).generate(length, generator, {growable: growable}));
      }
      static ['_#generate#tearOff'](E, length, generator, opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return rx_types.RxList$(E).generate(length, generator, {growable: growable});
      }
      static unmodifiable(elements) {
        return new (rx_types.RxList$(E)).new(core.List$(E).unmodifiable(elements));
      }
      static ['_#unmodifiable#tearOff'](E, elements) {
        return rx_types.RxList$(E).unmodifiable(elements);
      }
      get iterator() {
        return this.value[S$0.$iterator];
      }
      _set(index, val$) {
        let val = val$;
        E.as(val);
        this[S$0._value$4][S$.$_set](index, val);
        this.refresh();
        return val$;
      }
      ['+'](val) {
        __t$IterableOfE().as(val);
        this.addAll(val);
        this.refresh();
        return this;
      }
      _get(index) {
        return this.value[S$.$_get](index);
      }
      add(item) {
        E.as(item);
        this[S$0._value$4][S$.$add](item);
        this.refresh();
      }
      addAll(item) {
        __t$IterableOfE().as(item);
        this[S$0._value$4][S$.$addAll](item);
        this.refresh();
      }
      removeWhere(test) {
        this[S$0._value$4][S$0.$removeWhere](test);
        this.refresh();
      }
      retainWhere(test) {
        this[S$0._value$4][S$0.$retainWhere](test);
        this.refresh();
      }
      get length() {
        return this.value[S$.$length];
      }
      get value() {
        let t201;
        t201 = rx_types.RxInterface.proxy;
        t201 == null ? null : t201.addListener(this.subject);
        return this[S$0._value$4];
      }
      set value(value) {
        super.value = value;
      }
      set length(newLength) {
        this[S$0._value$4][S$.$length] = newLength;
        this.refresh();
      }
      insertAll(index, iterable) {
        __t$IterableOfE().as(iterable);
        this[S$0._value$4][S$0.$insertAll](index, iterable);
        this.refresh();
      }
      get reversed() {
        return this.value[S$0.$reversed];
      }
      where(test) {
        return this.value[S$.$where](test);
      }
      whereType(T) {
        return this.value[S$.$whereType](T);
      }
      sort(compare = null) {
        this[S$0._value$4][S$.$sort](compare);
        this.refresh();
      }
    }
    (RxList.new = function(initial = C[106] || CT.C106) {
      RxList.__proto__.new.call(this);
      this[S$0._value$4] = __t$ListOfE().from(initial);
    }).prototype = RxList.prototype;
    dart.addTypeTests(RxList);
    RxList.prototype[_is_RxList_default] = true;
    dart.addTypeCaches(RxList);
    RxList[dart.implements] = () => [rx_types.RxInterface$(core.List$(E))];
    dart.setMethodSignature(RxList, () => ({
      __proto__: dart.getMethods(RxList.__proto__),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      '+': dart.fnType(rx_types.RxList$(E), [dart.nullable(core.Object)]),
      [S$0.$plus]: dart.fnType(rx_types.RxList$(E), [dart.nullable(core.Object)]),
      _get: dart.fnType(E, [core.int]),
      [S$.$_get]: dart.fnType(E, [core.int]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [S$.$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)])
    }));
    dart.setStaticMethodSignature(RxList, () => ['filled', 'empty', 'from', 'of', 'generate', 'unmodifiable']);
    dart.setGetterSignature(RxList, () => ({
      __proto__: dart.getGetters(RxList.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setSetterSignature(RxList, () => ({
      __proto__: dart.getSetters(RxList.__proto__),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(RxList, I[47]);
    dart.defineExtensionMethods(RxList, [
      '_set',
      '+',
      '_get',
      'add',
      'addAll',
      'removeWhere',
      'retainWhere',
      'insertAll',
      'where',
      'whereType',
      'sort'
    ]);
    dart.defineExtensionAccessors(RxList, ['iterator', 'length', 'reversed']);
    return RxList;
  });
  rx_types.RxList = rx_types.RxList$();
  dart.addTypeTests(rx_types.RxList, _is_RxList_default);
  const _is_RxSet_default = Symbol('_is_RxSet_default');
  rx_types.RxSet$ = dart.generic(E => {
    var __t$LinkedHashSetOfE = () => (__t$LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var __t$SetOfE = () => (__t$SetOfE = dart.constFn(core.Set$(E)))();
    var __t$IterableOfE = () => (__t$IterableOfE = dart.constFn(core.Iterable$(E)))();
    const SetMixin_NotifyManager$36 = class SetMixin_NotifyManager extends collection.SetMixin$(E) {};
    (SetMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.Set$(E))[dart.mixinNew].call(this);
    }).prototype = SetMixin_NotifyManager$36.prototype;
    dart.applyMixin(SetMixin_NotifyManager$36, rx_types.NotifyManager$(core.Set$(E)));
    const SetMixin_RxObjectMixin$36 = class SetMixin_RxObjectMixin extends SetMixin_NotifyManager$36 {};
    (SetMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.Set$(E))[dart.mixinNew].call(this);
      SetMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = SetMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(SetMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.Set$(E)));
    class RxSet extends SetMixin_RxObjectMixin$36 {
      static ['_#new#tearOff'](E, initial = C[107] || CT.C107) {
        return new (rx_types.RxSet$(E)).new(initial);
      }
      ['+'](val) {
        __t$SetOfE().as(val);
        this.addAll(val);
        this.refresh();
        return this;
      }
      update(fn) {
        fn(this.value);
        this.refresh();
      }
      get value() {
        let t201;
        t201 = rx_types.RxInterface.proxy;
        t201 == null ? null : t201.addListener(this.subject);
        return this[S$0._value$4];
      }
      set value(val) {
        __t$SetOfE().as(val);
        if (this[S$0._value$4][S$.$_equals](val)) return;
        this[S$0._value$4] = val;
        this.refresh();
      }
      add(value) {
        E.as(value);
        let val = this[S$0._value$4].add(value);
        this.refresh();
        return val;
      }
      contains(element) {
        return this.value.contains(element);
      }
      get iterator() {
        return this.value.iterator;
      }
      get length() {
        return this.value[S$.$length];
      }
      lookup(object) {
        return this.value.lookup(object);
      }
      remove(item) {
        let hasRemoved = this[S$0._value$4].remove(item);
        if (hasRemoved) {
          this.refresh();
        }
        return hasRemoved;
      }
      toSet() {
        return this.value.toSet();
      }
      addAll(item) {
        __t$IterableOfE().as(item);
        this[S$0._value$4].addAll(item);
        this.refresh();
      }
      clear() {
        this[S$0._value$4].clear();
        this.refresh();
      }
      removeAll(elements) {
        this[S$0._value$4].removeAll(elements);
        this.refresh();
      }
      retainAll(elements) {
        this[S$0._value$4].retainAll(elements);
        this.refresh();
      }
      retainWhere(E) {
        this[S$0._value$4].retainWhere(E);
        this.refresh();
      }
    }
    (RxSet.new = function(initial = C[107] || CT.C107) {
      RxSet.__proto__.new.call(this);
      this[S$0._value$4] = __t$LinkedHashSetOfE().from(initial);
    }).prototype = RxSet.prototype;
    dart.addTypeTests(RxSet);
    RxSet.prototype[_is_RxSet_default] = true;
    dart.addTypeCaches(RxSet);
    RxSet[dart.implements] = () => [rx_types.RxInterface$(core.Set$(E))];
    dart.setMethodSignature(RxSet, () => ({
      __proto__: dart.getMethods(RxSet.__proto__),
      '+': dart.fnType(rx_types.RxSet$(E), [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(core.Iterable$(E))])]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [S$.$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      toSet: dart.fnType(core.Set$(E), []),
      [S$0.$toSet]: dart.fnType(core.Set$(E), [])
    }));
    dart.setGetterSignature(RxSet, () => ({
      __proto__: dart.getGetters(RxSet.__proto__),
      iterator: core.Iterator$(E),
      [S$0.$iterator]: core.Iterator$(E),
      length: core.int,
      [S$.$length]: core.int
    }));
    dart.setLibraryUri(RxSet, I[47]);
    dart.defineExtensionMethods(RxSet, ['contains', 'toSet']);
    dart.defineExtensionAccessors(RxSet, ['iterator', 'length']);
    return RxSet;
  });
  rx_types.RxSet = rx_types.RxSet$();
  dart.addTypeTests(rx_types.RxSet, _is_RxSet_default);
  const _is_RxMap_default = Symbol('_is_RxMap_default');
  rx_types.RxMap$ = dart.generic((K, V) => {
    var __t$LinkedHashMapOfK$V = () => (__t$LinkedHashMapOfK$V = dart.constFn(collection.LinkedHashMap$(K, V)))();
    const MapMixin_NotifyManager$36 = class MapMixin_NotifyManager extends collection.MapMixin$(K, V) {};
    (MapMixin_NotifyManager$36.new = function() {
      rx_types.NotifyManager$(core.Map$(K, V))[dart.mixinNew].call(this);
    }).prototype = MapMixin_NotifyManager$36.prototype;
    dart.applyMixin(MapMixin_NotifyManager$36, rx_types.NotifyManager$(core.Map$(K, V)));
    const MapMixin_RxObjectMixin$36 = class MapMixin_RxObjectMixin extends MapMixin_NotifyManager$36 {};
    (MapMixin_RxObjectMixin$36.new = function() {
      rx_types.RxObjectMixin$(core.Map$(K, V))[dart.mixinNew].call(this);
      MapMixin_RxObjectMixin$36.__proto__.new.call(this);
    }).prototype = MapMixin_RxObjectMixin$36.prototype;
    dart.applyMixin(MapMixin_RxObjectMixin$36, rx_types.RxObjectMixin$(core.Map$(K, V)));
    class RxMap extends MapMixin_RxObjectMixin$36 {
      static ['_#new#tearOff'](K, V, initial = C[108] || CT.C108) {
        return new (rx_types.RxMap$(K, V)).new(initial);
      }
      static from(other) {
        return new (rx_types.RxMap$(K, V)).new(collection.LinkedHashMap$(K, V).from(other));
      }
      static ['_#from#tearOff'](K, V, other) {
        return rx_types.RxMap$(K, V).from(other);
      }
      static of(other) {
        return new (rx_types.RxMap$(K, V)).new(collection.LinkedHashMap$(K, V).of(other));
      }
      static ['_#of#tearOff'](K, V, other) {
        return rx_types.RxMap$(K, V).of(other);
      }
      static unmodifiable(other) {
        return new (rx_types.RxMap$(K, V)).new(core.Map$(K, V).unmodifiable(other));
      }
      static ['_#unmodifiable#tearOff'](K, V, other) {
        return rx_types.RxMap$(K, V).unmodifiable(other);
      }
      static identity() {
        return new (rx_types.RxMap$(K, V)).new(new (_js_helper.IdentityMap$(K, V)).new());
      }
      static ['_#identity#tearOff'](K, V) {
        return rx_types.RxMap$(K, V).identity();
      }
      _get(key) {
        return this.value[S$.$_get](K.as(key));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        this[S$0._value$4][S$.$_set](key, value);
        this.refresh();
        return value$;
      }
      clear() {
        this[S$0._value$4][S$.$clear]();
        this.refresh();
      }
      get keys() {
        return this.value[S$.$keys];
      }
      remove(key) {
        let val = this[S$0._value$4][S$.$remove](key);
        this.refresh();
        return val;
      }
      get value() {
        let t201;
        t201 = rx_types.RxInterface.proxy;
        t201 == null ? null : t201.addListener(this.subject);
        return this[S$0._value$4];
      }
      set value(value) {
        super.value = value;
      }
    }
    (RxMap.new = function(initial = C[108] || CT.C108) {
      RxMap.__proto__.new.call(this);
      this[S$0._value$4] = __t$LinkedHashMapOfK$V().from(initial);
    }).prototype = RxMap.prototype;
    dart.addTypeTests(RxMap);
    RxMap.prototype[_is_RxMap_default] = true;
    dart.addTypeCaches(RxMap);
    RxMap[dart.implements] = () => [rx_types.RxInterface$(core.Map$(K, V))];
    dart.setMethodSignature(RxMap, () => ({
      __proto__: dart.getMethods(RxMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [S$.$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [S$.$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [S$.$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [S$.$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)])
    }));
    dart.setStaticMethodSignature(RxMap, () => ['from', 'of', 'unmodifiable', 'identity']);
    dart.setGetterSignature(RxMap, () => ({
      __proto__: dart.getGetters(RxMap.__proto__),
      keys: core.Iterable$(K),
      [S$.$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(RxMap, I[47]);
    dart.defineExtensionMethods(RxMap, ['_get', '_set', 'clear', 'remove']);
    dart.defineExtensionAccessors(RxMap, ['keys']);
    return RxMap;
  });
  rx_types.RxMap = rx_types.RxMap$();
  dart.addTypeTests(rx_types.RxMap, _is_RxMap_default);
  rx_types['RxBoolExt|get#isTrue'] = function RxBoolExt$124get$35isTrue($this) {
    return $this.value;
  };
  rx_types['RxBoolExt|get#isFalse'] = function RxBoolExt$124get$35isFalse($this) {
    return !rx_types['RxBoolExt|get#isTrue']($this);
  };
  rx_types['RxBoolExt|&'] = function RxBoolExt$124$38($this, other) {
    return other && $this.value;
  };
  rx_types['RxBoolExt||'] = function RxBoolExt$124$124($this, other) {
    return other || $this.value;
  };
  rx_types['RxBoolExt|^'] = function RxBoolExt$124$94($this, other) {
    return !other === $this.value;
  };
  rx_types['RxBoolExt|toggle'] = function RxBoolExt$124toggle($this) {
    $this.subject.add($this[S$0._value$4] = !$this[S$0._value$4]);
    return $this;
  };
  rx_types['RxBoolExt|get#toggle'] = function RxBoolExt$124get$35toggle($this) {
    return dart.fn(() => rx_types['RxBoolExt|toggle']($this), T$.VoidToRxOfbool());
  };
  rx_types['RxnBoolExt|get#isTrue'] = function RxnBoolExt$124get$35isTrue($this) {
    return $this.value;
  };
  rx_types['RxnBoolExt|get#isFalse'] = function RxnBoolExt$124get$35isFalse($this) {
    if ($this.value != null) return !dart.nullCheck(rx_types['RxnBoolExt|get#isTrue']($this));
    return null;
  };
  rx_types['RxnBoolExt|&'] = function RxnBoolExt$124$38($this, other) {
    if ($this.value != null) {
      return other && dart.nullCheck($this.value);
    }
    return null;
  };
  rx_types['RxnBoolExt||'] = function RxnBoolExt$124$124($this, other) {
    if ($this.value != null) {
      return other || dart.nullCheck($this.value);
    }
    return null;
  };
  rx_types['RxnBoolExt|^'] = function RxnBoolExt$124$94($this, other) {
    return !other === $this.value;
  };
  rx_types['RxnBoolExt|get#toggle'] = function RxnBoolExt$124get$35toggle($this) {
    return dart.fn(() => rx_types['RxnBoolExt|toggle']($this), T$.VoidToRxNOfboolN());
  };
  rx_types['RxnBoolExt|toggle'] = function RxnBoolExt$124toggle($this) {
    if ($this[S$0._value$4] != null) {
      $this.subject.add($this[S$0._value$4] = !dart.nullCheck($this[S$0._value$4]));
      return $this;
    }
    return null;
  };
  rx_types['StringExtension|get#obs'] = function StringExtension$124get$35obs($this) {
    return new rx_types.RxString.new($this);
  };
  rx_types['IntExtension|get#obs'] = function IntExtension$124get$35obs($this) {
    return new rx_types.RxInt.new($this);
  };
  rx_types['DoubleExtension|get#obs'] = function DoubleExtension$124get$35obs($this) {
    return new rx_types.RxDouble.new($this);
  };
  rx_types['BoolExtension|get#obs'] = function BoolExtension$124get$35obs($this) {
    return new rx_types.RxBool.new($this);
  };
  rx_types['RxT|get#obs'] = function RxT$124get$35obs(T, $this) {
    return new (rx_types.Rx$(T)).new($this);
  };
  rx_types['RxNumExt|*'] = function RxNumExt$124$42(T, $this, other) {
    return $this.value * other;
  };
  rx_types['RxNumExt|%'] = function RxNumExt$124$37(T, $this, other) {
    return $this.value[S$0.$modulo](other);
  };
  rx_types['RxNumExt|/'] = function RxNumExt$124$47(T, $this, other) {
    return $this.value / other;
  };
  rx_types['RxNumExt|~/'] = function RxNumExt$124$126$47(T, $this, other) {
    return ($this.value / other)[S$0.$truncate]();
  };
  rx_types['RxNumExt|unary-'] = function RxNumExt$124unary$45(T, $this) {
    return -$this.value;
  };
  rx_types['RxNumExt|remainder'] = function RxNumExt$124remainder(T, $this, other) {
    return $this.value[S$0.$remainder](other);
  };
  rx_types['RxNumExt|get#remainder'] = function RxNumExt$124get$35remainder(T, $this) {
    return dart.fn(other => rx_types['RxNumExt|remainder'](T, $this, other), T$.numTonum());
  };
  rx_types['RxNumExt|<'] = function RxNumExt$124$60(T, $this, other) {
    return $this.value < other;
  };
  rx_types['RxNumExt|<='] = function RxNumExt$124$60$61(T, $this, other) {
    return $this.value <= other;
  };
  rx_types['RxNumExt|>'] = function RxNumExt$124$62(T, $this, other) {
    return $this.value > other;
  };
  rx_types['RxNumExt|>='] = function RxNumExt$124$62$61(T, $this, other) {
    return $this.value >= other;
  };
  rx_types['RxNumExt|get#isNaN'] = function RxNumExt$124get$35isNaN(T, $this) {
    return $this.value[S$0.$isNaN];
  };
  rx_types['RxNumExt|get#isNegative'] = function RxNumExt$124get$35isNegative(T, $this) {
    return $this.value[S$0.$isNegative];
  };
  rx_types['RxNumExt|get#isInfinite'] = function RxNumExt$124get$35isInfinite(T, $this) {
    return $this.value[S$0.$isInfinite];
  };
  rx_types['RxNumExt|get#isFinite'] = function RxNumExt$124get$35isFinite(T, $this) {
    return $this.value[S$0.$isFinite];
  };
  rx_types['RxNumExt|abs'] = function RxNumExt$124abs(T, $this) {
    return $this.value[S$0.$abs]();
  };
  rx_types['RxNumExt|get#abs'] = function RxNumExt$124get$35abs(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|abs'](T, $this), T$.VoidTonum());
  };
  rx_types['RxNumExt|get#sign'] = function RxNumExt$124get$35sign(T, $this) {
    return $this.value[S$0.$sign];
  };
  rx_types['RxNumExt|round'] = function RxNumExt$124round(T, $this) {
    return $this.value[S$0.$round]();
  };
  rx_types['RxNumExt|get#round'] = function RxNumExt$124get$35round(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|round'](T, $this), T$.VoidToint());
  };
  rx_types['RxNumExt|floor'] = function RxNumExt$124floor(T, $this) {
    return $this.value[S$0.$floor]();
  };
  rx_types['RxNumExt|get#floor'] = function RxNumExt$124get$35floor(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|floor'](T, $this), T$.VoidToint());
  };
  rx_types['RxNumExt|ceil'] = function RxNumExt$124ceil(T, $this) {
    return $this.value[S$0.$ceil]();
  };
  rx_types['RxNumExt|get#ceil'] = function RxNumExt$124get$35ceil(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|ceil'](T, $this), T$.VoidToint());
  };
  rx_types['RxNumExt|truncate'] = function RxNumExt$124truncate(T, $this) {
    return $this.value[S$0.$truncate]();
  };
  rx_types['RxNumExt|get#truncate'] = function RxNumExt$124get$35truncate(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|truncate'](T, $this), T$.VoidToint());
  };
  rx_types['RxNumExt|roundToDouble'] = function RxNumExt$124roundToDouble(T, $this) {
    return $this.value[S$0.$roundToDouble]();
  };
  rx_types['RxNumExt|get#roundToDouble'] = function RxNumExt$124get$35roundToDouble(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|roundToDouble'](T, $this), T$.VoidTodouble());
  };
  rx_types['RxNumExt|floorToDouble'] = function RxNumExt$124floorToDouble(T, $this) {
    return $this.value[S$0.$floorToDouble]();
  };
  rx_types['RxNumExt|get#floorToDouble'] = function RxNumExt$124get$35floorToDouble(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|floorToDouble'](T, $this), T$.VoidTodouble());
  };
  rx_types['RxNumExt|ceilToDouble'] = function RxNumExt$124ceilToDouble(T, $this) {
    return $this.value[S$0.$ceilToDouble]();
  };
  rx_types['RxNumExt|get#ceilToDouble'] = function RxNumExt$124get$35ceilToDouble(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|ceilToDouble'](T, $this), T$.VoidTodouble());
  };
  rx_types['RxNumExt|get#truncateToDouble'] = function RxNumExt$124get$35truncateToDouble(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|truncateToDouble'](T, $this), T$.VoidTodouble());
  };
  rx_types['RxNumExt|truncateToDouble'] = function RxNumExt$124truncateToDouble(T, $this) {
    return $this.value[S$0.$truncateToDouble]();
  };
  rx_types['RxNumExt|clamp'] = function RxNumExt$124clamp(T, $this, lowerLimit, upperLimit) {
    return $this.value[S$0.$clamp](lowerLimit, upperLimit);
  };
  rx_types['RxNumExt|get#clamp'] = function RxNumExt$124get$35clamp(T, $this) {
    return dart.fn((lowerLimit, upperLimit) => rx_types['RxNumExt|clamp'](T, $this, lowerLimit, upperLimit), T$.numAndnumTonum());
  };
  rx_types['RxNumExt|toInt'] = function RxNumExt$124toInt(T, $this) {
    return $this.value[S$0.$toInt]();
  };
  rx_types['RxNumExt|get#toInt'] = function RxNumExt$124get$35toInt(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|toInt'](T, $this), T$.VoidToint());
  };
  rx_types['RxNumExt|toDouble'] = function RxNumExt$124toDouble(T, $this) {
    return $this.value[S$0.$toDouble]();
  };
  rx_types['RxNumExt|get#toDouble'] = function RxNumExt$124get$35toDouble(T, $this) {
    return dart.fn(() => rx_types['RxNumExt|toDouble'](T, $this), T$.VoidTodouble());
  };
  rx_types['RxNumExt|toStringAsFixed'] = function RxNumExt$124toStringAsFixed(T, $this, fractionDigits) {
    return $this.value[S$0.$toStringAsFixed](fractionDigits);
  };
  rx_types['RxNumExt|get#toStringAsFixed'] = function RxNumExt$124get$35toStringAsFixed(T, $this) {
    return dart.fn(fractionDigits => rx_types['RxNumExt|toStringAsFixed'](T, $this, fractionDigits), T$.intToString());
  };
  rx_types['RxNumExt|toStringAsExponential'] = function RxNumExt$124toStringAsExponential(T, $this, fractionDigits = null) {
    return $this.value[S$0.$toStringAsExponential](fractionDigits);
  };
  rx_types['RxNumExt|get#toStringAsExponential'] = function RxNumExt$124get$35toStringAsExponential(T, $this) {
    return dart.fn((fractionDigits = null) => rx_types['RxNumExt|toStringAsExponential'](T, $this, fractionDigits), T$.intNToString());
  };
  rx_types['RxNumExt|toStringAsPrecision'] = function RxNumExt$124toStringAsPrecision(T, $this, precision) {
    return $this.value[S$0.$toStringAsPrecision](precision);
  };
  rx_types['RxNumExt|get#toStringAsPrecision'] = function RxNumExt$124get$35toStringAsPrecision(T, $this) {
    return dart.fn(precision => rx_types['RxNumExt|toStringAsPrecision'](T, $this, precision), T$.intToString());
  };
  rx_types['RxnNumExt|*'] = function RxnNumExt$124$42(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) * other;
    }
    return null;
  };
  rx_types['RxnNumExt|%'] = function RxnNumExt$124$37(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value)[S$0.$modulo](other);
    }
    return null;
  };
  rx_types['RxnNumExt|/'] = function RxnNumExt$124$47(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) / other;
    }
    return null;
  };
  rx_types['RxnNumExt|~/'] = function RxnNumExt$124$126$47(T, $this, other) {
    if ($this.value != null) {
      return (dart.nullCheck($this.value) / other)[S$0.$truncate]();
    }
    return null;
  };
  rx_types['RxnNumExt|unary-'] = function RxnNumExt$124unary$45(T, $this) {
    if ($this.value != null) {
      return -dart.nullCheck($this.value);
    }
    return null;
  };
  rx_types['RxnNumExt|remainder'] = function RxnNumExt$124remainder(T, $this, other) {
    let t272;
    t272 = $this.value;
    return t272 == null ? null : t272[S$0.$remainder](other);
  };
  rx_types['RxnNumExt|get#remainder'] = function RxnNumExt$124get$35remainder(T, $this) {
    return dart.fn(other => rx_types['RxnNumExt|remainder'](T, $this, other), T$.numTonumN());
  };
  rx_types['RxnNumExt|<'] = function RxnNumExt$124$60(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) < other;
    }
    return null;
  };
  rx_types['RxnNumExt|<='] = function RxnNumExt$124$60$61(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) <= other;
    }
    return null;
  };
  rx_types['RxnNumExt|>'] = function RxnNumExt$124$62(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) > other;
    }
    return null;
  };
  rx_types['RxnNumExt|>='] = function RxnNumExt$124$62$61(T, $this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) >= other;
    }
    return null;
  };
  rx_types['RxnNumExt|get#isNaN'] = function RxnNumExt$124get$35isNaN(T, $this) {
    let t278;
    t278 = $this.value;
    return t278 == null ? null : t278[S$0.$isNaN];
  };
  rx_types['RxnNumExt|get#isNegative'] = function RxnNumExt$124get$35isNegative(T, $this) {
    let t279;
    t279 = $this.value;
    return t279 == null ? null : t279[S$0.$isNegative];
  };
  rx_types['RxnNumExt|get#isInfinite'] = function RxnNumExt$124get$35isInfinite(T, $this) {
    let t280;
    t280 = $this.value;
    return t280 == null ? null : t280[S$0.$isInfinite];
  };
  rx_types['RxnNumExt|get#isFinite'] = function RxnNumExt$124get$35isFinite(T, $this) {
    let t281;
    t281 = $this.value;
    return t281 == null ? null : t281[S$0.$isFinite];
  };
  rx_types['RxnNumExt|abs'] = function RxnNumExt$124abs(T, $this) {
    let t282;
    t282 = $this.value;
    return t282 == null ? null : t282[S$0.$abs]();
  };
  rx_types['RxnNumExt|get#abs'] = function RxnNumExt$124get$35abs(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|abs'](T, $this), T$.VoidTonumN());
  };
  rx_types['RxnNumExt|get#sign'] = function RxnNumExt$124get$35sign(T, $this) {
    let t284;
    t284 = $this.value;
    return t284 == null ? null : t284[S$0.$sign];
  };
  rx_types['RxnNumExt|round'] = function RxnNumExt$124round(T, $this) {
    let t285;
    t285 = $this.value;
    return t285 == null ? null : t285[S$0.$round]();
  };
  rx_types['RxnNumExt|get#round'] = function RxnNumExt$124get$35round(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|round'](T, $this), T$.VoidTointN());
  };
  rx_types['RxnNumExt|floor'] = function RxnNumExt$124floor(T, $this) {
    let t287;
    t287 = $this.value;
    return t287 == null ? null : t287[S$0.$floor]();
  };
  rx_types['RxnNumExt|get#floor'] = function RxnNumExt$124get$35floor(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|floor'](T, $this), T$.VoidTointN());
  };
  rx_types['RxnNumExt|ceil'] = function RxnNumExt$124ceil(T, $this) {
    let t289;
    t289 = $this.value;
    return t289 == null ? null : t289[S$0.$ceil]();
  };
  rx_types['RxnNumExt|get#ceil'] = function RxnNumExt$124get$35ceil(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|ceil'](T, $this), T$.VoidTointN());
  };
  rx_types['RxnNumExt|truncate'] = function RxnNumExt$124truncate(T, $this) {
    let t291;
    t291 = $this.value;
    return t291 == null ? null : t291[S$0.$truncate]();
  };
  rx_types['RxnNumExt|get#truncate'] = function RxnNumExt$124get$35truncate(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|truncate'](T, $this), T$.VoidTointN());
  };
  rx_types['RxnNumExt|roundToDouble'] = function RxnNumExt$124roundToDouble(T, $this) {
    let t293;
    t293 = $this.value;
    return t293 == null ? null : t293[S$0.$roundToDouble]();
  };
  rx_types['RxnNumExt|get#roundToDouble'] = function RxnNumExt$124get$35roundToDouble(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|roundToDouble'](T, $this), T$.VoidTodoubleN());
  };
  rx_types['RxnNumExt|floorToDouble'] = function RxnNumExt$124floorToDouble(T, $this) {
    let t295;
    t295 = $this.value;
    return t295 == null ? null : t295[S$0.$floorToDouble]();
  };
  rx_types['RxnNumExt|get#floorToDouble'] = function RxnNumExt$124get$35floorToDouble(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|floorToDouble'](T, $this), T$.VoidTodoubleN());
  };
  rx_types['RxnNumExt|ceilToDouble'] = function RxnNumExt$124ceilToDouble(T, $this) {
    let t297;
    t297 = $this.value;
    return t297 == null ? null : t297[S$0.$ceilToDouble]();
  };
  rx_types['RxnNumExt|get#ceilToDouble'] = function RxnNumExt$124get$35ceilToDouble(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|ceilToDouble'](T, $this), T$.VoidTodoubleN());
  };
  rx_types['RxnNumExt|truncateToDouble'] = function RxnNumExt$124truncateToDouble(T, $this) {
    let t299;
    t299 = $this.value;
    return t299 == null ? null : t299[S$0.$truncateToDouble]();
  };
  rx_types['RxnNumExt|get#truncateToDouble'] = function RxnNumExt$124get$35truncateToDouble(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|truncateToDouble'](T, $this), T$.VoidTodoubleN());
  };
  rx_types['RxnNumExt|clamp'] = function RxnNumExt$124clamp(T, $this, lowerLimit, upperLimit) {
    let t301;
    t301 = $this.value;
    return t301 == null ? null : t301[S$0.$clamp](lowerLimit, upperLimit);
  };
  rx_types['RxnNumExt|get#clamp'] = function RxnNumExt$124get$35clamp(T, $this) {
    return dart.fn((lowerLimit, upperLimit) => rx_types['RxnNumExt|clamp'](T, $this, lowerLimit, upperLimit), T$.numAndnumTonumN());
  };
  rx_types['RxnNumExt|toInt'] = function RxnNumExt$124toInt(T, $this) {
    let t303;
    t303 = $this.value;
    return t303 == null ? null : t303[S$0.$toInt]();
  };
  rx_types['RxnNumExt|get#toInt'] = function RxnNumExt$124get$35toInt(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|toInt'](T, $this), T$.VoidTointN());
  };
  rx_types['RxnNumExt|get#toDouble'] = function RxnNumExt$124get$35toDouble(T, $this) {
    return dart.fn(() => rx_types['RxnNumExt|toDouble'](T, $this), T$.VoidTodoubleN());
  };
  rx_types['RxnNumExt|toDouble'] = function RxnNumExt$124toDouble(T, $this) {
    let t306;
    t306 = $this.value;
    return t306 == null ? null : t306[S$0.$toDouble]();
  };
  rx_types['RxnNumExt|toStringAsFixed'] = function RxnNumExt$124toStringAsFixed(T, $this, fractionDigits) {
    let t307;
    t307 = $this.value;
    return t307 == null ? null : t307[S$0.$toStringAsFixed](fractionDigits);
  };
  rx_types['RxnNumExt|get#toStringAsFixed'] = function RxnNumExt$124get$35toStringAsFixed(T, $this) {
    return dart.fn(fractionDigits => rx_types['RxnNumExt|toStringAsFixed'](T, $this, fractionDigits), T$.intToStringN());
  };
  rx_types['RxnNumExt|toStringAsExponential'] = function RxnNumExt$124toStringAsExponential(T, $this, fractionDigits = null) {
    let t309;
    t309 = $this.value;
    return t309 == null ? null : t309[S$0.$toStringAsExponential](fractionDigits);
  };
  rx_types['RxnNumExt|get#toStringAsExponential'] = function RxnNumExt$124get$35toStringAsExponential(T, $this) {
    return dart.fn((fractionDigits = null) => rx_types['RxnNumExt|toStringAsExponential'](T, $this, fractionDigits), T$.intNToStringN());
  };
  rx_types['RxnNumExt|toStringAsPrecision'] = function RxnNumExt$124toStringAsPrecision(T, $this, precision) {
    let t311;
    t311 = $this.value;
    return t311 == null ? null : t311[S$0.$toStringAsPrecision](precision);
  };
  rx_types['RxnNumExt|get#toStringAsPrecision'] = function RxnNumExt$124get$35toStringAsPrecision(T, $this) {
    return dart.fn(precision => rx_types['RxnNumExt|toStringAsPrecision'](T, $this, precision), T$.intToStringN());
  };
  rx_types['RxDoubleExt|+'] = function RxDoubleExt$124$43($this, other) {
    $this.value = $this.value + other;
    return $this;
  };
  rx_types['RxDoubleExt|-'] = function RxDoubleExt$124$45($this, other) {
    $this.value = $this.value - other;
    return $this;
  };
  rx_types['RxDoubleExt|*'] = function RxDoubleExt$124$42($this, other) {
    return $this.value * other;
  };
  rx_types['RxDoubleExt|%'] = function RxDoubleExt$124$37($this, other) {
    return $this.value[S$0.$modulo](other);
  };
  rx_types['RxDoubleExt|/'] = function RxDoubleExt$124$47($this, other) {
    return $this.value / other;
  };
  rx_types['RxDoubleExt|~/'] = function RxDoubleExt$124$126$47($this, other) {
    return ($this.value / other)[S$0.$truncate]();
  };
  rx_types['RxDoubleExt|unary-'] = function RxDoubleExt$124unary$45($this) {
    return -$this.value;
  };
  rx_types['RxDoubleExt|abs'] = function RxDoubleExt$124abs($this) {
    return $this.value[S$0.$abs]();
  };
  rx_types['RxDoubleExt|get#abs'] = function RxDoubleExt$124get$35abs($this) {
    return dart.fn(() => rx_types['RxDoubleExt|abs']($this), T$.VoidTodouble());
  };
  rx_types['RxDoubleExt|get#sign'] = function RxDoubleExt$124get$35sign($this) {
    return $this.value[S$0.$sign];
  };
  rx_types['RxDoubleExt|round'] = function RxDoubleExt$124round($this) {
    return $this.value[S$0.$round]();
  };
  rx_types['RxDoubleExt|get#round'] = function RxDoubleExt$124get$35round($this) {
    return dart.fn(() => rx_types['RxDoubleExt|round']($this), T$.VoidToint());
  };
  rx_types['RxDoubleExt|floor'] = function RxDoubleExt$124floor($this) {
    return $this.value[S$0.$floor]();
  };
  rx_types['RxDoubleExt|get#floor'] = function RxDoubleExt$124get$35floor($this) {
    return dart.fn(() => rx_types['RxDoubleExt|floor']($this), T$.VoidToint());
  };
  rx_types['RxDoubleExt|ceil'] = function RxDoubleExt$124ceil($this) {
    return $this.value[S$0.$ceil]();
  };
  rx_types['RxDoubleExt|get#ceil'] = function RxDoubleExt$124get$35ceil($this) {
    return dart.fn(() => rx_types['RxDoubleExt|ceil']($this), T$.VoidToint());
  };
  rx_types['RxDoubleExt|truncate'] = function RxDoubleExt$124truncate($this) {
    return $this.value[S$0.$truncate]();
  };
  rx_types['RxDoubleExt|get#truncate'] = function RxDoubleExt$124get$35truncate($this) {
    return dart.fn(() => rx_types['RxDoubleExt|truncate']($this), T$.VoidToint());
  };
  rx_types['RxDoubleExt|get#roundToDouble'] = function RxDoubleExt$124get$35roundToDouble($this) {
    return dart.fn(() => rx_types['RxDoubleExt|roundToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxDoubleExt|roundToDouble'] = function RxDoubleExt$124roundToDouble($this) {
    return $this.value[S$0.$roundToDouble]();
  };
  rx_types['RxDoubleExt|floorToDouble'] = function RxDoubleExt$124floorToDouble($this) {
    return $this.value[S$0.$floorToDouble]();
  };
  rx_types['RxDoubleExt|get#floorToDouble'] = function RxDoubleExt$124get$35floorToDouble($this) {
    return dart.fn(() => rx_types['RxDoubleExt|floorToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxDoubleExt|ceilToDouble'] = function RxDoubleExt$124ceilToDouble($this) {
    return $this.value[S$0.$ceilToDouble]();
  };
  rx_types['RxDoubleExt|get#ceilToDouble'] = function RxDoubleExt$124get$35ceilToDouble($this) {
    return dart.fn(() => rx_types['RxDoubleExt|ceilToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxDoubleExt|truncateToDouble'] = function RxDoubleExt$124truncateToDouble($this) {
    return $this.value[S$0.$truncateToDouble]();
  };
  rx_types['RxDoubleExt|get#truncateToDouble'] = function RxDoubleExt$124get$35truncateToDouble($this) {
    return dart.fn(() => rx_types['RxDoubleExt|truncateToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxnDoubleExt|+'] = function RxnDoubleExt$124$43($this, other) {
    if ($this.value != null) {
      $this.value = dart.nullCheck($this.value) + other;
      return $this;
    }
    return null;
  };
  rx_types['RxnDoubleExt|-'] = function RxnDoubleExt$124$45($this, other) {
    if ($this.value != null) {
      $this.value = dart.nullCheck($this.value) + other;
      return $this;
    }
    return null;
  };
  rx_types['RxnDoubleExt|*'] = function RxnDoubleExt$124$42($this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) * other;
    }
    return null;
  };
  rx_types['RxnDoubleExt|%'] = function RxnDoubleExt$124$37($this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value)[S$0.$modulo](other);
    }
    return null;
  };
  rx_types['RxnDoubleExt|/'] = function RxnDoubleExt$124$47($this, other) {
    if ($this.value != null) {
      return dart.nullCheck($this.value) / other;
    }
    return null;
  };
  rx_types['RxnDoubleExt|~/'] = function RxnDoubleExt$124$126$47($this, other) {
    if ($this.value != null) {
      return (dart.nullCheck($this.value) / other)[S$0.$truncate]();
    }
    return null;
  };
  rx_types['RxnDoubleExt|unary-'] = function RxnDoubleExt$124unary$45($this) {
    if ($this.value != null) {
      return -dart.nullCheck($this.value);
    }
    return null;
  };
  rx_types['RxnDoubleExt|abs'] = function RxnDoubleExt$124abs($this) {
    let t346;
    t346 = $this.value;
    return t346 == null ? null : t346[S$0.$abs]();
  };
  rx_types['RxnDoubleExt|get#abs'] = function RxnDoubleExt$124get$35abs($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|abs']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnDoubleExt|get#sign'] = function RxnDoubleExt$124get$35sign($this) {
    let t348;
    t348 = $this.value;
    return t348 == null ? null : t348[S$0.$sign];
  };
  rx_types['RxnDoubleExt|round'] = function RxnDoubleExt$124round($this) {
    let t349;
    t349 = $this.value;
    return t349 == null ? null : t349[S$0.$round]();
  };
  rx_types['RxnDoubleExt|get#round'] = function RxnDoubleExt$124get$35round($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|round']($this), T$.VoidTointN());
  };
  rx_types['RxnDoubleExt|floor'] = function RxnDoubleExt$124floor($this) {
    let t351;
    t351 = $this.value;
    return t351 == null ? null : t351[S$0.$floor]();
  };
  rx_types['RxnDoubleExt|get#floor'] = function RxnDoubleExt$124get$35floor($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|floor']($this), T$.VoidTointN());
  };
  rx_types['RxnDoubleExt|ceil'] = function RxnDoubleExt$124ceil($this) {
    let t353;
    t353 = $this.value;
    return t353 == null ? null : t353[S$0.$ceil]();
  };
  rx_types['RxnDoubleExt|get#ceil'] = function RxnDoubleExt$124get$35ceil($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|ceil']($this), T$.VoidTointN());
  };
  rx_types['RxnDoubleExt|truncate'] = function RxnDoubleExt$124truncate($this) {
    let t355;
    t355 = $this.value;
    return t355 == null ? null : t355[S$0.$truncate]();
  };
  rx_types['RxnDoubleExt|get#truncate'] = function RxnDoubleExt$124get$35truncate($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|truncate']($this), T$.VoidTointN());
  };
  rx_types['RxnDoubleExt|get#roundToDouble'] = function RxnDoubleExt$124get$35roundToDouble($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|roundToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnDoubleExt|roundToDouble'] = function RxnDoubleExt$124roundToDouble($this) {
    let t358;
    t358 = $this.value;
    return t358 == null ? null : t358[S$0.$roundToDouble]();
  };
  rx_types['RxnDoubleExt|floorToDouble'] = function RxnDoubleExt$124floorToDouble($this) {
    let t359;
    t359 = $this.value;
    return t359 == null ? null : t359[S$0.$floorToDouble]();
  };
  rx_types['RxnDoubleExt|get#floorToDouble'] = function RxnDoubleExt$124get$35floorToDouble($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|floorToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnDoubleExt|ceilToDouble'] = function RxnDoubleExt$124ceilToDouble($this) {
    let t361;
    t361 = $this.value;
    return t361 == null ? null : t361[S$0.$ceilToDouble]();
  };
  rx_types['RxnDoubleExt|get#ceilToDouble'] = function RxnDoubleExt$124get$35ceilToDouble($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|ceilToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnDoubleExt|truncateToDouble'] = function RxnDoubleExt$124truncateToDouble($this) {
    let t363;
    t363 = $this.value;
    return t363 == null ? null : t363[S$0.$truncateToDouble]();
  };
  rx_types['RxnDoubleExt|get#truncateToDouble'] = function RxnDoubleExt$124get$35truncateToDouble($this) {
    return dart.fn(() => rx_types['RxnDoubleExt|truncateToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxIntExt|&'] = function RxIntExt$124$38($this, other) {
    return ($this.value & other) >>> 0;
  };
  rx_types['RxIntExt||'] = function RxIntExt$124$124($this, other) {
    return ($this.value | other) >>> 0;
  };
  rx_types['RxIntExt|^'] = function RxIntExt$124$94($this, other) {
    return ($this.value ^ other) >>> 0;
  };
  rx_types['RxIntExt|~'] = function RxIntExt$124$126($this) {
    return ~$this.value >>> 0;
  };
  rx_types['RxIntExt|<<'] = function RxIntExt$124$60$60($this, shiftAmount) {
    return $this.value[S$0.$leftShift](shiftAmount);
  };
  rx_types['RxIntExt|>>'] = function RxIntExt$124$62$62($this, shiftAmount) {
    return $this.value[S$0.$rightShift](shiftAmount);
  };
  rx_types['RxIntExt|modPow'] = function RxIntExt$124modPow($this, exponent, modulus) {
    return $this.value[S$0.$modPow](exponent, modulus);
  };
  rx_types['RxIntExt|get#modPow'] = function RxIntExt$124get$35modPow($this) {
    return dart.fn((exponent, modulus) => rx_types['RxIntExt|modPow']($this, exponent, modulus), T$.intAndintToint());
  };
  rx_types['RxIntExt|modInverse'] = function RxIntExt$124modInverse($this, modulus) {
    return $this.value[S$0.$modInverse](modulus);
  };
  rx_types['RxIntExt|get#modInverse'] = function RxIntExt$124get$35modInverse($this) {
    return dart.fn(modulus => rx_types['RxIntExt|modInverse']($this, modulus), T$.intToint());
  };
  rx_types['RxIntExt|gcd'] = function RxIntExt$124gcd($this, other) {
    return $this.value[S$0.$gcd](other);
  };
  rx_types['RxIntExt|get#gcd'] = function RxIntExt$124get$35gcd($this) {
    return dart.fn(other => rx_types['RxIntExt|gcd']($this, other), T$.intToint());
  };
  rx_types['RxIntExt|get#isEven'] = function RxIntExt$124get$35isEven($this) {
    return $this.value[S$0.$isEven];
  };
  rx_types['RxIntExt|get#isOdd'] = function RxIntExt$124get$35isOdd($this) {
    return $this.value[S$0.$isOdd];
  };
  rx_types['RxIntExt|get#bitLength'] = function RxIntExt$124get$35bitLength($this) {
    return $this.value[S$0.$bitLength];
  };
  rx_types['RxIntExt|toUnsigned'] = function RxIntExt$124toUnsigned($this, width) {
    return $this.value[S$0.$toUnsigned](width);
  };
  rx_types['RxIntExt|get#toUnsigned'] = function RxIntExt$124get$35toUnsigned($this) {
    return dart.fn(width => rx_types['RxIntExt|toUnsigned']($this, width), T$.intToint());
  };
  rx_types['RxIntExt|toSigned'] = function RxIntExt$124toSigned($this, width) {
    return $this.value[S$0.$toSigned](width);
  };
  rx_types['RxIntExt|get#toSigned'] = function RxIntExt$124get$35toSigned($this) {
    return dart.fn(width => rx_types['RxIntExt|toSigned']($this, width), T$.intToint());
  };
  rx_types['RxIntExt|unary-'] = function RxIntExt$124unary$45($this) {
    return -$this.value;
  };
  rx_types['RxIntExt|abs'] = function RxIntExt$124abs($this) {
    return $this.value[S$0.$abs]();
  };
  rx_types['RxIntExt|get#abs'] = function RxIntExt$124get$35abs($this) {
    return dart.fn(() => rx_types['RxIntExt|abs']($this), T$.VoidToint());
  };
  rx_types['RxIntExt|get#sign'] = function RxIntExt$124get$35sign($this) {
    return $this.value[S$0.$sign];
  };
  rx_types['RxIntExt|round'] = function RxIntExt$124round($this) {
    return $this.value[S$0.$round]();
  };
  rx_types['RxIntExt|get#round'] = function RxIntExt$124get$35round($this) {
    return dart.fn(() => rx_types['RxIntExt|round']($this), T$.VoidToint());
  };
  rx_types['RxIntExt|floor'] = function RxIntExt$124floor($this) {
    return $this.value[S$0.$floor]();
  };
  rx_types['RxIntExt|get#floor'] = function RxIntExt$124get$35floor($this) {
    return dart.fn(() => rx_types['RxIntExt|floor']($this), T$.VoidToint());
  };
  rx_types['RxIntExt|ceil'] = function RxIntExt$124ceil($this) {
    return $this.value[S$0.$ceil]();
  };
  rx_types['RxIntExt|get#ceil'] = function RxIntExt$124get$35ceil($this) {
    return dart.fn(() => rx_types['RxIntExt|ceil']($this), T$.VoidToint());
  };
  rx_types['RxIntExt|truncate'] = function RxIntExt$124truncate($this) {
    return $this.value[S$0.$truncate]();
  };
  rx_types['RxIntExt|get#truncate'] = function RxIntExt$124get$35truncate($this) {
    return dart.fn(() => rx_types['RxIntExt|truncate']($this), T$.VoidToint());
  };
  rx_types['RxIntExt|get#roundToDouble'] = function RxIntExt$124get$35roundToDouble($this) {
    return dart.fn(() => rx_types['RxIntExt|roundToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxIntExt|roundToDouble'] = function RxIntExt$124roundToDouble($this) {
    return $this.value[S$0.$roundToDouble]();
  };
  rx_types['RxIntExt|floorToDouble'] = function RxIntExt$124floorToDouble($this) {
    return $this.value[S$0.$floorToDouble]();
  };
  rx_types['RxIntExt|get#floorToDouble'] = function RxIntExt$124get$35floorToDouble($this) {
    return dart.fn(() => rx_types['RxIntExt|floorToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxIntExt|ceilToDouble'] = function RxIntExt$124ceilToDouble($this) {
    return $this.value[S$0.$ceilToDouble]();
  };
  rx_types['RxIntExt|get#ceilToDouble'] = function RxIntExt$124get$35ceilToDouble($this) {
    return dart.fn(() => rx_types['RxIntExt|ceilToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxIntExt|truncateToDouble'] = function RxIntExt$124truncateToDouble($this) {
    return $this.value[S$0.$truncateToDouble]();
  };
  rx_types['RxIntExt|get#truncateToDouble'] = function RxIntExt$124get$35truncateToDouble($this) {
    return dart.fn(() => rx_types['RxIntExt|truncateToDouble']($this), T$.VoidTodouble());
  };
  rx_types['RxnIntExt|&'] = function RxnIntExt$124$38($this, other) {
    if ($this.value != null) {
      return (dart.nullCheck($this.value) & other) >>> 0;
    }
    return null;
  };
  rx_types['RxnIntExt||'] = function RxnIntExt$124$124($this, other) {
    if ($this.value != null) {
      return (dart.nullCheck($this.value) | other) >>> 0;
    }
    return null;
  };
  rx_types['RxnIntExt|^'] = function RxnIntExt$124$94($this, other) {
    if ($this.value != null) {
      return (dart.nullCheck($this.value) ^ other) >>> 0;
    }
    return null;
  };
  rx_types['RxnIntExt|~'] = function RxnIntExt$124$126($this) {
    if ($this.value != null) {
      return ~dart.nullCheck($this.value) >>> 0;
    }
    return null;
  };
  rx_types['RxnIntExt|<<'] = function RxnIntExt$124$60$60($this, shiftAmount) {
    if ($this.value != null) {
      return dart.nullCheck($this.value)[S$0.$leftShift](shiftAmount);
    }
    return null;
  };
  rx_types['RxnIntExt|>>'] = function RxnIntExt$124$62$62($this, shiftAmount) {
    if ($this.value != null) {
      return dart.nullCheck($this.value)[S$0.$rightShift](shiftAmount);
    }
    return null;
  };
  rx_types['RxnIntExt|modPow'] = function RxnIntExt$124modPow($this, exponent, modulus) {
    let t410;
    t410 = $this.value;
    return t410 == null ? null : t410[S$0.$modPow](exponent, modulus);
  };
  rx_types['RxnIntExt|get#modPow'] = function RxnIntExt$124get$35modPow($this) {
    return dart.fn((exponent, modulus) => rx_types['RxnIntExt|modPow']($this, exponent, modulus), T$.intAndintTointN());
  };
  rx_types['RxnIntExt|modInverse'] = function RxnIntExt$124modInverse($this, modulus) {
    let t412;
    t412 = $this.value;
    return t412 == null ? null : t412[S$0.$modInverse](modulus);
  };
  rx_types['RxnIntExt|get#modInverse'] = function RxnIntExt$124get$35modInverse($this) {
    return dart.fn(modulus => rx_types['RxnIntExt|modInverse']($this, modulus), T$.intTointN());
  };
  rx_types['RxnIntExt|gcd'] = function RxnIntExt$124gcd($this, other) {
    let t414;
    t414 = $this.value;
    return t414 == null ? null : t414[S$0.$gcd](other);
  };
  rx_types['RxnIntExt|get#gcd'] = function RxnIntExt$124get$35gcd($this) {
    return dart.fn(other => rx_types['RxnIntExt|gcd']($this, other), T$.intTointN());
  };
  rx_types['RxnIntExt|get#isEven'] = function RxnIntExt$124get$35isEven($this) {
    let t416;
    t416 = $this.value;
    return t416 == null ? null : t416[S$0.$isEven];
  };
  rx_types['RxnIntExt|get#isOdd'] = function RxnIntExt$124get$35isOdd($this) {
    let t417;
    t417 = $this.value;
    return t417 == null ? null : t417[S$0.$isOdd];
  };
  rx_types['RxnIntExt|get#bitLength'] = function RxnIntExt$124get$35bitLength($this) {
    let t418;
    t418 = $this.value;
    return t418 == null ? null : t418[S$0.$bitLength];
  };
  rx_types['RxnIntExt|toUnsigned'] = function RxnIntExt$124toUnsigned($this, width) {
    let t419;
    t419 = $this.value;
    return t419 == null ? null : t419[S$0.$toUnsigned](width);
  };
  rx_types['RxnIntExt|get#toUnsigned'] = function RxnIntExt$124get$35toUnsigned($this) {
    return dart.fn(width => rx_types['RxnIntExt|toUnsigned']($this, width), T$.intTointN());
  };
  rx_types['RxnIntExt|toSigned'] = function RxnIntExt$124toSigned($this, width) {
    let t421;
    t421 = $this.value;
    return t421 == null ? null : t421[S$0.$toSigned](width);
  };
  rx_types['RxnIntExt|get#toSigned'] = function RxnIntExt$124get$35toSigned($this) {
    return dart.fn(width => rx_types['RxnIntExt|toSigned']($this, width), T$.intTointN());
  };
  rx_types['RxnIntExt|unary-'] = function RxnIntExt$124unary$45($this) {
    if ($this.value != null) {
      return -dart.nullCheck($this.value);
    }
    return null;
  };
  rx_types['RxnIntExt|abs'] = function RxnIntExt$124abs($this) {
    let t424;
    t424 = $this.value;
    return t424 == null ? null : t424[S$0.$abs]();
  };
  rx_types['RxnIntExt|get#abs'] = function RxnIntExt$124get$35abs($this) {
    return dart.fn(() => rx_types['RxnIntExt|abs']($this), T$.VoidTointN());
  };
  rx_types['RxnIntExt|get#sign'] = function RxnIntExt$124get$35sign($this) {
    let t426;
    t426 = $this.value;
    return t426 == null ? null : t426[S$0.$sign];
  };
  rx_types['RxnIntExt|round'] = function RxnIntExt$124round($this) {
    let t427;
    t427 = $this.value;
    return t427 == null ? null : t427[S$0.$round]();
  };
  rx_types['RxnIntExt|get#round'] = function RxnIntExt$124get$35round($this) {
    return dart.fn(() => rx_types['RxnIntExt|round']($this), T$.VoidTointN());
  };
  rx_types['RxnIntExt|floor'] = function RxnIntExt$124floor($this) {
    let t429;
    t429 = $this.value;
    return t429 == null ? null : t429[S$0.$floor]();
  };
  rx_types['RxnIntExt|get#floor'] = function RxnIntExt$124get$35floor($this) {
    return dart.fn(() => rx_types['RxnIntExt|floor']($this), T$.VoidTointN());
  };
  rx_types['RxnIntExt|ceil'] = function RxnIntExt$124ceil($this) {
    let t431;
    t431 = $this.value;
    return t431 == null ? null : t431[S$0.$ceil]();
  };
  rx_types['RxnIntExt|get#ceil'] = function RxnIntExt$124get$35ceil($this) {
    return dart.fn(() => rx_types['RxnIntExt|ceil']($this), T$.VoidTointN());
  };
  rx_types['RxnIntExt|truncate'] = function RxnIntExt$124truncate($this) {
    let t433;
    t433 = $this.value;
    return t433 == null ? null : t433[S$0.$truncate]();
  };
  rx_types['RxnIntExt|get#truncate'] = function RxnIntExt$124get$35truncate($this) {
    return dart.fn(() => rx_types['RxnIntExt|truncate']($this), T$.VoidTointN());
  };
  rx_types['RxnIntExt|get#roundToDouble'] = function RxnIntExt$124get$35roundToDouble($this) {
    return dart.fn(() => rx_types['RxnIntExt|roundToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnIntExt|roundToDouble'] = function RxnIntExt$124roundToDouble($this) {
    let t436;
    t436 = $this.value;
    return t436 == null ? null : t436[S$0.$roundToDouble]();
  };
  rx_types['RxnIntExt|floorToDouble'] = function RxnIntExt$124floorToDouble($this) {
    let t437;
    t437 = $this.value;
    return t437 == null ? null : t437[S$0.$floorToDouble]();
  };
  rx_types['RxnIntExt|get#floorToDouble'] = function RxnIntExt$124get$35floorToDouble($this) {
    return dart.fn(() => rx_types['RxnIntExt|floorToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnIntExt|ceilToDouble'] = function RxnIntExt$124ceilToDouble($this) {
    let t439;
    t439 = $this.value;
    return t439 == null ? null : t439[S$0.$ceilToDouble]();
  };
  rx_types['RxnIntExt|get#ceilToDouble'] = function RxnIntExt$124get$35ceilToDouble($this) {
    return dart.fn(() => rx_types['RxnIntExt|ceilToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxnIntExt|truncateToDouble'] = function RxnIntExt$124truncateToDouble($this) {
    let t441;
    t441 = $this.value;
    return t441 == null ? null : t441[S$0.$truncateToDouble]();
  };
  rx_types['RxnIntExt|get#truncateToDouble'] = function RxnIntExt$124get$35truncateToDouble($this) {
    return dart.fn(() => rx_types['RxnIntExt|truncateToDouble']($this), T$.VoidTodoubleN());
  };
  rx_types['RxStringExt|+'] = function RxStringExt$124$43($this, val) {
    return $this[S$0._value$4] + val;
  };
  rx_types['RxStringExt|compareTo'] = function RxStringExt$124compareTo($this, other) {
    return $this.value[S$.$compareTo](other);
  };
  rx_types['RxStringExt|get#compareTo'] = function RxStringExt$124get$35compareTo($this) {
    return dart.fn(other => rx_types['RxStringExt|compareTo']($this, other), T$.StringToint());
  };
  rx_types['RxStringExt|endsWith'] = function RxStringExt$124endsWith($this, other) {
    return $this.value[S$0.$endsWith](other);
  };
  rx_types['RxStringExt|get#endsWith'] = function RxStringExt$124get$35endsWith($this) {
    return dart.fn(other => rx_types['RxStringExt|endsWith']($this, other), T$.StringTobool());
  };
  rx_types['RxStringExt|startsWith'] = function RxStringExt$124startsWith($this, pattern, index = 0) {
    return $this.value[S$.$startsWith](pattern, index);
  };
  rx_types['RxStringExt|get#startsWith'] = function RxStringExt$124get$35startsWith($this) {
    return dart.fn((pattern, index = 0) => rx_types['RxStringExt|startsWith']($this, pattern, index), T$.PatternAndintTobool());
  };
  rx_types['RxStringExt|indexOf'] = function RxStringExt$124indexOf($this, pattern, start = 0) {
    return $this.value[S$.$indexOf](pattern, start);
  };
  rx_types['RxStringExt|get#indexOf'] = function RxStringExt$124get$35indexOf($this) {
    return dart.fn((pattern, start = 0) => rx_types['RxStringExt|indexOf']($this, pattern, start), T$.PatternAndintToint());
  };
  rx_types['RxStringExt|lastIndexOf'] = function RxStringExt$124lastIndexOf($this, pattern, start = null) {
    return $this.value[S$0.$lastIndexOf](pattern, start);
  };
  rx_types['RxStringExt|get#lastIndexOf'] = function RxStringExt$124get$35lastIndexOf($this) {
    return dart.fn((pattern, start = null) => rx_types['RxStringExt|lastIndexOf']($this, pattern, start), T$.PatternAndintNToint());
  };
  rx_types['RxStringExt|get#isEmpty'] = function RxStringExt$124get$35isEmpty($this) {
    return $this.value[S$.$isEmpty];
  };
  rx_types['RxStringExt|get#isNotEmpty'] = function RxStringExt$124get$35isNotEmpty($this) {
    return !rx_types['RxStringExt|get#isEmpty']($this);
  };
  rx_types['RxStringExt|substring'] = function RxStringExt$124substring($this, startIndex, endIndex = null) {
    return $this.value[S$.$substring](startIndex, endIndex);
  };
  rx_types['RxStringExt|get#substring'] = function RxStringExt$124get$35substring($this) {
    return dart.fn((startIndex, endIndex = null) => rx_types['RxStringExt|substring']($this, startIndex, endIndex), T$.intAndintNToString());
  };
  rx_types['RxStringExt|trim'] = function RxStringExt$124trim($this) {
    return $this.value[S$0.$trim]();
  };
  rx_types['RxStringExt|get#trim'] = function RxStringExt$124get$35trim($this) {
    return dart.fn(() => rx_types['RxStringExt|trim']($this), T$.VoidToString());
  };
  rx_types['RxStringExt|trimLeft'] = function RxStringExt$124trimLeft($this) {
    return $this.value[S$0.$trimLeft]();
  };
  rx_types['RxStringExt|get#trimLeft'] = function RxStringExt$124get$35trimLeft($this) {
    return dart.fn(() => rx_types['RxStringExt|trimLeft']($this), T$.VoidToString());
  };
  rx_types['RxStringExt|get#trimRight'] = function RxStringExt$124get$35trimRight($this) {
    return dart.fn(() => rx_types['RxStringExt|trimRight']($this), T$.VoidToString());
  };
  rx_types['RxStringExt|trimRight'] = function RxStringExt$124trimRight($this) {
    return $this.value[S$0.$trimRight]();
  };
  rx_types['RxStringExt|padLeft'] = function RxStringExt$124padLeft($this, width, padding = " ") {
    return $this.value[S$0.$padLeft](width, padding);
  };
  rx_types['RxStringExt|get#padLeft'] = function RxStringExt$124get$35padLeft($this) {
    return dart.fn((width, padding = " ") => rx_types['RxStringExt|padLeft']($this, width, padding), T$.intAndStringToString());
  };
  rx_types['RxStringExt|padRight'] = function RxStringExt$124padRight($this, width, padding = " ") {
    return $this.value[S$0.$padRight](width, padding);
  };
  rx_types['RxStringExt|get#padRight'] = function RxStringExt$124get$35padRight($this) {
    return dart.fn((width, padding = " ") => rx_types['RxStringExt|padRight']($this, width, padding), T$.intAndStringToString());
  };
  rx_types['RxStringExt|contains'] = function RxStringExt$124contains($this, other, startIndex = 0) {
    return $this.value[S$.$contains](other, startIndex);
  };
  rx_types['RxStringExt|get#contains'] = function RxStringExt$124get$35contains($this) {
    return dart.fn((other, startIndex = 0) => rx_types['RxStringExt|contains']($this, other, startIndex), T$.PatternAndintTobool());
  };
  rx_types['RxStringExt|replaceAll'] = function RxStringExt$124replaceAll($this, from, replace) {
    return $this.value[S$.$replaceAll](from, replace);
  };
  rx_types['RxStringExt|get#replaceAll'] = function RxStringExt$124get$35replaceAll($this) {
    return dart.fn((from, replace) => rx_types['RxStringExt|replaceAll']($this, from, replace), T$.PatternAndStringToString());
  };
  rx_types['RxStringExt|split'] = function RxStringExt$124split($this, pattern) {
    return $this.value[S$0.$split](pattern);
  };
  rx_types['RxStringExt|get#split'] = function RxStringExt$124get$35split($this) {
    return dart.fn(pattern => rx_types['RxStringExt|split']($this, pattern), T$.PatternToListOfString());
  };
  rx_types['RxStringExt|get#codeUnits'] = function RxStringExt$124get$35codeUnits($this) {
    return $this.value[S$0.$codeUnits];
  };
  rx_types['RxStringExt|get#runes'] = function RxStringExt$124get$35runes($this) {
    return $this.value[S$0.$runes];
  };
  rx_types['RxStringExt|toLowerCase'] = function RxStringExt$124toLowerCase($this) {
    return $this.value[S$.$toLowerCase]();
  };
  rx_types['RxStringExt|get#toLowerCase'] = function RxStringExt$124get$35toLowerCase($this) {
    return dart.fn(() => rx_types['RxStringExt|toLowerCase']($this), T$.VoidToString());
  };
  rx_types['RxStringExt|toUpperCase'] = function RxStringExt$124toUpperCase($this) {
    return $this.value[S$0.$toUpperCase]();
  };
  rx_types['RxStringExt|get#toUpperCase'] = function RxStringExt$124get$35toUpperCase($this) {
    return dart.fn(() => rx_types['RxStringExt|toUpperCase']($this), T$.VoidToString());
  };
  rx_types['RxStringExt|allMatches'] = function RxStringExt$124allMatches($this, string, start = 0) {
    return $this.value[S$0.$allMatches](string, start);
  };
  rx_types['RxStringExt|get#allMatches'] = function RxStringExt$124get$35allMatches($this) {
    return dart.fn((string, start = 0) => rx_types['RxStringExt|allMatches']($this, string, start), T$.StringAndintToIterableOfMatch());
  };
  rx_types['RxStringExt|matchAsPrefix'] = function RxStringExt$124matchAsPrefix($this, string, start = 0) {
    return $this.value[S$0.$matchAsPrefix](string, start);
  };
  rx_types['RxStringExt|get#matchAsPrefix'] = function RxStringExt$124get$35matchAsPrefix($this) {
    return dart.fn((string, start = 0) => rx_types['RxStringExt|matchAsPrefix']($this, string, start), T$.StringAndintToMatchN());
  };
  rx_types['RxnStringExt|+'] = function RxnStringExt$124$43($this, val) {
    let t484;
    return dart.notNull((t484 = $this[S$0._value$4], t484 == null ? "" : t484)) + val;
  };
  rx_types['RxnStringExt|compareTo'] = function RxnStringExt$124compareTo($this, other) {
    let t485;
    t485 = $this.value;
    return t485 == null ? null : t485[S$.$compareTo](other);
  };
  rx_types['RxnStringExt|get#compareTo'] = function RxnStringExt$124get$35compareTo($this) {
    return dart.fn(other => rx_types['RxnStringExt|compareTo']($this, other), T$.StringTointN());
  };
  rx_types['RxnStringExt|endsWith'] = function RxnStringExt$124endsWith($this, other) {
    let t487;
    t487 = $this.value;
    return t487 == null ? null : t487[S$0.$endsWith](other);
  };
  rx_types['RxnStringExt|get#endsWith'] = function RxnStringExt$124get$35endsWith($this) {
    return dart.fn(other => rx_types['RxnStringExt|endsWith']($this, other), T$.StringToboolN());
  };
  rx_types['RxnStringExt|startsWith'] = function RxnStringExt$124startsWith($this, pattern, index = 0) {
    let t489;
    t489 = $this.value;
    return t489 == null ? null : t489[S$.$startsWith](pattern, index);
  };
  rx_types['RxnStringExt|get#startsWith'] = function RxnStringExt$124get$35startsWith($this) {
    return dart.fn((pattern, index = 0) => rx_types['RxnStringExt|startsWith']($this, pattern, index), T$.PatternAndintToboolN());
  };
  rx_types['RxnStringExt|indexOf'] = function RxnStringExt$124indexOf($this, pattern, start = 0) {
    let t491;
    t491 = $this.value;
    return t491 == null ? null : t491[S$.$indexOf](pattern, start);
  };
  rx_types['RxnStringExt|get#indexOf'] = function RxnStringExt$124get$35indexOf($this) {
    return dart.fn((pattern, start = 0) => rx_types['RxnStringExt|indexOf']($this, pattern, start), T$.PatternAndintTointN());
  };
  rx_types['RxnStringExt|lastIndexOf'] = function RxnStringExt$124lastIndexOf($this, pattern, start = null) {
    let t493;
    t493 = $this.value;
    return t493 == null ? null : t493[S$0.$lastIndexOf](pattern, start);
  };
  rx_types['RxnStringExt|get#lastIndexOf'] = function RxnStringExt$124get$35lastIndexOf($this) {
    return dart.fn((pattern, start = null) => rx_types['RxnStringExt|lastIndexOf']($this, pattern, start), T$.PatternAndintNTointN());
  };
  rx_types['RxnStringExt|get#isEmpty'] = function RxnStringExt$124get$35isEmpty($this) {
    let t495;
    t495 = $this.value;
    return t495 == null ? null : t495[S$.$isEmpty];
  };
  rx_types['RxnStringExt|get#isNotEmpty'] = function RxnStringExt$124get$35isNotEmpty($this) {
    let t496;
    t496 = $this.value;
    return t496 == null ? null : t496[S$.$isNotEmpty];
  };
  rx_types['RxnStringExt|substring'] = function RxnStringExt$124substring($this, startIndex, endIndex = null) {
    let t497;
    t497 = $this.value;
    return t497 == null ? null : t497[S$.$substring](startIndex, endIndex);
  };
  rx_types['RxnStringExt|get#substring'] = function RxnStringExt$124get$35substring($this) {
    return dart.fn((startIndex, endIndex = null) => rx_types['RxnStringExt|substring']($this, startIndex, endIndex), T$.intAndintNToStringN());
  };
  rx_types['RxnStringExt|trim'] = function RxnStringExt$124trim($this) {
    let t499;
    t499 = $this.value;
    return t499 == null ? null : t499[S$0.$trim]();
  };
  rx_types['RxnStringExt|get#trim'] = function RxnStringExt$124get$35trim($this) {
    return dart.fn(() => rx_types['RxnStringExt|trim']($this), T$.VoidToStringN());
  };
  rx_types['RxnStringExt|get#trimLeft'] = function RxnStringExt$124get$35trimLeft($this) {
    return dart.fn(() => rx_types['RxnStringExt|trimLeft']($this), T$.VoidToStringN());
  };
  rx_types['RxnStringExt|trimLeft'] = function RxnStringExt$124trimLeft($this) {
    let t502;
    t502 = $this.value;
    return t502 == null ? null : t502[S$0.$trimLeft]();
  };
  rx_types['RxnStringExt|trimRight'] = function RxnStringExt$124trimRight($this) {
    let t503;
    t503 = $this.value;
    return t503 == null ? null : t503[S$0.$trimRight]();
  };
  rx_types['RxnStringExt|get#trimRight'] = function RxnStringExt$124get$35trimRight($this) {
    return dart.fn(() => rx_types['RxnStringExt|trimRight']($this), T$.VoidToStringN());
  };
  rx_types['RxnStringExt|padLeft'] = function RxnStringExt$124padLeft($this, width, padding = " ") {
    let t505;
    t505 = $this.value;
    return t505 == null ? null : t505[S$0.$padLeft](width, padding);
  };
  rx_types['RxnStringExt|get#padLeft'] = function RxnStringExt$124get$35padLeft($this) {
    return dart.fn((width, padding = " ") => rx_types['RxnStringExt|padLeft']($this, width, padding), T$.intAndStringToStringN());
  };
  rx_types['RxnStringExt|padRight'] = function RxnStringExt$124padRight($this, width, padding = " ") {
    let t507;
    t507 = $this.value;
    return t507 == null ? null : t507[S$0.$padRight](width, padding);
  };
  rx_types['RxnStringExt|get#padRight'] = function RxnStringExt$124get$35padRight($this) {
    return dart.fn((width, padding = " ") => rx_types['RxnStringExt|padRight']($this, width, padding), T$.intAndStringToStringN());
  };
  rx_types['RxnStringExt|contains'] = function RxnStringExt$124contains($this, other, startIndex = 0) {
    let t509;
    t509 = $this.value;
    return t509 == null ? null : t509[S$.$contains](other, startIndex);
  };
  rx_types['RxnStringExt|get#contains'] = function RxnStringExt$124get$35contains($this) {
    return dart.fn((other, startIndex = 0) => rx_types['RxnStringExt|contains']($this, other, startIndex), T$.PatternAndintToboolN());
  };
  rx_types['RxnStringExt|replaceAll'] = function RxnStringExt$124replaceAll($this, from, replace) {
    let t511;
    t511 = $this.value;
    return t511 == null ? null : t511[S$.$replaceAll](from, replace);
  };
  rx_types['RxnStringExt|get#replaceAll'] = function RxnStringExt$124get$35replaceAll($this) {
    return dart.fn((from, replace) => rx_types['RxnStringExt|replaceAll']($this, from, replace), T$.PatternAndStringToStringN());
  };
  rx_types['RxnStringExt|split'] = function RxnStringExt$124split($this, pattern) {
    let t513;
    t513 = $this.value;
    return t513 == null ? null : t513[S$0.$split](pattern);
  };
  rx_types['RxnStringExt|get#split'] = function RxnStringExt$124get$35split($this) {
    return dart.fn(pattern => rx_types['RxnStringExt|split']($this, pattern), T$.PatternToListNOfString());
  };
  rx_types['RxnStringExt|get#codeUnits'] = function RxnStringExt$124get$35codeUnits($this) {
    let t515;
    t515 = $this.value;
    return t515 == null ? null : t515[S$0.$codeUnits];
  };
  rx_types['RxnStringExt|get#runes'] = function RxnStringExt$124get$35runes($this) {
    let t516;
    t516 = $this.value;
    return t516 == null ? null : t516[S$0.$runes];
  };
  rx_types['RxnStringExt|toLowerCase'] = function RxnStringExt$124toLowerCase($this) {
    let t517;
    t517 = $this.value;
    return t517 == null ? null : t517[S$.$toLowerCase]();
  };
  rx_types['RxnStringExt|get#toLowerCase'] = function RxnStringExt$124get$35toLowerCase($this) {
    return dart.fn(() => rx_types['RxnStringExt|toLowerCase']($this), T$.VoidToStringN());
  };
  rx_types['RxnStringExt|toUpperCase'] = function RxnStringExt$124toUpperCase($this) {
    let t519;
    t519 = $this.value;
    return t519 == null ? null : t519[S$0.$toUpperCase]();
  };
  rx_types['RxnStringExt|get#toUpperCase'] = function RxnStringExt$124get$35toUpperCase($this) {
    return dart.fn(() => rx_types['RxnStringExt|toUpperCase']($this), T$.VoidToStringN());
  };
  rx_types['RxnStringExt|allMatches'] = function RxnStringExt$124allMatches($this, string, start = 0) {
    let t521;
    t521 = $this.value;
    return t521 == null ? null : t521[S$0.$allMatches](string, start);
  };
  rx_types['RxnStringExt|get#allMatches'] = function RxnStringExt$124get$35allMatches($this) {
    return dart.fn((string, start = 0) => rx_types['RxnStringExt|allMatches']($this, string, start), T$.StringAndintToIterableNOfMatch());
  };
  rx_types['RxnStringExt|matchAsPrefix'] = function RxnStringExt$124matchAsPrefix($this, string, start = 0) {
    let t523;
    t523 = $this.value;
    return t523 == null ? null : t523[S$0.$matchAsPrefix](string, start);
  };
  rx_types['RxnStringExt|get#matchAsPrefix'] = function RxnStringExt$124get$35matchAsPrefix($this) {
    return dart.fn((string, start = 0) => rx_types['RxnStringExt|matchAsPrefix']($this, string, start), T$.StringAndintToMatchN());
  };
  rx_types['ListExtension|get#obs'] = function ListExtension$124get$35obs(E, $this) {
    return new (rx_types.RxList$(E)).new($this);
  };
  rx_types['ListExtension|addNonNull'] = function ListExtension$124addNonNull(E, $this, item) {
    if (item != null) $this[S$.$add](item);
  };
  rx_types['ListExtension|get#addNonNull'] = function ListExtension$124get$35addNonNull(E, $this) {
    return dart.fn(item => rx_types['ListExtension|addNonNull'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['ListExtension|addIf'] = function ListExtension$124addIf(E, $this, condition, item) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[S$.$add](item);
  };
  rx_types['ListExtension|get#addIf'] = function ListExtension$124get$35addIf(E, $this) {
    return dart.fn((condition, item) => rx_types['ListExtension|addIf'](E, $this, condition, item), dart.fnType(dart.void, [dart.dynamic, E]));
  };
  rx_types['ListExtension|addAllIf'] = function ListExtension$124addAllIf(E, $this, condition, items) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[S$.$addAll](items);
  };
  rx_types['ListExtension|get#addAllIf'] = function ListExtension$124get$35addAllIf(E, $this) {
    return dart.fn((condition, items) => rx_types['ListExtension|addAllIf'](E, $this, condition, items), dart.fnType(dart.void, [dart.dynamic, core.Iterable$(E)]));
  };
  rx_types['ListExtension|assign'] = function ListExtension$124assign(E, $this, item) {
    $this[S$.$clear]();
    $this[S$.$add](item);
  };
  rx_types['ListExtension|get#assign'] = function ListExtension$124get$35assign(E, $this) {
    return dart.fn(item => rx_types['ListExtension|assign'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['ListExtension|assignAll'] = function ListExtension$124assignAll(E, $this, items) {
    $this[S$.$clear]();
    $this[S$.$addAll](items);
  };
  rx_types['ListExtension|get#assignAll'] = function ListExtension$124get$35assignAll(E, $this) {
    return dart.fn(items => rx_types['ListExtension|assignAll'](E, $this, items), dart.fnType(dart.void, [core.Iterable$(E)]));
  };
  rx_types['MapExtension|get#obs'] = function MapExtension$124get$35obs(K, V, $this) {
    return new (rx_types.RxMap$(K, V)).new($this);
  };
  rx_types['MapExtension|addIf'] = function MapExtension$124addIf(K, V, $this, condition, key, value) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) {
      $this[S$.$_set](key, value);
    }
  };
  rx_types['MapExtension|get#addIf'] = function MapExtension$124get$35addIf(K, V, $this) {
    return dart.fn((condition, key, value) => rx_types['MapExtension|addIf'](K, V, $this, condition, key, value), dart.fnType(dart.void, [dart.dynamic, K, V]));
  };
  rx_types['MapExtension|addAllIf'] = function MapExtension$124addAllIf(K, V, $this, condition, values) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this[S$.$addAll](values);
  };
  rx_types['MapExtension|get#addAllIf'] = function MapExtension$124get$35addAllIf(K, V, $this) {
    return dart.fn((condition, values) => rx_types['MapExtension|addAllIf'](K, V, $this, condition, values), dart.fnType(dart.void, [dart.dynamic, core.Map$(K, V)]));
  };
  rx_types['MapExtension|assign'] = function MapExtension$124assign(K, V, $this, key, val) {
    if (rx_types.RxMap.is($this)) {
      let map = rx_types.RxMap.as($this);
      map[S$0._value$4][S$.$clear]();
      $this[S$.$_set](key, val);
    } else {
      $this[S$.$clear]();
      $this[S$.$_set](key, val);
    }
  };
  rx_types['MapExtension|get#assign'] = function MapExtension$124get$35assign(K, V, $this) {
    return dart.fn((key, val) => rx_types['MapExtension|assign'](K, V, $this, key, val), dart.fnType(dart.void, [K, V]));
  };
  rx_types['MapExtension|get#assignAll'] = function MapExtension$124get$35assignAll(K, V, $this) {
    return dart.fn(val => rx_types['MapExtension|assignAll'](K, V, $this, val), dart.fnType(dart.void, [core.Map$(K, V)]));
  };
  rx_types['MapExtension|assignAll'] = function MapExtension$124assignAll(K, V, $this, val) {
    if (rx_types.RxMap.is(val) && rx_types.RxMap.is($this)) {
      if (rx_types.RxMap.as(val)[S$0._value$4][S$.$_equals](rx_types.RxMap.as($this)[S$0._value$4])) return;
    }
    if (rx_types.RxMap.is($this)) {
      let map = rx_types.RxMap.as($this);
      if (map[S$0._value$4][S$.$_equals](val)) return;
      map[S$0._value$4] = val;
      map.refresh();
    } else {
      if ($this[S$.$_equals](val)) return;
      $this[S$.$clear]();
      $this[S$.$addAll](val);
    }
  };
  rx_types['SetExtension|get#obs'] = function SetExtension$124get$35obs(E, $this) {
    let t545;
    t545 = new (rx_types.RxSet$(E)).new(collection.LinkedHashSet$(E).new());
    return (() => {
      t545.addAll($this);
      return t545;
    })();
  };
  rx_types['SetExtension|addIf'] = function SetExtension$124addIf(E, $this, condition, item) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this.add(item);
  };
  rx_types['SetExtension|get#addIf'] = function SetExtension$124get$35addIf(E, $this) {
    return dart.fn((condition, item) => rx_types['SetExtension|addIf'](E, $this, condition, item), dart.fnType(dart.void, [dart.dynamic, E]));
  };
  rx_types['SetExtension|addAllIf'] = function SetExtension$124addAllIf(E, $this, condition, items) {
    if (T$.VoidTobool().is(condition)) condition = condition();
    if (typeof condition == 'boolean' && dart.test(condition)) $this.addAll(items);
  };
  rx_types['SetExtension|get#addAllIf'] = function SetExtension$124get$35addAllIf(E, $this) {
    return dart.fn((condition, items) => rx_types['SetExtension|addAllIf'](E, $this, condition, items), dart.fnType(dart.void, [dart.dynamic, core.Iterable$(E)]));
  };
  rx_types['SetExtension|assign'] = function SetExtension$124assign(E, $this, item) {
    $this.clear();
    $this.add(item);
  };
  rx_types['SetExtension|get#assign'] = function SetExtension$124get$35assign(E, $this) {
    return dart.fn(item => rx_types['SetExtension|assign'](E, $this, item), dart.fnType(dart.void, [E]));
  };
  rx_types['SetExtension|assignAll'] = function SetExtension$124assignAll(E, $this, items) {
    $this.clear();
    $this.addAll(items);
  };
  rx_types['SetExtension|get#assignAll'] = function SetExtension$124get$35assignAll(E, $this) {
    return dart.fn(items => rx_types['SetExtension|assignAll'](E, $this, items), dart.fnType(dart.void, [core.Iterable$(E)]));
  };
  rx_workers.Workers = class Workers extends core.Object {
    get workers() {
      return this[S$0.workers];
    }
    set workers(value) {
      super.workers = value;
    }
    static ['_#new#tearOff'](workers) {
      return new rx_workers.Workers.new(workers);
    }
    dispose() {
      for (let worker of this.workers) {
        if (!worker[S$0._disposed]) {
          worker.dispose();
        }
      }
    }
  };
  (rx_workers.Workers.new = function(workers) {
    this[S$0.workers] = workers;
    ;
  }).prototype = rx_workers.Workers.prototype;
  dart.addTypeTests(rx_workers.Workers);
  dart.addTypeCaches(rx_workers.Workers);
  dart.setMethodSignature(rx_workers.Workers, () => ({
    __proto__: dart.getMethods(rx_workers.Workers.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(rx_workers.Workers, I[48]);
  dart.setFieldSignature(rx_workers.Workers, () => ({
    __proto__: dart.getFields(rx_workers.Workers.__proto__),
    workers: dart.finalFieldType(core.List$(rx_workers.Worker))
  }));
  rx_workers.Worker = class Worker extends core.Object {
    get worker() {
      return this[S$0.worker];
    }
    set worker(value) {
      super.worker = value;
    }
    get type() {
      return this[S$0.type];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](worker, type) {
      return new rx_workers.Worker.new(worker, type);
    }
    get disposed() {
      return this[S$0._disposed];
    }
    [S$0._log](msg) {
      let t554, t553;
      t553 = get_main.Get;
      t554 = dart.str(this[S$.$runtimeType]) + " " + this.type + " " + msg;
      t553.log(t554);
    }
    dispose() {
      if (this[S$0._disposed]) {
        this[S$0._log]("already disposed");
        return;
      }
      this[S$0._disposed] = true;
      this.worker();
      this[S$0._log]("disposed");
    }
    call() {
      return this.dispose();
    }
  };
  (rx_workers.Worker.new = function(worker, type) {
    this[S$0._disposed] = false;
    this[S$0.worker] = worker;
    this[S$0.type] = type;
    ;
  }).prototype = rx_workers.Worker.prototype;
  dart.addTypeTests(rx_workers.Worker);
  dart.addTypeCaches(rx_workers.Worker);
  dart.setMethodSignature(rx_workers.Worker, () => ({
    __proto__: dart.getMethods(rx_workers.Worker.__proto__),
    [S$0._log]: dart.fnType(dart.void, [core.String]),
    dispose: dart.fnType(dart.void, []),
    call: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(rx_workers.Worker, () => ({
    __proto__: dart.getGetters(rx_workers.Worker.__proto__),
    disposed: core.bool
  }));
  dart.setLibraryUri(rx_workers.Worker, I[48]);
  dart.setFieldSignature(rx_workers.Worker, () => ({
    __proto__: dart.getFields(rx_workers.Worker.__proto__),
    worker: dart.finalFieldType(dart.fnType(async.Future$(dart.void), [])),
    type: dart.finalFieldType(core.String),
    [S$0._disposed]: dart.fieldType(core.bool)
  }));
  rx_workers._conditional = function _conditional(condition) {
    if (condition == null) return true;
    if (typeof condition == 'boolean') return condition;
    if (T$.VoidTobool().is(condition)) return condition();
    return true;
  };
  rx_workers.ever = function ever(T, listener, callback, opts) {
    let condition = opts && 'condition' in opts ? opts.condition : true;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let sub = listener.listen(dart.fn(event => {
      if (rx_workers._conditional(condition)) callback(event);
    }, dart.fnType(dart.void, [T])), {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    return new rx_workers.Worker.new(dart.bind(sub, 'cancel'), "[ever]");
  };
  rx_workers.everAll = function everAll(listeners, callback, opts) {
    let condition = opts && 'condition' in opts ? opts.condition : true;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let evers = T$.JSArrayOfStreamSubscription().of([]);
    for (let i of listeners) {
      let sub = i.listen(dart.fn(event => {
        if (rx_workers._conditional(condition)) callback(event);
      }, T$.dynamicTovoid()), {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      evers[S$.$add](sub);
    }
    function cancel() {
      for (let i of evers) {
        i.cancel();
      }
      return T$.FutureOfvoid().value(dart.fn(() => {
      }, T$.VoidToNull()));
    }
    dart.fn(cancel, T$.VoidToFutureOfvoid());
    return new rx_workers.Worker.new(cancel, "[everAll]");
  };
  rx_workers.once = function once(T, listener, callback, opts) {
    let condition = opts && 'condition' in opts ? opts.condition : true;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let ref = null;
    function ref$35get() {
      let t554;
      t554 = ref;
      return t554 == null ? dart.throw(new _internal.LateError.localNI("ref")) : t554;
    }
    function ref$35set(ref$35param) {
      return ref = ref$35param;
    }
    let sub = null;
    sub = listener.listen(dart.fn(event => {
      let t556;
      if (!rx_workers._conditional(condition)) return;
      ref$35get()[S$0._disposed] = true;
      ref$35get()[S$0._log]("called");
      t556 = sub;
      t556 == null ? null : t556.cancel();
      callback(event);
    }, dart.fnType(dart.void, [T])), {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    ref$35set(new rx_workers.Worker.new(dart.bind(sub, 'cancel'), "[once]"));
    return ref$35get();
  };
  rx_workers.interval = function interval(T, listener, callback, opts) {
    let time = opts && 'time' in opts ? opts.time : C[26] || CT.C26;
    let condition = opts && 'condition' in opts ? opts.condition : true;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let debounceActive = false;
    let sub = listener.listen(dart.fn(event => async.async(dart.void, function*() {
      if (debounceActive || !rx_workers._conditional(condition)) return;
      debounceActive = true;
      yield async.Future.delayed(time);
      debounceActive = false;
      callback(event);
    }), dart.fnType(T$.FutureOfvoid(), [T])), {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    return new rx_workers.Worker.new(dart.bind(sub, 'cancel'), "[interval]");
  };
  rx_workers.debounce = function debounce(T, listener, callback, opts) {
    let t556;
    let time = opts && 'time' in opts ? opts.time : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    let _debouncer = new debouncer.Debouncer.new({delay: (t556 = time, t556 == null ? C[109] || CT.C109 : t556)});
    let sub = listener.listen(dart.fn(event => {
      _debouncer.call(dart.fn(() => {
        callback(event);
      }, T$.VoidTovoid()));
    }, dart.fnType(dart.void, [T])), {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    return new rx_workers.Worker.new(dart.bind(sub, 'cancel'), "[debounce]");
  };
  const DisposableInterface_GetxServiceMixin$36 = class DisposableInterface_GetxServiceMixin extends rx_disposable.DisposableInterface {};
  (DisposableInterface_GetxServiceMixin$36.new = function() {
    DisposableInterface_GetxServiceMixin$36.__proto__.new.call(this);
  }).prototype = DisposableInterface_GetxServiceMixin$36.prototype;
  dart.applyMixin(DisposableInterface_GetxServiceMixin$36, lifecycle.GetxServiceMixin);
  rx_disposable.GetxService = class GetxService extends DisposableInterface_GetxServiceMixin$36 {};
  (rx_disposable.GetxService.new = function() {
    rx_disposable.GetxService.__proto__.new.call(this);
    ;
  }).prototype = rx_disposable.GetxService.prototype;
  dart.addTypeTests(rx_disposable.GetxService);
  dart.addTypeCaches(rx_disposable.GetxService);
  dart.setLibraryUri(rx_disposable.GetxService, I[28]);
  const _is_GetX_default = Symbol('_is_GetX_default');
  rx_getx_widget.GetX$ = dart.generic(T => {
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$TToWidget = () => (__t$TToWidget = dart.constFn(dart.fnType(framework.Widget, [T])))();
    var __t$ObjectFlagPropertyOfTToWidget = () => (__t$ObjectFlagPropertyOfTToWidget = dart.constFn(diagnostics.ObjectFlagProperty$(__t$TToWidget())))();
    var __t$GetXStateOfT = () => (__t$GetXStateOfT = dart.constFn(rx_getx_widget.GetXState$(T)))();
    class GetX extends framework.StatefulWidget {
      get builder() {
        return this[S$0.builder$5];
      }
      set builder(value) {
        super.builder = value;
      }
      get global() {
        return this[S$0.global];
      }
      set global(value) {
        super.global = value;
      }
      get autoRemove() {
        return this[S$0.autoRemove];
      }
      set autoRemove(value) {
        super.autoRemove = value;
      }
      get assignId() {
        return this[S$0.assignId];
      }
      set assignId(value) {
        super.assignId = value;
      }
      get initState() {
        return this[S$0.initState];
      }
      set initState(value) {
        super.initState = value;
      }
      get dispose() {
        return this[S$0.dispose];
      }
      set dispose(value) {
        super.dispose = value;
      }
      get didChangeDependencies() {
        return this[S$0.didChangeDependencies];
      }
      set didChangeDependencies(value) {
        super.didChangeDependencies = value;
      }
      get didUpdateWidget() {
        return this[S$0.didUpdateWidget];
      }
      set didUpdateWidget(value) {
        super.didUpdateWidget = value;
      }
      get init() {
        return this[S$0.init];
      }
      set init(value) {
        super.init = value;
      }
      get tag() {
        return this[S$0.tag];
      }
      set tag(value) {
        super.tag = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let tag = opts && 'tag' in opts ? opts.tag : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let global = opts && 'global' in opts ? opts.global : true;
        let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
        let initState = opts && 'initState' in opts ? opts.initState : null;
        let assignId = opts && 'assignId' in opts ? opts.assignId : false;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
        let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
        let init = opts && 'init' in opts ? opts.init : null;
        return new (rx_getx_widget.GetX$(T)).new({tag: tag, builder: builder, global: global, autoRemove: autoRemove, initState: initState, assignId: assignId, dispose: dispose, didChangeDependencies: didChangeDependencies, didUpdateWidget: didUpdateWidget, init: init});
      }
      debugFillProperties(properties) {
        let t556;
        super.debugFillProperties(properties);
        t556 = properties;
        (() => {
          t556.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.init));
          t556.add(new (T$.DiagnosticsPropertyOfString()).new("tag", this.tag));
          t556.add(new (__t$ObjectFlagPropertyOfTToWidget()).has("builder", this.builder));
          return t556;
        })();
      }
      createState() {
        return new (__t$GetXStateOfT()).new();
      }
    }
    (GetX.new = function(opts) {
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let global = opts && 'global' in opts ? opts.global : true;
      let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
      let initState = opts && 'initState' in opts ? opts.initState : null;
      let assignId = opts && 'assignId' in opts ? opts.assignId : false;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
      let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
      let init = opts && 'init' in opts ? opts.init : null;
      this[S$0.tag] = tag;
      this[S$0.builder$5] = builder;
      this[S$0.global] = global;
      this[S$0.autoRemove] = autoRemove;
      this[S$0.initState] = initState;
      this[S$0.assignId] = assignId;
      this[S$0.dispose] = dispose;
      this[S$0.didChangeDependencies] = didChangeDependencies;
      this[S$0.didUpdateWidget] = didUpdateWidget;
      this[S$0.init] = init;
      GetX.__proto__.new.call(this);
      ;
    }).prototype = GetX.prototype;
    dart.addTypeTests(GetX);
    GetX.prototype[_is_GetX_default] = true;
    dart.addTypeCaches(GetX);
    dart.setMethodSignature(GetX, () => ({
      __proto__: dart.getMethods(GetX.__proto__),
      createState: dart.fnType(rx_getx_widget.GetXState$(T), [])
    }));
    dart.setLibraryUri(GetX, I[49]);
    dart.setFieldSignature(GetX, () => ({
      __proto__: dart.getFields(GetX.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [T])),
      global: dart.finalFieldType(core.bool),
      autoRemove: dart.finalFieldType(core.bool),
      assignId: dart.finalFieldType(core.bool),
      initState: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [rx_getx_widget.GetXState$(T)]))),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [rx_getx_widget.GetXState$(T)]))),
      didChangeDependencies: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [rx_getx_widget.GetXState$(T)]))),
      didUpdateWidget: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [rx_getx_widget.GetX$(rx_disposable.DisposableInterface), rx_getx_widget.GetXState$(T)]))),
      init: dart.finalFieldType(dart.nullable(T)),
      tag: dart.finalFieldType(dart.nullable(core.String))
    }));
    return GetX;
  });
  rx_getx_widget.GetX = rx_getx_widget.GetX$();
  dart.addTypeTests(rx_getx_widget.GetX, _is_GetX_default);
  const _is_GetXState_default = Symbol('_is_GetXState_default');
  rx_getx_widget.GetXState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$GetXStateOfT = () => (__t$GetXStateOfT = dart.constFn(rx_getx_widget.GetXState$(T)))();
    var __t$GetXStateOfTTovoid = () => (__t$GetXStateOfTTovoid = dart.constFn(dart.fnType(dart.void, [__t$GetXStateOfT()])))();
    var __t$GetXStateOfTToNvoid = () => (__t$GetXStateOfTToNvoid = dart.constFn(dart.nullable(__t$GetXStateOfTTovoid())))();
    var __t$GetXOfT = () => (__t$GetXOfT = dart.constFn(rx_getx_widget.GetX$(T)))();
    var __t$GetXOfDisposableInterfaceAndGetXStateOfTTovoid = () => (__t$GetXOfDisposableInterfaceAndGetXStateOfTTovoid = dart.constFn(dart.fnType(dart.void, [T$.GetXOfDisposableInterface(), __t$GetXStateOfT()])))();
    var __t$GetXOfDisposableInterfaceAndGetXStateOfTToNvoid = () => (__t$GetXOfDisposableInterfaceAndGetXStateOfTToNvoid = dart.constFn(dart.nullable(__t$GetXOfDisposableInterfaceAndGetXStateOfTTovoid())))();
    var __t$DiagnosticsPropertyOfT = () => (__t$DiagnosticsPropertyOfT = dart.constFn(diagnostics.DiagnosticsProperty$(T)))();
    var __t$TToWidget = () => (__t$TToWidget = dart.constFn(dart.fnType(framework.Widget, [T])))();
    class GetXState extends framework.State$(rx_getx_widget.GetX$(T)) {
      get controller() {
        return this[S$0.controller];
      }
      set controller(value) {
        this[S$0.controller] = __t$TN().as(value);
      }
      get [S$0._subs]() {
        let t556;
        t556 = this[S$0.__GetXState__subs];
        return t556 == null ? dart.throw(new _internal.LateError.fieldNI("_subs")) : t556;
      }
      set [S$0._subs](_subs$35param) {
        this[S$0.__GetXState__subs] = _subs$35param;
      }
      initState() {
        let t556, t556$, t556$0;
        let isRegistered = get_instance$.GetInstance.new().isRegistered(T, {tag: this.widget.tag});
        if (this.widget.global) {
          if (isRegistered) {
            this[S$0._isCreator] = get_instance$.GetInstance.new().isPrepared(T, {tag: this.widget.tag});
            this.controller = get_instance$.GetInstance.new().find(T, {tag: this.widget.tag});
          } else {
            this.controller = this.widget.init;
            this[S$0._isCreator] = true;
            get_instance$.GetInstance.new().put(T, dart.nullCheck(this.controller), {tag: this.widget.tag});
          }
        } else {
          this.controller = this.widget.init;
          this[S$0._isCreator] = true;
          t556 = this.controller;
          t556 == null ? null : t556.onStart.call();
        }
        t556$ = __t$GetXStateOfTToNvoid().as(this.widget.initState);
        t556$ == null ? null : t556$(this);
        if (this.widget.global && get_main.Get.smartManagement === smart_management.SmartManagement.onlyBuilder) {
          t556$0 = this.controller;
          t556$0 == null ? null : t556$0.onStart.call();
        }
        this[S$0._subs] = this[S$0._observer].listen(dart.fn(data => this.setState(dart.fn(() => {
        }, T$.VoidTovoid())), T$.dynamicTovoid()), {cancelOnError: false});
        super.initState();
      }
      didChangeDependencies() {
        super.didChangeDependencies();
        if (__t$GetXStateOfTToNvoid().as(this.widget.didChangeDependencies) != null) {
          dart.nullCheck(__t$GetXStateOfTToNvoid().as(this.widget.didChangeDependencies))(this);
        }
      }
      didUpdateWidget(oldWidget) {
        let t556;
        T$.GetXOfDisposableInterface().as(oldWidget);
        super.didUpdateWidget(__t$GetXOfT().as(oldWidget));
        t556 = __t$GetXOfDisposableInterfaceAndGetXStateOfTToNvoid().as(this.widget.didUpdateWidget);
        t556 == null ? null : t556(oldWidget, this);
      }
      dispose() {
        if (__t$GetXStateOfTToNvoid().as(this.widget.dispose) != null) dart.nullCheck(__t$GetXStateOfTToNvoid().as(this.widget.dispose))(this);
        if (dart.nullCheck(this[S$0._isCreator]) || this.widget.assignId) {
          if (this.widget.autoRemove && get_instance$.GetInstance.new().isRegistered(T, {tag: this.widget.tag})) {
            get_instance$.GetInstance.new().delete(T, {tag: this.widget.tag});
          }
        }
        this[S$0._subs].cancel();
        this[S$0._observer].close();
        this.controller = null;
        this[S$0._isCreator] = null;
        super.dispose();
      }
      debugFillProperties(properties) {
        super.debugFillProperties(properties);
        properties.add(new (__t$DiagnosticsPropertyOfT()).new("controller", this.controller));
      }
      build(context) {
        return rx_types.RxInterface.notifyChildren(framework.Widget, this[S$0._observer], dart.fn(() => {
          let t557, t556;
          t556 = this.widget;
          t557 = dart.nullCheck(this.controller);
          return __t$TToWidget().as(t556.builder)(t557);
        }, T$.VoidToWidget()));
      }
      static ['_#new#tearOff'](T) {
        return new (rx_getx_widget.GetXState$(T)).new();
      }
    }
    (GetXState.new = function() {
      this[S$0._observer] = new rx_types.RxNotifier.new();
      this[S$0.controller] = null;
      this[S$0._isCreator] = false;
      this[S$0.__GetXState__subs] = null;
      GetXState.__proto__.new.call(this);
      ;
    }).prototype = GetXState.prototype;
    dart.addTypeTests(GetXState);
    GetXState.prototype[_is_GetXState_default] = true;
    dart.addTypeCaches(GetXState);
    dart.setMethodSignature(GetXState, () => ({
      __proto__: dart.getMethods(GetXState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setGetterSignature(GetXState, () => ({
      __proto__: dart.getGetters(GetXState.__proto__),
      [S$0._subs]: async.StreamSubscription
    }));
    dart.setSetterSignature(GetXState, () => ({
      __proto__: dart.getSetters(GetXState.__proto__),
      [S$0._subs]: async.StreamSubscription
    }));
    dart.setLibraryUri(GetXState, I[49]);
    dart.setFieldSignature(GetXState, () => ({
      __proto__: dart.getFields(GetXState.__proto__),
      [S$0._observer]: dart.finalFieldType(rx_types.RxNotifier),
      controller: dart.fieldType(dart.nullable(T)),
      [S$0._isCreator]: dart.fieldType(dart.nullable(core.bool)),
      [S$0.__GetXState__subs]: dart.fieldType(dart.nullable(async.StreamSubscription))
    }));
    return GetXState;
  });
  rx_getx_widget.GetXState = rx_getx_widget.GetXState$();
  dart.addTypeTests(rx_getx_widget.GetXState, _is_GetXState_default);
  const Listenable_ListenableMixin$36 = class Listenable_ListenableMixin extends change_notifier.Listenable {};
  (Listenable_ListenableMixin$36.new = function() {
    Listenable_ListenableMixin$36.__proto__.new.call(this);
  }).prototype = Listenable_ListenableMixin$36.prototype;
  dart.applyMixin(Listenable_ListenableMixin$36, list_notifier.ListenableMixin);
  const Listenable_ListNotifierMixin$36 = class Listenable_ListNotifierMixin extends Listenable_ListenableMixin$36 {};
  (Listenable_ListNotifierMixin$36.new = function() {
    list_notifier.ListNotifierMixin[dart.mixinNew].call(this);
    Listenable_ListNotifierMixin$36.__proto__.new.call(this);
  }).prototype = Listenable_ListNotifierMixin$36.prototype;
  dart.applyMixin(Listenable_ListNotifierMixin$36, list_notifier.ListNotifierMixin);
  list_notifier.ListNotifier = class ListNotifier extends Listenable_ListNotifierMixin$36 {
    static ['_#new#tearOff']() {
      return new list_notifier.ListNotifier.new();
    }
  };
  (list_notifier.ListNotifier.new = function() {
    list_notifier.ListNotifier.__proto__.new.call(this);
    ;
  }).prototype = list_notifier.ListNotifier.prototype;
  dart.addTypeTests(list_notifier.ListNotifier);
  dart.addTypeCaches(list_notifier.ListNotifier);
  dart.setLibraryUri(list_notifier.ListNotifier, I[21]);
  const _is_Value_default = Symbol('_is_Value_default');
  rx_notifier.Value$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    const ListNotifier_StateMixin$36 = class ListNotifier_StateMixin extends list_notifier.ListNotifier {};
    (ListNotifier_StateMixin$36.new = function() {
      rx_notifier.StateMixin$(T)[dart.mixinNew].call(this);
      ListNotifier_StateMixin$36.__proto__.new.call(this);
    }).prototype = ListNotifier_StateMixin$36.prototype;
    dart.applyMixin(ListNotifier_StateMixin$36, rx_notifier.StateMixin$(T));
    class Value extends ListNotifier_StateMixin$36 {
      static ['_#new#tearOff'](T, val) {
        return new (rx_notifier.Value$(T)).new(val);
      }
      get value() {
        this.notifyChildrens();
        return this[S$._value$2];
      }
      set value(newValue) {
        __t$TN().as(newValue);
        if (dart.equals(this[S$._value$2], newValue)) return;
        this[S$._value$2] = newValue;
        this.refresh();
      }
      call(v = null) {
        __t$TN().as(v);
        if (v != null) {
          this.value = v;
        }
        return this.value;
      }
      update(fn) {
        fn(this.value);
        this.refresh();
      }
      toString() {
        return dart.toString(this.value);
      }
      toJson() {
        let t556;
        t556 = this.value;
        return t556 == null ? null : dart.dsend(t556, 'toJson', []);
      }
    }
    (Value.new = function(val) {
      Value.__proto__.new.call(this);
      this[S$._value$2] = val;
      this[S$._fillEmptyStatus]();
    }).prototype = Value.prototype;
    dart.addTypeTests(Value);
    Value.prototype[_is_Value_default] = true;
    dart.addTypeCaches(Value);
    Value[dart.implements] = () => [change_notifier.ValueListenable$(dart.nullable(T))];
    dart.setMethodSignature(Value, () => ({
      __proto__: dart.getMethods(Value.__proto__),
      call: dart.fnType(dart.nullable(T), [], [dart.nullable(core.Object)]),
      update: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.nullable(T)])]),
      toJson: dart.fnType(dart.dynamic, [])
    }));
    dart.setLibraryUri(Value, I[30]);
    dart.defineExtensionMethods(Value, ['toString']);
    return Value;
  });
  rx_notifier.Value = rx_notifier.Value$();
  dart.addTypeTests(rx_notifier.Value, _is_Value_default);
  const _is_GetNotifier_default = Symbol('_is_GetNotifier_default');
  rx_notifier.GetNotifier$ = dart.generic(T => {
    const Value_GetLifeCycleBase$36 = class Value_GetLifeCycleBase extends rx_notifier.Value$(T) {};
    (Value_GetLifeCycleBase$36.new = function(val) {
      lifecycle.GetLifeCycleBase[dart.mixinNew].call(this);
      Value_GetLifeCycleBase$36.__proto__.new.call(this, val);
    }).prototype = Value_GetLifeCycleBase$36.prototype;
    dart.applyMixin(Value_GetLifeCycleBase$36, lifecycle.GetLifeCycleBase);
    class GetNotifier extends Value_GetLifeCycleBase$36 {
      onInit() {
        let t556;
        super.onInit();
        t556 = get_core.ambiguate(binding$.SchedulerBinding, binding$.SchedulerBinding.instance);
        t556 == null ? null : t556.addPostFrameCallback(dart.fn(_ => this.onReady(), T$.DurationTovoid()));
      }
    }
    (GetNotifier.new = function(initial) {
      GetNotifier.__proto__.new.call(this, initial);
      this.$configureLifeCycle();
    }).prototype = GetNotifier.prototype;
    dart.addTypeTests(GetNotifier);
    GetNotifier.prototype[_is_GetNotifier_default] = true;
    dart.addTypeCaches(GetNotifier);
    dart.setLibraryUri(GetNotifier, I[30]);
    return GetNotifier;
  });
  rx_notifier.GetNotifier = rx_notifier.GetNotifier$();
  dart.addTypeTests(rx_notifier.GetNotifier, _is_GetNotifier_default);
  rx_notifier.RxStatus = class RxStatus extends core.Object {
    get isLoading() {
      return this[S$0.isLoading];
    }
    set isLoading(value) {
      super.isLoading = value;
    }
    get isError() {
      return this[S$0.isError];
    }
    set isError(value) {
      super.isError = value;
    }
    get isSuccess() {
      return this[S$0.isSuccess];
    }
    set isSuccess(value) {
      super.isSuccess = value;
    }
    get isEmpty() {
      return this[S$0.isEmpty];
    }
    set isEmpty(value) {
      super.isEmpty = value;
    }
    get isLoadingMore() {
      return this[S$0.isLoadingMore];
    }
    set isLoadingMore(value) {
      super.isLoadingMore = value;
    }
    get errorMessage() {
      return this[S$0.errorMessage];
    }
    set errorMessage(value) {
      super.errorMessage = value;
    }
    static ['_#_#tearOff'](opts) {
      let isEmpty = opts && 'isEmpty' in opts ? opts.isEmpty : false;
      let isLoading = opts && 'isLoading' in opts ? opts.isLoading : false;
      let isError = opts && 'isError' in opts ? opts.isError : false;
      let isSuccess = opts && 'isSuccess' in opts ? opts.isSuccess : false;
      let errorMessage = opts && 'errorMessage' in opts ? opts.errorMessage : null;
      let isLoadingMore = opts && 'isLoadingMore' in opts ? opts.isLoadingMore : false;
      return new rx_notifier.RxStatus.__({isEmpty: isEmpty, isLoading: isLoading, isError: isError, isSuccess: isSuccess, errorMessage: errorMessage, isLoadingMore: isLoadingMore});
    }
    static loading() {
      return new rx_notifier.RxStatus.__({isLoading: true});
    }
    static ['_#loading#tearOff']() {
      return rx_notifier.RxStatus.loading();
    }
    static loadingMore() {
      return new rx_notifier.RxStatus.__({isSuccess: true, isLoadingMore: true});
    }
    static ['_#loadingMore#tearOff']() {
      return rx_notifier.RxStatus.loadingMore();
    }
    static success() {
      return new rx_notifier.RxStatus.__({isSuccess: true});
    }
    static ['_#success#tearOff']() {
      return rx_notifier.RxStatus.success();
    }
    static error(message = null) {
      return new rx_notifier.RxStatus.__({isError: true, errorMessage: message});
    }
    static ['_#error#tearOff'](message = null) {
      return rx_notifier.RxStatus.error(message);
    }
    static empty() {
      return new rx_notifier.RxStatus.__({isEmpty: true});
    }
    static ['_#empty#tearOff']() {
      return rx_notifier.RxStatus.empty();
    }
  };
  (rx_notifier.RxStatus.__ = function(opts) {
    let isEmpty = opts && 'isEmpty' in opts ? opts.isEmpty : false;
    let isLoading = opts && 'isLoading' in opts ? opts.isLoading : false;
    let isError = opts && 'isError' in opts ? opts.isError : false;
    let isSuccess = opts && 'isSuccess' in opts ? opts.isSuccess : false;
    let errorMessage = opts && 'errorMessage' in opts ? opts.errorMessage : null;
    let isLoadingMore = opts && 'isLoadingMore' in opts ? opts.isLoadingMore : false;
    this[S$0.isEmpty] = isEmpty;
    this[S$0.isLoading] = isLoading;
    this[S$0.isError] = isError;
    this[S$0.isSuccess] = isSuccess;
    this[S$0.errorMessage] = errorMessage;
    this[S$0.isLoadingMore] = isLoadingMore;
    ;
  }).prototype = rx_notifier.RxStatus.prototype;
  dart.addTypeTests(rx_notifier.RxStatus);
  dart.addTypeCaches(rx_notifier.RxStatus);
  dart.setStaticMethodSignature(rx_notifier.RxStatus, () => ['loading', 'loadingMore', 'success', 'error', 'empty']);
  dart.setLibraryUri(rx_notifier.RxStatus, I[30]);
  dart.setFieldSignature(rx_notifier.RxStatus, () => ({
    __proto__: dart.getFields(rx_notifier.RxStatus.__proto__),
    isLoading: dart.finalFieldType(core.bool),
    isError: dart.finalFieldType(core.bool),
    isSuccess: dart.finalFieldType(core.bool),
    isEmpty: dart.finalFieldType(core.bool),
    isLoadingMore: dart.finalFieldType(core.bool),
    errorMessage: dart.finalFieldType(dart.nullable(core.String))
  }));
  rx_notifier['ReactiveT|get#reactive'] = function ReactiveT$124get$35reactive(T, $this) {
    return new (rx_notifier.Value$(T)).new($this);
  };
  rx_notifier['StateExt|obx'] = function StateExt$124obx(T, $this, widget, opts) {
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onLoading = opts && 'onLoading' in opts ? opts.onLoading : null;
    let onEmpty = opts && 'onEmpty' in opts ? opts.onEmpty : null;
    return new simple_builder.SimpleBuilder.new({builder: dart.fn(_ => {
        let t558;
        if ($this.status.isLoading) {
          t558 = onLoading;
          return t558 == null ? C[110] || CT.C110 : t558;
        } else if ($this.status.isError) {
          return onError != null ? onError($this.status.errorMessage) : new basic.Center.new({child: new text.Text.new("A error occurred: " + dart.str($this.status.errorMessage))});
        } else if ($this.status.isEmpty) {
          return onEmpty != null ? onEmpty : new basic.SizedBox.shrink();
        }
        return widget($this.value);
      }, T$.BuildContextToWidget())});
  };
  rx_notifier['StateExt|get#obx'] = function StateExt$124get$35obx(T, $this) {
    return dart.fn((widget, opts) => {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onLoading = opts && 'onLoading' in opts ? opts.onLoading : null;
      let onEmpty = opts && 'onEmpty' in opts ? opts.onEmpty : null;
      return rx_notifier['StateExt|obx'](T, $this, widget, {onError: onError, onLoading: onLoading, onEmpty: onEmpty});
    }, dart.fnType(framework.Widget, [dart.fnType(framework.Widget, [dart.nullable(T)])], {onEmpty: T$.WidgetN(), onError: T$.StringNToNWidget(), onLoading: T$.WidgetN()}, {}));
  };
  rx_obx_widget.ObxWidget = class ObxWidget extends framework.StatefulWidget {
    debugFillProperties(properties) {
      let t559;
      super.debugFillProperties(properties);
      t559 = properties;
      (() => {
        t559.add(new (T$.ObjectFlagPropertyOfFunction()).has("builder", dart.bind(this, 'build')));
        return t559;
      })();
    }
    createState() {
      return new rx_obx_widget._ObxState.new();
    }
  };
  (rx_obx_widget.ObxWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    rx_obx_widget.ObxWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = rx_obx_widget.ObxWidget.prototype;
  dart.addTypeTests(rx_obx_widget.ObxWidget);
  dart.addTypeCaches(rx_obx_widget.ObxWidget);
  dart.setMethodSignature(rx_obx_widget.ObxWidget, () => ({
    __proto__: dart.getMethods(rx_obx_widget.ObxWidget.__proto__),
    createState: dart.fnType(rx_obx_widget._ObxState, [])
  }));
  dart.setLibraryUri(rx_obx_widget.ObxWidget, I[50]);
  rx_obx_widget._ObxState = class _ObxState extends framework.State$(rx_obx_widget.ObxWidget) {
    get subs() {
      let t559;
      t559 = this[S$0.___ObxState_subs];
      return t559 == null ? dart.throw(new _internal.LateError.fieldNI("subs")) : t559;
    }
    set subs(subs$35param) {
      this[S$0.___ObxState_subs] = subs$35param;
    }
    initState() {
      super.initState();
      this.subs = this[S$0._observer$1].listen(dart.bind(this, S$0._updateTree), {cancelOnError: false});
    }
    [S$0._updateTree](_) {
      if (this.mounted) {
        this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    }
    dispose() {
      this.subs.cancel();
      this[S$0._observer$1].close();
      super.dispose();
    }
    build(context) {
      return rx_types.RxInterface.notifyChildren(framework.Widget, this[S$0._observer$1], dart.bind(this.widget, 'build'));
    }
    static ['_#new#tearOff']() {
      return new rx_obx_widget._ObxState.new();
    }
  };
  (rx_obx_widget._ObxState.new = function() {
    this[S$0._observer$1] = new rx_types.RxNotifier.new();
    this[S$0.___ObxState_subs] = null;
    rx_obx_widget._ObxState.__proto__.new.call(this);
    ;
  }).prototype = rx_obx_widget._ObxState.prototype;
  dart.addTypeTests(rx_obx_widget._ObxState);
  dart.addTypeCaches(rx_obx_widget._ObxState);
  dart.setMethodSignature(rx_obx_widget._ObxState, () => ({
    __proto__: dart.getMethods(rx_obx_widget._ObxState.__proto__),
    [S$0._updateTree]: dart.fnType(dart.void, [dart.dynamic]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(rx_obx_widget._ObxState, () => ({
    __proto__: dart.getGetters(rx_obx_widget._ObxState.__proto__),
    subs: async.StreamSubscription
  }));
  dart.setSetterSignature(rx_obx_widget._ObxState, () => ({
    __proto__: dart.getSetters(rx_obx_widget._ObxState.__proto__),
    subs: async.StreamSubscription
  }));
  dart.setLibraryUri(rx_obx_widget._ObxState, I[50]);
  dart.setFieldSignature(rx_obx_widget._ObxState, () => ({
    __proto__: dart.getFields(rx_obx_widget._ObxState.__proto__),
    [S$0._observer$1]: dart.finalFieldType(rx_types.RxNotifier),
    [S$0.___ObxState_subs]: dart.fieldType(dart.nullable(async.StreamSubscription))
  }));
  rx_obx_widget.Obx = class Obx extends rx_obx_widget.ObxWidget {
    get builder() {
      return this[S$0.builder$6];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](builder) {
      return new rx_obx_widget.Obx.new(builder);
    }
    build() {
      return this.builder();
    }
  };
  (rx_obx_widget.Obx.new = function(builder) {
    this[S$0.builder$6] = builder;
    rx_obx_widget.Obx.__proto__.new.call(this);
    ;
  }).prototype = rx_obx_widget.Obx.prototype;
  dart.addTypeTests(rx_obx_widget.Obx);
  dart.addTypeCaches(rx_obx_widget.Obx);
  dart.setMethodSignature(rx_obx_widget.Obx, () => ({
    __proto__: dart.getMethods(rx_obx_widget.Obx.__proto__),
    build: dart.fnType(framework.Widget, [])
  }));
  dart.setLibraryUri(rx_obx_widget.Obx, I[50]);
  dart.setFieldSignature(rx_obx_widget.Obx, () => ({
    __proto__: dart.getFields(rx_obx_widget.Obx.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, []))
  }));
  const _is_ObxValue_default = Symbol('_is_ObxValue_default');
  rx_obx_widget.ObxValue$ = dart.generic(T => {
    class ObxValue extends rx_obx_widget.ObxWidget {
      get builder() {
        return this[S$0.builder$7];
      }
      set builder(value) {
        super.builder = value;
      }
      get data() {
        return this[S$0.data$2];
      }
      set data(value) {
        super.data = value;
      }
      static ['_#new#tearOff'](T, builder, data, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        return new (rx_obx_widget.ObxValue$(T)).new(builder, data, {key: key});
      }
      build() {
        let t559;
        t559 = this.data;
        return this.builder(t559);
      }
    }
    (ObxValue.new = function(builder, data, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0.builder$7] = builder;
      this[S$0.data$2] = data;
      ObxValue.__proto__.new.call(this, {key: key});
      ;
    }).prototype = ObxValue.prototype;
    dart.addTypeTests(ObxValue);
    ObxValue.prototype[_is_ObxValue_default] = true;
    dart.addTypeCaches(ObxValue);
    dart.setMethodSignature(ObxValue, () => ({
      __proto__: dart.getMethods(ObxValue.__proto__),
      build: dart.fnType(framework.Widget, [])
    }));
    dart.setLibraryUri(ObxValue, I[50]);
    dart.setFieldSignature(ObxValue, () => ({
      __proto__: dart.getFields(ObxValue.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [T])),
      data: dart.finalFieldType(T)
    }));
    return ObxValue;
  });
  rx_obx_widget.ObxValue = rx_obx_widget.ObxValue$();
  dart.addTypeTests(rx_obx_widget.ObxValue, _is_ObxValue_default);
  rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin = class GetSingleTickerProviderStateMixin extends get_controllers.GetxController {};
  rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin[dart.mixinOn] = GetxController => class GetSingleTickerProviderStateMixin extends GetxController {
    createTicker(onTick) {
      if (!dart.fn(() => {
        if (this[S$0._ticker] == null) return true;
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this[S$.$runtimeType]) + " is a GetSingleTickerProviderStateMixin but multiple tickers were created."), new assertions.ErrorDescription.new("A GetSingleTickerProviderStateMixin can only be used as a TickerProvider once."), new assertions.ErrorHint.new("If a State is used for multiple AnimationController objects, or if it is passed to other " + "objects and those objects might use it more than one time in total, then instead of " + "mixing in a GetSingleTickerProviderStateMixin, use a regular GetTickerProviderStateMixin.")])));
      }, T$.VoidTobool())()) dart.assertFailed(null, I[51], 35, 12, "() {\n      if (_ticker == null) return true;\n      throw FlutterError.fromParts(<DiagnosticsNode>[\n        ErrorSummary(\n            '$runtimeType is a GetSingleTickerProviderStateMixin but multiple tickers were created.'),\n        ErrorDescription(\n            'A GetSingleTickerProviderStateMixin can only be used as a TickerProvider once.'),\n        ErrorHint(\n          'If a State is used for multiple AnimationController objects, or if it is passed to other '\n          'objects and those objects might use it more than one time in total, then instead of '\n          'mixing in a GetSingleTickerProviderStateMixin, use a regular GetTickerProviderStateMixin.',\n        ),\n      ]);\n    }()");
      this[S$0._ticker] = new ticker.Ticker.new(onTick, {debugLabel: "created by " + dart.str(this)});
      return dart.nullCheck(this[S$0._ticker]);
    }
    didChangeDependencies(context) {
      if (this[S$0._ticker] != null) dart.nullCheck(this[S$0._ticker]).muted = !ticker_provider.TickerMode.of(context);
    }
    onClose() {
      if (!dart.fn(() => {
        if (this[S$0._ticker] == null || !dart.nullCheck(this[S$0._ticker]).isActive) return true;
        dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this) + " was disposed with an active Ticker."), new assertions.ErrorDescription.new(dart.str(this[S$.$runtimeType]) + " created a Ticker via its GetSingleTickerProviderStateMixin, but at the time " + "dispose() was called on the mixin, that Ticker was still active. The Ticker must " + "be disposed before calling super.dispose()."), new assertions.ErrorHint.new("Tickers used by AnimationControllers " + "should be disposed by calling dispose() on the AnimationController itself. " + "Otherwise, the ticker will leak."), dart.nullCheck(this[S$0._ticker]).describeForError("The offending ticker was")])));
      }, T$.VoidTobool())()) dart.assertFailed(null, I[51], 64, 12, "() {\n      if (_ticker == null || !_ticker!.isActive) return true;\n      throw FlutterError.fromParts(<DiagnosticsNode>[\n        ErrorSummary('$this was disposed with an active Ticker.'),\n        ErrorDescription(\n          '$runtimeType created a Ticker via its GetSingleTickerProviderStateMixin, but at the time '\n          'dispose() was called on the mixin, that Ticker was still active. The Ticker must '\n          'be disposed before calling super.dispose().',\n        ),\n        ErrorHint(\n          'Tickers used by AnimationControllers '\n          'should be disposed by calling dispose() on the AnimationController itself. '\n          'Otherwise, the ticker will leak.',\n        ),\n        _ticker!.describeForError('The offending ticker was'),\n      ]);\n    }()");
      super.onClose();
    }
  };
  (rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin[dart.mixinNew] = function() {
    this[S$0._ticker] = null;
  }).prototype = rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin.prototype;
  dart.addTypeTests(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin);
  dart.addTypeCaches(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin);
  rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin[dart.implements] = () => [ticker.TickerProvider, get_controllers.GetxController];
  dart.setMethodSignature(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin, () => ({
    __proto__: dart.getMethods(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin.__proto__),
    createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])]),
    didChangeDependencies: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setLibraryUri(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin, I[52]);
  dart.setFieldSignature(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin, () => ({
    __proto__: dart.getFields(rx_ticket_provider_mixin.GetSingleTickerProviderStateMixin.__proto__),
    [S$0._ticker]: dart.fieldType(dart.nullable(ticker.Ticker))
  }));
  rx_ticket_provider_mixin.GetTickerProviderStateMixin = class GetTickerProviderStateMixin extends get_controllers.GetxController {};
  rx_ticket_provider_mixin.GetTickerProviderStateMixin[dart.mixinOn] = GetxController => class GetTickerProviderStateMixin extends GetxController {
    createTicker(onTick) {
      this[S$0._tickers] == null ? this[S$0._tickers] = T$.LinkedHashSetOf_WidgetTicker().new() : null;
      let result = new rx_ticket_provider_mixin._WidgetTicker.new(onTick, this, {debugLabel: "created by " + diagnostics.describeIdentity(this)});
      dart.nullCheck(this[S$0._tickers]).add(result);
      return result;
    }
    [S$0._removeTicker](ticker) {
      if (!(this[S$0._tickers] != null)) dart.assertFailed(null, I[51], 123, 12, "_tickers != null");
      if (!dart.nullCheck(this[S$0._tickers]).contains(ticker)) dart.assertFailed(null, I[51], 124, 12, "_tickers!.contains(ticker)");
      dart.nullCheck(this[S$0._tickers]).remove(ticker);
    }
    didChangeDependencies(context) {
      let muted = !ticker_provider.TickerMode.of(context);
      if (this[S$0._tickers] != null) {
        for (let ticker of dart.nullCheck(this[S$0._tickers])) {
          ticker.muted = muted;
        }
      }
    }
    onClose() {
      if (!dart.fn(() => {
        if (this[S$0._tickers] != null) {
          for (let ticker of dart.nullCheck(this[S$0._tickers])) {
            if (ticker.isActive) {
              dart.throw(new assertions.FlutterError.fromParts(T$.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new(dart.str(this) + " was disposed with an active Ticker."), new assertions.ErrorDescription.new(dart.str(this[S$.$runtimeType]) + " created a Ticker via its GetTickerProviderStateMixin, but at the time " + "dispose() was called on the mixin, that Ticker was still active. All Tickers must " + "be disposed before calling super.dispose()."), new assertions.ErrorHint.new("Tickers used by AnimationControllers " + "should be disposed by calling dispose() on the AnimationController itself. " + "Otherwise, the ticker will leak."), ticker.describeForError("The offending ticker was")])));
            }
          }
        }
        return true;
      }, T$.VoidTobool())()) dart.assertFailed(null, I[51], 139, 12, "() {\n      if (_tickers != null) {\n        for (final ticker in _tickers!) {\n          if (ticker.isActive) {\n            throw FlutterError.fromParts(<DiagnosticsNode>[\n              ErrorSummary('$this was disposed with an active Ticker.'),\n              ErrorDescription(\n                '$runtimeType created a Ticker via its GetTickerProviderStateMixin, but at the time '\n                'dispose() was called on the mixin, that Ticker was still active. All Tickers must '\n                'be disposed before calling super.dispose().',\n              ),\n              ErrorHint(\n                'Tickers used by AnimationControllers '\n                'should be disposed by calling dispose() on the AnimationController itself. '\n                'Otherwise, the ticker will leak.',\n              ),\n              ticker.describeForError('The offending ticker was'),\n            ]);\n          }\n        }\n      }\n      return true;\n    }()");
      super.onClose();
    }
  };
  (rx_ticket_provider_mixin.GetTickerProviderStateMixin[dart.mixinNew] = function() {
    this[S$0._tickers] = null;
  }).prototype = rx_ticket_provider_mixin.GetTickerProviderStateMixin.prototype;
  dart.addTypeTests(rx_ticket_provider_mixin.GetTickerProviderStateMixin);
  dart.addTypeCaches(rx_ticket_provider_mixin.GetTickerProviderStateMixin);
  rx_ticket_provider_mixin.GetTickerProviderStateMixin[dart.implements] = () => [ticker.TickerProvider, get_controllers.GetxController];
  dart.setMethodSignature(rx_ticket_provider_mixin.GetTickerProviderStateMixin, () => ({
    __proto__: dart.getMethods(rx_ticket_provider_mixin.GetTickerProviderStateMixin.__proto__),
    createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])]),
    [S$0._removeTicker]: dart.fnType(dart.void, [rx_ticket_provider_mixin._WidgetTicker]),
    didChangeDependencies: dart.fnType(dart.void, [framework.BuildContext])
  }));
  dart.setLibraryUri(rx_ticket_provider_mixin.GetTickerProviderStateMixin, I[52]);
  dart.setFieldSignature(rx_ticket_provider_mixin.GetTickerProviderStateMixin, () => ({
    __proto__: dart.getFields(rx_ticket_provider_mixin.GetTickerProviderStateMixin.__proto__),
    [S$0._tickers]: dart.fieldType(dart.nullable(core.Set$(ticker.Ticker)))
  }));
  rx_ticket_provider_mixin._WidgetTicker = class _WidgetTicker extends ticker.Ticker {
    static ['_#new#tearOff'](onTick, _creator, opts) {
      let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
      return new rx_ticket_provider_mixin._WidgetTicker.new(onTick, _creator, {debugLabel: debugLabel});
    }
    dispose() {
      this[S$0._creator][S$0._removeTicker](this);
      super.dispose();
    }
  };
  (rx_ticket_provider_mixin._WidgetTicker.new = function(onTick, _creator, opts) {
    let debugLabel = opts && 'debugLabel' in opts ? opts.debugLabel : null;
    this[S$0._creator] = _creator;
    rx_ticket_provider_mixin._WidgetTicker.__proto__.new.call(this, onTick, {debugLabel: debugLabel});
    ;
  }).prototype = rx_ticket_provider_mixin._WidgetTicker.prototype;
  dart.addTypeTests(rx_ticket_provider_mixin._WidgetTicker);
  dart.addTypeCaches(rx_ticket_provider_mixin._WidgetTicker);
  dart.setLibraryUri(rx_ticket_provider_mixin._WidgetTicker, I[52]);
  dart.setFieldSignature(rx_ticket_provider_mixin._WidgetTicker, () => ({
    __proto__: dart.getFields(rx_ticket_provider_mixin._WidgetTicker.__proto__),
    [S$0._creator]: dart.finalFieldType(rx_ticket_provider_mixin.GetTickerProviderStateMixin)
  }));
  rx_ticket_provider_mixin.SingleGetTickerProviderMixin = class SingleGetTickerProviderMixin extends rx_disposable.DisposableInterface {};
  rx_ticket_provider_mixin.SingleGetTickerProviderMixin[dart.mixinOn] = DisposableInterface => class SingleGetTickerProviderMixin extends DisposableInterface {
    createTicker(onTick) {
      return new ticker.Ticker.new(onTick);
    }
  };
  dart.addTypeTests(rx_ticket_provider_mixin.SingleGetTickerProviderMixin);
  dart.addTypeCaches(rx_ticket_provider_mixin.SingleGetTickerProviderMixin);
  rx_ticket_provider_mixin.SingleGetTickerProviderMixin[dart.implements] = () => [ticker.TickerProvider, rx_disposable.DisposableInterface];
  dart.setMethodSignature(rx_ticket_provider_mixin.SingleGetTickerProviderMixin, () => ({
    __proto__: dart.getMethods(rx_ticket_provider_mixin.SingleGetTickerProviderMixin.__proto__),
    createTicker: dart.fnType(ticker.Ticker, [dart.fnType(dart.void, [core.Duration])])
  }));
  dart.setLibraryUri(rx_ticket_provider_mixin.SingleGetTickerProviderMixin, I[52]);
  get_controllers.ScrollMixin = class ScrollMixin extends lifecycle.GetLifeCycleBase {};
  get_controllers.ScrollMixin[dart.mixinOn] = GetLifeCycleBase => class ScrollMixin extends GetLifeCycleBase {
    get scroll() {
      return this[S$0.scroll];
    }
    set scroll(value) {
      super.scroll = value;
    }
    onInit() {
      super.onInit();
      this.scroll.addListener(dart.bind(this, S$0._listener));
    }
    [S$0._listener]() {
      if (this.scroll.position.atEdge) {
        this[S$0._checkIfCanLoadMore]();
      }
    }
    [S$0._checkIfCanLoadMore]() {
      return async.async(dart.void, (function* _checkIfCanLoadMore() {
        if (this.scroll.position.pixels === 0) {
          if (!this[S$0._canFetchTop]) return;
          this[S$0._canFetchTop] = false;
          yield this.onTopScroll();
          this[S$0._canFetchTop] = true;
        } else {
          if (!this[S$0._canFetchBottom]) return;
          this[S$0._canFetchBottom] = false;
          yield this.onEndScroll();
          this[S$0._canFetchBottom] = true;
        }
      }).bind(this));
    }
    onClose() {
      this.scroll.removeListener(dart.bind(this, S$0._listener));
      super.onClose();
    }
  };
  (get_controllers.ScrollMixin[dart.mixinNew] = function() {
    this[S$0.scroll] = new scroll_controller.ScrollController.new();
    this[S$0._canFetchBottom] = true;
    this[S$0._canFetchTop] = true;
  }).prototype = get_controllers.ScrollMixin.prototype;
  dart.addTypeTests(get_controllers.ScrollMixin);
  dart.addTypeCaches(get_controllers.ScrollMixin);
  get_controllers.ScrollMixin[dart.implements] = () => [lifecycle.GetLifeCycleBase];
  dart.setMethodSignature(get_controllers.ScrollMixin, () => ({
    __proto__: dart.getMethods(get_controllers.ScrollMixin.__proto__),
    [S$0._listener]: dart.fnType(dart.void, []),
    [S$0._checkIfCanLoadMore]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setLibraryUri(get_controllers.ScrollMixin, I[29]);
  dart.setFieldSignature(get_controllers.ScrollMixin, () => ({
    __proto__: dart.getFields(get_controllers.ScrollMixin.__proto__),
    scroll: dart.finalFieldType(scroll_controller.ScrollController),
    [S$0._canFetchBottom]: dart.fieldType(core.bool),
    [S$0._canFetchTop]: dart.fieldType(core.bool)
  }));
  get_controllers.RxController = class RxController extends rx_disposable.DisposableInterface {};
  (get_controllers.RxController.new = function() {
    get_controllers.RxController.__proto__.new.call(this);
    ;
  }).prototype = get_controllers.RxController.prototype;
  dart.addTypeTests(get_controllers.RxController);
  dart.addTypeCaches(get_controllers.RxController);
  dart.setLibraryUri(get_controllers.RxController, I[29]);
  get_responsive.GetResponsiveMixin = class GetResponsiveMixin extends framework.Widget {};
  get_responsive.GetResponsiveMixin[dart.mixinOn] = Widget => class GetResponsiveMixin extends Widget {
    build(context) {
      let t559, t559$, t559$0, t559$1, t559$2, t559$3, t559$4, t559$5;
      this.screen.context = context;
      let widget = null;
      if (this.alwaysUseBuilder) {
        widget = this.builder();
        if (widget != null) return widget;
      }
      if (this.screen.isDesktop) {
        widget = (t559 = this.desktop(), t559 == null ? widget : t559);
        if (widget != null) return widget;
      }
      if (this.screen.isTablet) {
        widget = (t559$ = this.tablet(), t559$ == null ? this.desktop() : t559$);
        if (widget != null) return widget;
      }
      if (this.screen.isPhone) {
        widget = (t559$1 = (t559$0 = this.phone(), t559$0 == null ? this.tablet() : t559$0), t559$1 == null ? this.desktop() : t559$1);
        if (widget != null) return widget;
      }
      t559$5 = (t559$4 = (t559$3 = (t559$2 = this.watch(), t559$2 == null ? this.phone() : t559$2), t559$3 == null ? this.tablet() : t559$3), t559$4 == null ? this.desktop() : t559$4);
      return t559$5 == null ? dart.nullCheck(this.builder()) : t559$5;
    }
    builder() {
      return null;
    }
    desktop() {
      return null;
    }
    phone() {
      return null;
    }
    tablet() {
      return null;
    }
    watch() {
      return null;
    }
  };
  dart.addTypeTests(get_responsive.GetResponsiveMixin);
  dart.addTypeCaches(get_responsive.GetResponsiveMixin);
  get_responsive.GetResponsiveMixin[dart.implements] = () => [framework.Widget];
  dart.setMethodSignature(get_responsive.GetResponsiveMixin, () => ({
    __proto__: dart.getMethods(get_responsive.GetResponsiveMixin.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext]),
    builder: dart.fnType(dart.nullable(framework.Widget), []),
    desktop: dart.fnType(dart.nullable(framework.Widget), []),
    phone: dart.fnType(dart.nullable(framework.Widget), []),
    tablet: dart.fnType(dart.nullable(framework.Widget), []),
    watch: dart.fnType(dart.nullable(framework.Widget), [])
  }));
  dart.setLibraryUri(get_responsive.GetResponsiveMixin, I[53]);
  const _is_GetView_default = Symbol('_is_GetView_default');
  get_view.GetView$ = dart.generic(T => {
    class GetView extends framework.StatelessWidget {
      get tag() {
        return this[S$0.tag$1];
      }
      set tag(value) {
        super.tag = value;
      }
      get controller() {
        return dart.nullCheck(get_instance$.GetInstance.new().find(T, {tag: this.tag}));
      }
    }
    (GetView.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0.tag$1] = null;
      GetView.__proto__.new.call(this, {key: key});
      ;
    }).prototype = GetView.prototype;
    dart.addTypeTests(GetView);
    GetView.prototype[_is_GetView_default] = true;
    dart.addTypeCaches(GetView);
    dart.setGetterSignature(GetView, () => ({
      __proto__: dart.getGetters(GetView.__proto__),
      controller: T
    }));
    dart.setLibraryUri(GetView, I[54]);
    dart.setFieldSignature(GetView, () => ({
      __proto__: dart.getFields(GetView.__proto__),
      tag: dart.finalFieldType(dart.nullable(core.String))
    }));
    return GetView;
  });
  get_view.GetView = get_view.GetView$();
  dart.addTypeTests(get_view.GetView, _is_GetView_default);
  const _is_GetResponsiveView_default = Symbol('_is_GetResponsiveView_default');
  get_responsive.GetResponsiveView$ = dart.generic(T => {
    const GetView_GetResponsiveMixin$36 = class GetView_GetResponsiveMixin extends get_view.GetView$(T) {};
    (GetView_GetResponsiveMixin$36.new = function(opts) {
      GetView_GetResponsiveMixin$36.__proto__.new.call(this, opts);
    }).prototype = GetView_GetResponsiveMixin$36.prototype;
    dart.applyMixin(GetView_GetResponsiveMixin$36, get_responsive.GetResponsiveMixin);
    class GetResponsiveView extends GetView_GetResponsiveMixin$36 {
      get alwaysUseBuilder() {
        return this[S$0.alwaysUseBuilder];
      }
      set alwaysUseBuilder(value) {
        super.alwaysUseBuilder = value;
      }
      get screen() {
        return this[S$0.screen];
      }
      set screen(value) {
        super.screen = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let alwaysUseBuilder = opts && 'alwaysUseBuilder' in opts ? opts.alwaysUseBuilder : false;
        let settings = opts && 'settings' in opts ? opts.settings : C[113] || CT.C113;
        let key = opts && 'key' in opts ? opts.key : null;
        return new (get_responsive.GetResponsiveView$(T)).new({alwaysUseBuilder: alwaysUseBuilder, settings: settings, key: key});
      }
    }
    (GetResponsiveView.new = function(opts) {
      let alwaysUseBuilder = opts && 'alwaysUseBuilder' in opts ? opts.alwaysUseBuilder : false;
      let settings = opts && 'settings' in opts ? opts.settings : C[113] || CT.C113;
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0.alwaysUseBuilder] = alwaysUseBuilder;
      this[S$0.screen] = new get_responsive.ResponsiveScreen.new(settings);
      GetResponsiveView.__proto__.new.call(this, {key: key});
      ;
    }).prototype = GetResponsiveView.prototype;
    dart.addTypeTests(GetResponsiveView);
    GetResponsiveView.prototype[_is_GetResponsiveView_default] = true;
    dart.addTypeCaches(GetResponsiveView);
    dart.setLibraryUri(GetResponsiveView, I[53]);
    dart.setFieldSignature(GetResponsiveView, () => ({
      __proto__: dart.getFields(GetResponsiveView.__proto__),
      alwaysUseBuilder: dart.finalFieldType(core.bool),
      screen: dart.finalFieldType(get_responsive.ResponsiveScreen)
    }));
    return GetResponsiveView;
  });
  get_responsive.GetResponsiveView = get_responsive.GetResponsiveView$();
  dart.addTypeTests(get_responsive.GetResponsiveView, _is_GetResponsiveView_default);
  get_widget_cache.GetWidgetCache = class GetWidgetCache extends framework.Widget {
    createElement() {
      return new get_widget_cache.GetWidgetCacheElement.new(this);
    }
  };
  (get_widget_cache.GetWidgetCache.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    get_widget_cache.GetWidgetCache.__proto__.new.call(this, {key: key});
    ;
  }).prototype = get_widget_cache.GetWidgetCache.prototype;
  dart.addTypeTests(get_widget_cache.GetWidgetCache);
  dart.addTypeCaches(get_widget_cache.GetWidgetCache);
  dart.setMethodSignature(get_widget_cache.GetWidgetCache, () => ({
    __proto__: dart.getMethods(get_widget_cache.GetWidgetCache.__proto__),
    createElement: dart.fnType(get_widget_cache.GetWidgetCacheElement, [])
  }));
  dart.setLibraryUri(get_widget_cache.GetWidgetCache, I[55]);
  const _is_GetWidget_default = Symbol('_is_GetWidget_default');
  get_view.GetWidget$ = dart.generic(S => {
    var __t$_GetCacheOfS = () => (__t$_GetCacheOfS = dart.constFn(get_view._GetCache$(S)))();
    class GetWidget extends get_widget_cache.GetWidgetCache {
      get tag() {
        return this[S$0.tag$2];
      }
      set tag(value) {
        super.tag = value;
      }
      get controller() {
        return S.as(get_view.GetWidget._cache._get(this));
      }
      createWidgetCache() {
        return new (__t$_GetCacheOfS()).new();
      }
    }
    (GetWidget.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0.tag$2] = null;
      GetWidget.__proto__.new.call(this, {key: key});
      ;
    }).prototype = GetWidget.prototype;
    dart.addTypeTests(GetWidget);
    GetWidget.prototype[_is_GetWidget_default] = true;
    dart.addTypeCaches(GetWidget);
    dart.setMethodSignature(GetWidget, () => ({
      __proto__: dart.getMethods(GetWidget.__proto__),
      createWidgetCache: dart.fnType(get_widget_cache.WidgetCache$(get_widget_cache.GetWidgetCache), [])
    }));
    dart.setGetterSignature(GetWidget, () => ({
      __proto__: dart.getGetters(GetWidget.__proto__),
      controller: S
    }));
    dart.setLibraryUri(GetWidget, I[54]);
    dart.setFieldSignature(GetWidget, () => ({
      __proto__: dart.getFields(GetWidget.__proto__),
      tag: dart.finalFieldType(dart.nullable(core.String))
    }));
    dart.setStaticFieldSignature(GetWidget, () => ['_cache']);
    return GetWidget;
  });
  get_view.GetWidget = get_view.GetWidget$();
  dart.defineLazy(get_view.GetWidget, {
    /*get_view.GetWidget._cache*/get _cache() {
      return new (T$.ExpandoOfGetLifeCycleBase()).new();
    }
  }, false);
  dart.addTypeTests(get_view.GetWidget, _is_GetWidget_default);
  const _is_GetResponsiveWidget_default = Symbol('_is_GetResponsiveWidget_default');
  get_responsive.GetResponsiveWidget$ = dart.generic(T => {
    const GetWidget_GetResponsiveMixin$36 = class GetWidget_GetResponsiveMixin extends get_view.GetWidget$(T) {};
    (GetWidget_GetResponsiveMixin$36.new = function(opts) {
      GetWidget_GetResponsiveMixin$36.__proto__.new.call(this, opts);
    }).prototype = GetWidget_GetResponsiveMixin$36.prototype;
    dart.applyMixin(GetWidget_GetResponsiveMixin$36, get_responsive.GetResponsiveMixin);
    class GetResponsiveWidget extends GetWidget_GetResponsiveMixin$36 {
      get alwaysUseBuilder() {
        return this[S$0.alwaysUseBuilder$1];
      }
      set alwaysUseBuilder(value) {
        super.alwaysUseBuilder = value;
      }
      get screen() {
        return this[S$0.screen$1];
      }
      set screen(value) {
        super.screen = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let alwaysUseBuilder = opts && 'alwaysUseBuilder' in opts ? opts.alwaysUseBuilder : false;
        let settings = opts && 'settings' in opts ? opts.settings : C[113] || CT.C113;
        let key = opts && 'key' in opts ? opts.key : null;
        return new (get_responsive.GetResponsiveWidget$(T)).new({alwaysUseBuilder: alwaysUseBuilder, settings: settings, key: key});
      }
    }
    (GetResponsiveWidget.new = function(opts) {
      let alwaysUseBuilder = opts && 'alwaysUseBuilder' in opts ? opts.alwaysUseBuilder : false;
      let settings = opts && 'settings' in opts ? opts.settings : C[113] || CT.C113;
      let key = opts && 'key' in opts ? opts.key : null;
      this[S$0.alwaysUseBuilder$1] = alwaysUseBuilder;
      this[S$0.screen$1] = new get_responsive.ResponsiveScreen.new(settings);
      GetResponsiveWidget.__proto__.new.call(this, {key: key});
      ;
    }).prototype = GetResponsiveWidget.prototype;
    dart.addTypeTests(GetResponsiveWidget);
    GetResponsiveWidget.prototype[_is_GetResponsiveWidget_default] = true;
    dart.addTypeCaches(GetResponsiveWidget);
    dart.setLibraryUri(GetResponsiveWidget, I[53]);
    dart.setFieldSignature(GetResponsiveWidget, () => ({
      __proto__: dart.getFields(GetResponsiveWidget.__proto__),
      alwaysUseBuilder: dart.finalFieldType(core.bool),
      screen: dart.finalFieldType(get_responsive.ResponsiveScreen)
    }));
    return GetResponsiveWidget;
  });
  get_responsive.GetResponsiveWidget = get_responsive.GetResponsiveWidget$();
  dart.addTypeTests(get_responsive.GetResponsiveWidget, _is_GetResponsiveWidget_default);
  get_responsive.ResponsiveScreenSettings = class ResponsiveScreenSettings extends core.Object {
    get desktopChangePoint() {
      return this[S$0.desktopChangePoint];
    }
    set desktopChangePoint(value) {
      super.desktopChangePoint = value;
    }
    get tabletChangePoint() {
      return this[S$0.tabletChangePoint];
    }
    set tabletChangePoint(value) {
      super.tabletChangePoint = value;
    }
    get watchChangePoint() {
      return this[S$0.watchChangePoint];
    }
    set watchChangePoint(value) {
      super.watchChangePoint = value;
    }
    static ['_#new#tearOff'](opts) {
      let desktopChangePoint = opts && 'desktopChangePoint' in opts ? opts.desktopChangePoint : 1200;
      let tabletChangePoint = opts && 'tabletChangePoint' in opts ? opts.tabletChangePoint : 600;
      let watchChangePoint = opts && 'watchChangePoint' in opts ? opts.watchChangePoint : 300;
      return new get_responsive.ResponsiveScreenSettings.new({desktopChangePoint: desktopChangePoint, tabletChangePoint: tabletChangePoint, watchChangePoint: watchChangePoint});
    }
  };
  (get_responsive.ResponsiveScreenSettings.new = function(opts) {
    let desktopChangePoint = opts && 'desktopChangePoint' in opts ? opts.desktopChangePoint : 1200;
    let tabletChangePoint = opts && 'tabletChangePoint' in opts ? opts.tabletChangePoint : 600;
    let watchChangePoint = opts && 'watchChangePoint' in opts ? opts.watchChangePoint : 300;
    this[S$0.desktopChangePoint] = desktopChangePoint;
    this[S$0.tabletChangePoint] = tabletChangePoint;
    this[S$0.watchChangePoint] = watchChangePoint;
    ;
  }).prototype = get_responsive.ResponsiveScreenSettings.prototype;
  dart.addTypeTests(get_responsive.ResponsiveScreenSettings);
  dart.addTypeCaches(get_responsive.ResponsiveScreenSettings);
  dart.setLibraryUri(get_responsive.ResponsiveScreenSettings, I[53]);
  dart.setFieldSignature(get_responsive.ResponsiveScreenSettings, () => ({
    __proto__: dart.getFields(get_responsive.ResponsiveScreenSettings.__proto__),
    desktopChangePoint: dart.finalFieldType(core.double),
    tabletChangePoint: dart.finalFieldType(core.double),
    watchChangePoint: dart.finalFieldType(core.double)
  }));
  get_responsive.ResponsiveScreen = class ResponsiveScreen extends core.Object {
    get settings() {
      return this[S$0.settings$1];
    }
    set settings(value) {
      super.settings = value;
    }
    get context() {
      let t559;
      t559 = this[S$0.__ResponsiveScreen_context];
      return t559 == null ? dart.throw(new _internal.LateError.fieldNI("context")) : t559;
    }
    set context(context$35param) {
      this[S$0.__ResponsiveScreen_context] = context$35param;
    }
    get [S$0._isPaltformDesktop]() {
      let t559;
      t559 = this[S$0.__ResponsiveScreen__isPaltformDesktop];
      return t559 == null ? dart.throw(new _internal.LateError.fieldNI("_isPaltformDesktop")) : t559;
    }
    set [S$0._isPaltformDesktop](_isPaltformDesktop$35param) {
      this[S$0.__ResponsiveScreen__isPaltformDesktop] = _isPaltformDesktop$35param;
    }
    static ['_#new#tearOff'](settings) {
      return new get_responsive.ResponsiveScreen.new(settings);
    }
    get height() {
      return context_extensions['ContextExtensionss|get#height'](this.context);
    }
    get width() {
      return context_extensions['ContextExtensionss|get#width'](this.context);
    }
    get isDesktop() {
      return this.screenType === get_responsive.ScreenType.Desktop;
    }
    get isTablet() {
      return this.screenType === get_responsive.ScreenType.Tablet;
    }
    get isPhone() {
      return this.screenType === get_responsive.ScreenType.Phone;
    }
    get isWatch() {
      return this.screenType === get_responsive.ScreenType.Watch;
    }
    get [S$0._getdeviceWidth]() {
      if (this[S$0._isPaltformDesktop]) {
        return this.width;
      }
      return context_extensions['ContextExtensionss|get#mediaQueryShortestSide'](this.context);
    }
    get screenType() {
      let deviceWidth = this[S$0._getdeviceWidth];
      if (deviceWidth >= this.settings.desktopChangePoint) return get_responsive.ScreenType.Desktop;
      if (deviceWidth >= this.settings.tabletChangePoint) return get_responsive.ScreenType.Tablet;
      if (deviceWidth < this.settings.watchChangePoint) return get_responsive.ScreenType.Watch;
      return get_responsive.ScreenType.Phone;
    }
    responsiveValue(T, opts) {
      let mobile = opts && 'mobile' in opts ? opts.mobile : null;
      let tablet = opts && 'tablet' in opts ? opts.tablet : null;
      let desktop = opts && 'desktop' in opts ? opts.desktop : null;
      let watch = opts && 'watch' in opts ? opts.watch : null;
      if (this.isDesktop && desktop != null) return desktop;
      if (this.isTablet && tablet != null) return tablet;
      if (this.isPhone && mobile != null) return mobile;
      return watch;
    }
  };
  (get_responsive.ResponsiveScreen.new = function(settings) {
    this[S$0.__ResponsiveScreen_context] = null;
    this[S$0.__ResponsiveScreen__isPaltformDesktop] = null;
    this[S$0.settings$1] = settings;
    this[S$0._isPaltformDesktop] = platform$.GetPlatform.isDesktop;
  }).prototype = get_responsive.ResponsiveScreen.prototype;
  dart.addTypeTests(get_responsive.ResponsiveScreen);
  dart.addTypeCaches(get_responsive.ResponsiveScreen);
  dart.setMethodSignature(get_responsive.ResponsiveScreen, () => ({
    __proto__: dart.getMethods(get_responsive.ResponsiveScreen.__proto__),
    responsiveValue: dart.gFnType(T => [dart.nullable(T), [], {desktop: dart.nullable(T), mobile: dart.nullable(T), tablet: dart.nullable(T), watch: dart.nullable(T)}, {}], T => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(get_responsive.ResponsiveScreen, () => ({
    __proto__: dart.getGetters(get_responsive.ResponsiveScreen.__proto__),
    context: framework.BuildContext,
    [S$0._isPaltformDesktop]: core.bool,
    height: core.double,
    width: core.double,
    isDesktop: core.bool,
    isTablet: core.bool,
    isPhone: core.bool,
    isWatch: core.bool,
    [S$0._getdeviceWidth]: core.double,
    screenType: get_responsive.ScreenType
  }));
  dart.setSetterSignature(get_responsive.ResponsiveScreen, () => ({
    __proto__: dart.getSetters(get_responsive.ResponsiveScreen.__proto__),
    context: framework.BuildContext,
    [S$0._isPaltformDesktop]: core.bool
  }));
  dart.setLibraryUri(get_responsive.ResponsiveScreen, I[53]);
  dart.setFieldSignature(get_responsive.ResponsiveScreen, () => ({
    __proto__: dart.getFields(get_responsive.ResponsiveScreen.__proto__),
    [S$0.__ResponsiveScreen_context]: dart.fieldType(dart.nullable(framework.BuildContext)),
    settings: dart.finalFieldType(get_responsive.ResponsiveScreenSettings),
    [S$0.__ResponsiveScreen__isPaltformDesktop]: dart.fieldType(dart.nullable(core.bool))
  }));
  get_responsive.ScreenType = class ScreenType extends core._Enum {
    [S$._enumToString]() {
      return "ScreenType." + this[S$._name];
    }
  };
  (get_responsive.ScreenType.new = function(index, name) {
    get_responsive.ScreenType.__proto__.new.call(this, index, name);
    ;
  }).prototype = get_responsive.ScreenType.prototype;
  dart.addTypeTests(get_responsive.ScreenType);
  dart.addTypeCaches(get_responsive.ScreenType);
  dart.setMethodSignature(get_responsive.ScreenType, () => ({
    __proto__: dart.getMethods(get_responsive.ScreenType.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(get_responsive.ScreenType, I[53]);
  dart.setStaticFieldSignature(get_responsive.ScreenType, () => ['values', 'Watch', 'Phone', 'Tablet', 'Desktop']);
  dart.defineLazy(get_responsive.ScreenType, {
    /*get_responsive.ScreenType.values*/get values() {
      return C[114] || CT.C114;
    },
    /*get_responsive.ScreenType.Watch*/get Watch() {
      return C[115] || CT.C115;
    },
    /*get_responsive.ScreenType.Phone*/get Phone() {
      return C[116] || CT.C116;
    },
    /*get_responsive.ScreenType.Tablet*/get Tablet() {
      return C[117] || CT.C117;
    },
    /*get_responsive.ScreenType.Desktop*/get Desktop() {
      return C[118] || CT.C118;
    }
  }, false);
  const _is_GetStateUpdaterMixin_default = Symbol('_is_GetStateUpdaterMixin_default');
  get_state.GetStateUpdaterMixin$ = dart.generic(T => {
    class GetStateUpdaterMixin extends framework.State$(T) {}
    GetStateUpdaterMixin[dart.mixinOn] = State => class GetStateUpdaterMixin extends State {
      getUpdate() {
        if (this.mounted) this.setState(dart.fn(() => {
        }, T$.VoidTovoid()));
      }
    };
    dart.addTypeTests(GetStateUpdaterMixin);
    GetStateUpdaterMixin.prototype[_is_GetStateUpdaterMixin_default] = true;
    dart.addTypeCaches(GetStateUpdaterMixin);
    GetStateUpdaterMixin[dart.implements] = () => [framework.State$(T)];
    dart.setMethodSignature(GetStateUpdaterMixin, () => ({
      __proto__: dart.getMethods(GetStateUpdaterMixin.__proto__),
      getUpdate: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(GetStateUpdaterMixin, I[56]);
    return GetStateUpdaterMixin;
  });
  get_state.GetStateUpdaterMixin = get_state.GetStateUpdaterMixin$();
  dart.addTypeTests(get_state.GetStateUpdaterMixin, _is_GetStateUpdaterMixin_default);
  const _is_GetBuilder_default = Symbol('_is_GetBuilder_default');
  get_state.GetBuilder$ = dart.generic(T => {
    var __t$GetBuilderStateOfT = () => (__t$GetBuilderStateOfT = dart.constFn(get_state.GetBuilderState$(T)))();
    class GetBuilder extends framework.StatefulWidget {
      get builder() {
        return this[S$0.builder$8];
      }
      set builder(value) {
        super.builder = value;
      }
      get global() {
        return this[S$0.global$1];
      }
      set global(value) {
        super.global = value;
      }
      get id() {
        return this[S$0.id];
      }
      set id(value) {
        super.id = value;
      }
      get tag() {
        return this[S$0.tag$3];
      }
      set tag(value) {
        super.tag = value;
      }
      get autoRemove() {
        return this[S$0.autoRemove$1];
      }
      set autoRemove(value) {
        super.autoRemove = value;
      }
      get assignId() {
        return this[S$0.assignId$1];
      }
      set assignId(value) {
        super.assignId = value;
      }
      get filter() {
        return this[S$0.filter];
      }
      set filter(value) {
        super.filter = value;
      }
      get initState() {
        return this[S$0.initState$1];
      }
      set initState(value) {
        super.initState = value;
      }
      get dispose() {
        return this[S$0.dispose$1];
      }
      set dispose(value) {
        super.dispose = value;
      }
      get didChangeDependencies() {
        return this[S$0.didChangeDependencies$1];
      }
      set didChangeDependencies(value) {
        super.didChangeDependencies = value;
      }
      get didUpdateWidget() {
        return this[S$0.didUpdateWidget$1];
      }
      set didUpdateWidget(value) {
        super.didUpdateWidget = value;
      }
      get init() {
        return this[S$0.init$1];
      }
      set init(value) {
        super.init = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let init = opts && 'init' in opts ? opts.init : null;
        let global = opts && 'global' in opts ? opts.global : true;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
        let assignId = opts && 'assignId' in opts ? opts.assignId : false;
        let initState = opts && 'initState' in opts ? opts.initState : null;
        let filter = opts && 'filter' in opts ? opts.filter : null;
        let tag = opts && 'tag' in opts ? opts.tag : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let id = opts && 'id' in opts ? opts.id : null;
        let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
        let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
        return new (get_state.GetBuilder$(T)).new({key: key, init: init, global: global, builder: builder, autoRemove: autoRemove, assignId: assignId, initState: initState, filter: filter, tag: tag, dispose: dispose, id: id, didChangeDependencies: didChangeDependencies, didUpdateWidget: didUpdateWidget});
      }
      createState() {
        return new (__t$GetBuilderStateOfT()).new();
      }
    }
    (GetBuilder.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let init = opts && 'init' in opts ? opts.init : null;
      let global = opts && 'global' in opts ? opts.global : true;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
      let assignId = opts && 'assignId' in opts ? opts.assignId : false;
      let initState = opts && 'initState' in opts ? opts.initState : null;
      let filter = opts && 'filter' in opts ? opts.filter : null;
      let tag = opts && 'tag' in opts ? opts.tag : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
      let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
      this[S$0.init$1] = init;
      this[S$0.global$1] = global;
      this[S$0.builder$8] = builder;
      this[S$0.autoRemove$1] = autoRemove;
      this[S$0.assignId$1] = assignId;
      this[S$0.initState$1] = initState;
      this[S$0.filter] = filter;
      this[S$0.tag$3] = tag;
      this[S$0.dispose$1] = dispose;
      this[S$0.id] = id;
      this[S$0.didChangeDependencies$1] = didChangeDependencies;
      this[S$0.didUpdateWidget$1] = didUpdateWidget;
      GetBuilder.__proto__.new.call(this, {key: key});
      ;
    }).prototype = GetBuilder.prototype;
    dart.addTypeTests(GetBuilder);
    GetBuilder.prototype[_is_GetBuilder_default] = true;
    dart.addTypeCaches(GetBuilder);
    dart.setMethodSignature(GetBuilder, () => ({
      __proto__: dart.getMethods(GetBuilder.__proto__),
      createState: dart.fnType(get_state.GetBuilderState$(T), [])
    }));
    dart.setLibraryUri(GetBuilder, I[56]);
    dart.setFieldSignature(GetBuilder, () => ({
      __proto__: dart.getFields(GetBuilder.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [T])),
      global: dart.finalFieldType(core.bool),
      id: dart.finalFieldType(dart.nullable(core.Object)),
      tag: dart.finalFieldType(dart.nullable(core.String)),
      autoRemove: dart.finalFieldType(core.bool),
      assignId: dart.finalFieldType(core.bool),
      filter: dart.finalFieldType(dart.nullable(dart.fnType(core.Object, [T]))),
      initState: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [get_state.GetBuilderState$(T)]))),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [get_state.GetBuilderState$(T)]))),
      didChangeDependencies: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [get_state.GetBuilderState$(T)]))),
      didUpdateWidget: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [get_state.GetBuilder$(get_controllers.GetxController), get_state.GetBuilderState$(T)]))),
      init: dart.finalFieldType(dart.nullable(T))
    }));
    return GetBuilder;
  });
  get_state.GetBuilder = get_state.GetBuilder$();
  dart.addTypeTests(get_state.GetBuilder, _is_GetBuilder_default);
  const _is_GetBuilderState_default = Symbol('_is_GetBuilderState_default');
  get_state.GetBuilderState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$GetBuilderStateOfT = () => (__t$GetBuilderStateOfT = dart.constFn(get_state.GetBuilderState$(T)))();
    var __t$GetBuilderStateOfTTovoid = () => (__t$GetBuilderStateOfTTovoid = dart.constFn(dart.fnType(dart.void, [__t$GetBuilderStateOfT()])))();
    var __t$GetBuilderStateOfTToNvoid = () => (__t$GetBuilderStateOfTToNvoid = dart.constFn(dart.nullable(__t$GetBuilderStateOfTTovoid())))();
    var __t$TToObject = () => (__t$TToObject = dart.constFn(dart.fnType(core.Object, [T])))();
    var __t$TToNObject = () => (__t$TToNObject = dart.constFn(dart.nullable(__t$TToObject())))();
    var __t$GetBuilderOfT = () => (__t$GetBuilderOfT = dart.constFn(get_state.GetBuilder$(T)))();
    var __t$GetBuilderOfGetxControllerAndGetBuilderStateOfTTovoid = () => (__t$GetBuilderOfGetxControllerAndGetBuilderStateOfTTovoid = dart.constFn(dart.fnType(dart.void, [T$.GetBuilderOfGetxController(), __t$GetBuilderStateOfT()])))();
    var __t$GetBuilderOfGetxControllerAndGetBuilderStateOfTToNvoid = () => (__t$GetBuilderOfGetxControllerAndGetBuilderStateOfTToNvoid = dart.constFn(dart.nullable(__t$GetBuilderOfGetxControllerAndGetBuilderStateOfTTovoid())))();
    var __t$TToWidget = () => (__t$TToWidget = dart.constFn(dart.fnType(framework.Widget, [T])))();
    const State_GetStateUpdaterMixin$36 = class State_GetStateUpdaterMixin extends framework.State$(get_state.GetBuilder$(T)) {};
    (State_GetStateUpdaterMixin$36.new = function() {
      State_GetStateUpdaterMixin$36.__proto__.new.call(this);
    }).prototype = State_GetStateUpdaterMixin$36.prototype;
    dart.applyMixin(State_GetStateUpdaterMixin$36, get_state.GetStateUpdaterMixin$(get_state.GetBuilder$(T)));
    class GetBuilderState extends State_GetStateUpdaterMixin$36 {
      get controller() {
        return this[S$0.controller$1];
      }
      set controller(value) {
        this[S$0.controller$1] = __t$TN().as(value);
      }
      initState() {
        let t561, t561$;
        super.initState();
        t561 = __t$GetBuilderStateOfTToNvoid().as(this.widget.initState);
        t561 == null ? null : t561(this);
        let isRegistered = get_instance$.GetInstance.new().isRegistered(T, {tag: this.widget.tag});
        if (this.widget.global) {
          if (isRegistered) {
            if (get_instance$.GetInstance.new().isPrepared(T, {tag: this.widget.tag})) {
              this[S$0._isCreator$1] = true;
            } else {
              this[S$0._isCreator$1] = false;
            }
            this.controller = get_instance$.GetInstance.new().find(T, {tag: this.widget.tag});
          } else {
            this.controller = this.widget.init;
            this[S$0._isCreator$1] = true;
            get_instance$.GetInstance.new().put(T, dart.nullCheck(this.controller), {tag: this.widget.tag});
          }
        } else {
          this.controller = this.widget.init;
          this[S$0._isCreator$1] = true;
          t561$ = this.controller;
          t561$ == null ? null : t561$.onStart.call();
        }
        if (__t$TToNObject().as(this.widget.filter) != null) {
          this[S$0._filter] = dart.nullCheck(__t$TToNObject().as(this.widget.filter))(dart.nullCheck(this.controller));
        }
        this[S$0._subscribeToController]();
      }
      [S$0._subscribeToController]() {
        let t561, t561$, t561$0;
        t561 = this[S$0._remove];
        t561 == null ? null : t561();
        this[S$0._remove] = this.widget.id == null ? (t561$ = this.controller, t561$ == null ? null : t561$.addListener(this[S$0._filter] != null ? dart.bind(this, S$0._filterUpdate) : dart.bind(this, 'getUpdate'))) : (t561$0 = this.controller, t561$0 == null ? null : t561$0.addListenerId(this.widget.id, this[S$0._filter] != null ? dart.bind(this, S$0._filterUpdate) : dart.bind(this, 'getUpdate')));
      }
      [S$0._filterUpdate]() {
        let newFilter = dart.nullCheck(__t$TToNObject().as(this.widget.filter))(dart.nullCheck(this.controller));
        if (!newFilter[S$.$_equals](this[S$0._filter])) {
          this[S$0._filter] = newFilter;
          this.getUpdate();
        }
      }
      dispose() {
        let t561, t561$;
        super.dispose();
        t561 = __t$GetBuilderStateOfTToNvoid().as(this.widget.dispose);
        t561 == null ? null : t561(this);
        if (dart.nullCheck(this[S$0._isCreator$1]) || this.widget.assignId) {
          if (this.widget.autoRemove && get_instance$.GetInstance.new().isRegistered(T, {tag: this.widget.tag})) {
            get_instance$.GetInstance.new().delete(T, {tag: this.widget.tag});
          }
        }
        t561$ = this[S$0._remove];
        t561$ == null ? null : t561$();
        this.controller = null;
        this[S$0._isCreator$1] = null;
        this[S$0._remove] = null;
        this[S$0._filter] = null;
      }
      didChangeDependencies() {
        let t561;
        super.didChangeDependencies();
        t561 = __t$GetBuilderStateOfTToNvoid().as(this.widget.didChangeDependencies);
        t561 == null ? null : t561(this);
      }
      didUpdateWidget(oldWidget) {
        let t561;
        T$.GetBuilderOfGetxController().as(oldWidget);
        super.didUpdateWidget(__t$GetBuilderOfT().as(oldWidget));
        if (!dart.equals(oldWidget.id, this.widget.id)) {
          this[S$0._subscribeToController]();
        }
        t561 = __t$GetBuilderOfGetxControllerAndGetBuilderStateOfTToNvoid().as(this.widget.didUpdateWidget);
        t561 == null ? null : t561(oldWidget, this);
      }
      build(context) {
        let t562, t561;
        t561 = this.widget;
        t562 = dart.nullCheck(this.controller);
        return __t$TToWidget().as(t561.builder)(t562);
      }
      static ['_#new#tearOff'](T) {
        return new (get_state.GetBuilderState$(T)).new();
      }
    }
    (GetBuilderState.new = function() {
      this[S$0.controller$1] = null;
      this[S$0._isCreator$1] = false;
      this[S$0._remove] = null;
      this[S$0._filter] = null;
      GetBuilderState.__proto__.new.call(this);
      ;
    }).prototype = GetBuilderState.prototype;
    dart.addTypeTests(GetBuilderState);
    GetBuilderState.prototype[_is_GetBuilderState_default] = true;
    dart.addTypeCaches(GetBuilderState);
    dart.setMethodSignature(GetBuilderState, () => ({
      __proto__: dart.getMethods(GetBuilderState.__proto__),
      [S$0._subscribeToController]: dart.fnType(dart.void, []),
      [S$0._filterUpdate]: dart.fnType(dart.void, []),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(GetBuilderState, I[56]);
    dart.setFieldSignature(GetBuilderState, () => ({
      __proto__: dart.getFields(GetBuilderState.__proto__),
      controller: dart.fieldType(dart.nullable(T)),
      [S$0._isCreator$1]: dart.fieldType(dart.nullable(core.bool)),
      [S$0._remove]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      [S$0._filter]: dart.fieldType(dart.nullable(core.Object))
    }));
    return GetBuilderState;
  });
  get_state.GetBuilderState = get_state.GetBuilderState$();
  dart.addTypeTests(get_state.GetBuilderState, _is_GetBuilderState_default);
  const _is_WidgetCache_default = Symbol('_is_WidgetCache_default');
  get_widget_cache.WidgetCache$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    class WidgetCache extends core.Object {
      get [S$0._widget$1]() {
        return this[S$0._widget];
      }
      set [S$0._widget$1](value) {
        this[S$0._widget] = __t$TN().as(value);
      }
      get widget() {
        return this[S$0._widget$1];
      }
      get context() {
        return this[S$0._element];
      }
      onInit() {
      }
      onClose() {
      }
    }
    (WidgetCache.new = function() {
      this[S$0._widget] = null;
      this[S$0._element] = null;
      ;
    }).prototype = WidgetCache.prototype;
    dart.addTypeTests(WidgetCache);
    WidgetCache.prototype[_is_WidgetCache_default] = true;
    dart.addTypeCaches(WidgetCache);
    dart.setMethodSignature(WidgetCache, () => ({
      __proto__: dart.getMethods(WidgetCache.__proto__),
      onInit: dart.fnType(dart.void, []),
      onClose: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(WidgetCache, () => ({
      __proto__: dart.getGetters(WidgetCache.__proto__),
      widget: dart.nullable(T),
      context: dart.nullable(framework.BuildContext)
    }));
    dart.setLibraryUri(WidgetCache, I[55]);
    dart.setFieldSignature(WidgetCache, () => ({
      __proto__: dart.getFields(WidgetCache.__proto__),
      [S$0._widget$1]: dart.fieldType(dart.nullable(T)),
      [S$0._element]: dart.fieldType(dart.nullable(get_widget_cache.GetWidgetCacheElement))
    }));
    return WidgetCache;
  });
  get_widget_cache.WidgetCache = get_widget_cache.WidgetCache$();
  dart.addTypeTests(get_widget_cache.WidgetCache, _is_WidgetCache_default);
  const _is__GetCache_default = Symbol('_is__GetCache_default');
  get_view._GetCache$ = dart.generic(S => {
    class _GetCache extends get_widget_cache.WidgetCache$(get_view.GetWidget$(S)) {
      onInit() {
        this.info = get_instance$.GetInstance.new().getInstanceInfo(S, {tag: dart.nullCheck(this.widget).tag});
        this[S$0._isCreator$2] = dart.nullCheck(this.info).isPrepared && dart.nullCheck(this.info).isCreate;
        if (dart.nullCheck(this.info).isRegistered) {
          this[S$0._controller$1] = extension_instance['Inst|find'](S, get_main.Get, {tag: dart.nullCheck(this.widget).tag});
        }
        get_view.GetWidget._cache._set(dart.nullCheck(this.widget), this[S$0._controller$1]);
        super.onInit();
      }
      onClose() {
        if (this[S$0._isCreator$2]) {
          event_loop_extensions['LoopEventsExt|asap'](core.Null, get_main.Get, dart.fn(() => {
            let t562, t561, t562$, t561$;
            dart.nullCheck(dart.nullCheck(this.widget).controller).onDelete.call();
            t561 = get_main.Get;
            t562 = "\"" + dart.str(dart.runtimeType(dart.nullCheck(this.widget).controller)) + "\" onClose() called";
            t561.log(t562);
            t561$ = get_main.Get;
            t562$ = "\"" + dart.str(dart.runtimeType(dart.nullCheck(this.widget).controller)) + "\" deleted from memory";
            t561$.log(t562$);
            get_view.GetWidget._cache._set(dart.nullCheck(this.widget), null);
          }, T$.VoidToNull()));
        }
        this.info = null;
        super.onClose();
      }
      build(context) {
        return dart.nullCheck(this.widget).build(context);
      }
      static ['_#new#tearOff'](S) {
        return new (get_view._GetCache$(S)).new();
      }
    }
    (_GetCache.new = function() {
      this[S$0._controller$1] = null;
      this[S$0._isCreator$2] = false;
      this.info = null;
      _GetCache.__proto__.new.call(this);
      ;
    }).prototype = _GetCache.prototype;
    dart.addTypeTests(_GetCache);
    _GetCache.prototype[_is__GetCache_default] = true;
    dart.addTypeCaches(_GetCache);
    dart.setMethodSignature(_GetCache, () => ({
      __proto__: dart.getMethods(_GetCache.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(_GetCache, I[54]);
    dart.setFieldSignature(_GetCache, () => ({
      __proto__: dart.getFields(_GetCache.__proto__),
      [S$0._controller$1]: dart.fieldType(dart.nullable(S)),
      [S$0._isCreator$2]: dart.fieldType(core.bool),
      info: dart.fieldType(dart.nullable(get_instance$.InstanceInfo))
    }));
    return _GetCache;
  });
  get_view._GetCache = get_view._GetCache$();
  dart.addTypeTests(get_view._GetCache, _is__GetCache_default);
  const _is_MixinBuilder_default = Symbol('_is_MixinBuilder_default');
  mixin_state.MixinBuilder$ = dart.generic(T => {
    var __t$GetBuilderOfT = () => (__t$GetBuilderOfT = dart.constFn(get_state.GetBuilder$(T)))();
    var __t$TToObx = () => (__t$TToObx = dart.constFn(dart.fnType(rx_obx_widget.Obx, [T])))();
    class MixinBuilder extends framework.StatelessWidget {
      get builder() {
        return this[S$0.builder$9];
      }
      set builder(value) {
        super.builder = value;
      }
      get global() {
        return this[S$0.global$2];
      }
      set global(value) {
        super.global = value;
      }
      get id() {
        return this[S$0.id$1];
      }
      set id(value) {
        super.id = value;
      }
      get autoRemove() {
        return this[S$0.autoRemove$2];
      }
      set autoRemove(value) {
        super.autoRemove = value;
      }
      get initState() {
        return this[S$0.initState$2];
      }
      set initState(value) {
        super.initState = value;
      }
      get dispose() {
        return this[S$0.dispose$2];
      }
      set dispose(value) {
        super.dispose = value;
      }
      get didChangeDependencies() {
        return this[S$0.didChangeDependencies$2];
      }
      set didChangeDependencies(value) {
        super.didChangeDependencies = value;
      }
      get didUpdateWidget() {
        return this[S$0.didUpdateWidget$2];
      }
      set didUpdateWidget(value) {
        super.didUpdateWidget = value;
      }
      get init() {
        return this[S$0.init$2];
      }
      set init(value) {
        super.init = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let init = opts && 'init' in opts ? opts.init : null;
        let global = opts && 'global' in opts ? opts.global : true;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
        let initState = opts && 'initState' in opts ? opts.initState : null;
        let dispose = opts && 'dispose' in opts ? opts.dispose : null;
        let id = opts && 'id' in opts ? opts.id : null;
        let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
        let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
        return new (mixin_state.MixinBuilder$(T)).new({key: key, init: init, global: global, builder: builder, autoRemove: autoRemove, initState: initState, dispose: dispose, id: id, didChangeDependencies: didChangeDependencies, didUpdateWidget: didUpdateWidget});
      }
      build(context) {
        return new (__t$GetBuilderOfT()).new({init: this.init, global: this.global, autoRemove: this.autoRemove, initState: this.initState, dispose: this.dispose, id: this.id, didChangeDependencies: this.didChangeDependencies, didUpdateWidget: this.didUpdateWidget, builder: dart.fn(controller => new rx_obx_widget.Obx.new(dart.fn(() => this.builder(controller), T$.VoidToWidget())), __t$TToObx())});
      }
    }
    (MixinBuilder.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let init = opts && 'init' in opts ? opts.init : null;
      let global = opts && 'global' in opts ? opts.global : true;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      let autoRemove = opts && 'autoRemove' in opts ? opts.autoRemove : true;
      let initState = opts && 'initState' in opts ? opts.initState : null;
      let dispose = opts && 'dispose' in opts ? opts.dispose : null;
      let id = opts && 'id' in opts ? opts.id : null;
      let didChangeDependencies = opts && 'didChangeDependencies' in opts ? opts.didChangeDependencies : null;
      let didUpdateWidget = opts && 'didUpdateWidget' in opts ? opts.didUpdateWidget : null;
      this[S$0.init$2] = init;
      this[S$0.global$2] = global;
      this[S$0.builder$9] = builder;
      this[S$0.autoRemove$2] = autoRemove;
      this[S$0.initState$2] = initState;
      this[S$0.dispose$2] = dispose;
      this[S$0.id$1] = id;
      this[S$0.didChangeDependencies$2] = didChangeDependencies;
      this[S$0.didUpdateWidget$2] = didUpdateWidget;
      MixinBuilder.__proto__.new.call(this, {key: key});
      ;
    }).prototype = MixinBuilder.prototype;
    dart.addTypeTests(MixinBuilder);
    MixinBuilder.prototype[_is_MixinBuilder_default] = true;
    dart.addTypeCaches(MixinBuilder);
    dart.setMethodSignature(MixinBuilder, () => ({
      __proto__: dart.getMethods(MixinBuilder.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext])
    }));
    dart.setLibraryUri(MixinBuilder, I[57]);
    dart.setFieldSignature(MixinBuilder, () => ({
      __proto__: dart.getFields(MixinBuilder.__proto__),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [T])),
      global: dart.finalFieldType(core.bool),
      id: dart.finalFieldType(dart.nullable(core.String)),
      autoRemove: dart.finalFieldType(core.bool),
      initState: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.State$(framework.StatefulWidget)]))),
      dispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.State$(framework.StatefulWidget)]))),
      didChangeDependencies: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [framework.State$(framework.StatefulWidget)]))),
      didUpdateWidget: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [get_state.GetBuilder$(get_controllers.GetxController), framework.State$(framework.StatefulWidget)]))),
      init: dart.finalFieldType(dart.nullable(T))
    }));
    return MixinBuilder;
  });
  mixin_state.MixinBuilder = mixin_state.MixinBuilder$();
  dart.addTypeTests(mixin_state.MixinBuilder, _is_MixinBuilder_default);
  const _is_ValueBuilder_default = Symbol('_is_ValueBuilder_default');
  simple_builder.ValueBuilder$ = dart.generic(T => {
    var __t$_ValueBuilderStateOfT = () => (__t$_ValueBuilderStateOfT = dart.constFn(simple_builder._ValueBuilderState$(T)))();
    class ValueBuilder extends framework.StatefulWidget {
      get initialValue() {
        return this[S$0.initialValue];
      }
      set initialValue(value) {
        super.initialValue = value;
      }
      get builder() {
        return this[S$0.builder$10];
      }
      set builder(value) {
        super.builder = value;
      }
      get onDispose() {
        return this[S$0.onDispose$2];
      }
      set onDispose(value) {
        super.onDispose = value;
      }
      get onUpdate() {
        return this[S$0.onUpdate];
      }
      set onUpdate(value) {
        super.onUpdate = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
        let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
        let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
        let builder = opts && 'builder' in opts ? opts.builder : null;
        return new (simple_builder.ValueBuilder$(T)).new({key: key, initialValue: initialValue, onDispose: onDispose, onUpdate: onUpdate, builder: builder});
      }
      createState() {
        return new (__t$_ValueBuilderStateOfT()).new();
      }
    }
    (ValueBuilder.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let onDispose = opts && 'onDispose' in opts ? opts.onDispose : null;
      let onUpdate = opts && 'onUpdate' in opts ? opts.onUpdate : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      this[S$0.initialValue] = initialValue;
      this[S$0.onDispose$2] = onDispose;
      this[S$0.onUpdate] = onUpdate;
      this[S$0.builder$10] = builder;
      ValueBuilder.__proto__.new.call(this, {key: key});
      ;
    }).prototype = ValueBuilder.prototype;
    dart.addTypeTests(ValueBuilder);
    ValueBuilder.prototype[_is_ValueBuilder_default] = true;
    dart.addTypeCaches(ValueBuilder);
    dart.setMethodSignature(ValueBuilder, () => ({
      __proto__: dart.getMethods(ValueBuilder.__proto__),
      createState: dart.fnType(simple_builder._ValueBuilderState$(T), [])
    }));
    dart.setLibraryUri(ValueBuilder, I[58]);
    dart.setFieldSignature(ValueBuilder, () => ({
      __proto__: dart.getFields(ValueBuilder.__proto__),
      initialValue: dart.finalFieldType(dart.nullable(T)),
      builder: dart.finalFieldType(dart.fnType(framework.Widget, [T, dart.fnType(dart.void, [T])])),
      onDispose: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
      onUpdate: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [T])))
    }));
    return ValueBuilder;
  });
  simple_builder.ValueBuilder = simple_builder.ValueBuilder$();
  dart.addTypeTests(simple_builder.ValueBuilder, _is_ValueBuilder_default);
  const _is__ValueBuilderState_default = Symbol('_is__ValueBuilderState_default');
  simple_builder._ValueBuilderState$ = dart.generic(T => {
    var __t$TN = () => (__t$TN = dart.constFn(dart.nullable(T)))();
    var __t$TNTovoid = () => (__t$TNTovoid = dart.constFn(dart.fnType(dart.void, [__t$TN()])))();
    var __t$TNAndFnToWidget = () => (__t$TNAndFnToWidget = dart.constFn(dart.fnType(framework.Widget, [__t$TN(), __t$TNTovoid()])))();
    var __t$TNToNvoid = () => (__t$TNToNvoid = dart.constFn(dart.nullable(__t$TNTovoid())))();
    class _ValueBuilderState extends framework.State$(simple_builder.ValueBuilder$(dart.nullable(T))) {
      get value() {
        return this[S$0.value];
      }
      set value(value) {
        this[S$0.value] = __t$TN().as(value);
      }
      initState() {
        super.initState();
        this.value = this.widget.initialValue;
      }
      build(context) {
        let t563, t562, t561;
        t561 = this.widget;
        t562 = this.value;
        t563 = dart.bind(this, 'updater');
        return __t$TNAndFnToWidget().as(t561.builder)(t562, t563);
      }
      updater(newValue) {
        __t$TN().as(newValue);
        if (__t$TNToNvoid().as(this.widget.onUpdate) != null) {
          dart.nullCheck(__t$TNToNvoid().as(this.widget.onUpdate))(newValue);
        }
        this.setState(dart.fn(() => {
          this.value = newValue;
        }, T$.VoidTovoid()));
      }
      dispose() {
        let t561, t561$, t561$0;
        super.dispose();
        t561 = this.widget.onDispose;
        t561 == null ? null : t561();
        if (change_notifier.ChangeNotifier.is(this.value)) {
          t561$ = T$.ChangeNotifierN().as(this.value);
          t561$ == null ? null : t561$.dispose();
        } else if (async.StreamController.is(this.value)) {
          t561$0 = T$.StreamControllerN().as(this.value);
          t561$0 == null ? null : t561$0.close();
        }
        this.value = null;
      }
      static ['_#new#tearOff'](T) {
        return new (simple_builder._ValueBuilderState$(T)).new();
      }
    }
    (_ValueBuilderState.new = function() {
      this[S$0.value] = null;
      _ValueBuilderState.__proto__.new.call(this);
      ;
    }).prototype = _ValueBuilderState.prototype;
    dart.addTypeTests(_ValueBuilderState);
    _ValueBuilderState.prototype[_is__ValueBuilderState_default] = true;
    dart.addTypeCaches(_ValueBuilderState);
    dart.setMethodSignature(_ValueBuilderState, () => ({
      __proto__: dart.getMethods(_ValueBuilderState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext]),
      updater: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(_ValueBuilderState, I[58]);
    dart.setFieldSignature(_ValueBuilderState, () => ({
      __proto__: dart.getFields(_ValueBuilderState.__proto__),
      value: dart.fieldType(dart.nullable(T))
    }));
    return _ValueBuilderState;
  });
  simple_builder._ValueBuilderState = simple_builder._ValueBuilderState$();
  dart.addTypeTests(simple_builder._ValueBuilderState, _is__ValueBuilderState_default);
  simple_builder.SimpleBuilder = class SimpleBuilder extends framework.StatefulWidget {
    get builder() {
      return this[S$0.builder$11];
    }
    set builder(value) {
      super.builder = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let builder = opts && 'builder' in opts ? opts.builder : null;
      return new simple_builder.SimpleBuilder.new({key: key, builder: builder});
    }
    createState() {
      return new simple_builder._SimpleBuilderState.new();
    }
  };
  (simple_builder.SimpleBuilder.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    this[S$0.builder$11] = builder;
    simple_builder.SimpleBuilder.__proto__.new.call(this, {key: key});
    ;
  }).prototype = simple_builder.SimpleBuilder.prototype;
  dart.addTypeTests(simple_builder.SimpleBuilder);
  dart.addTypeCaches(simple_builder.SimpleBuilder);
  dart.setMethodSignature(simple_builder.SimpleBuilder, () => ({
    __proto__: dart.getMethods(simple_builder.SimpleBuilder.__proto__),
    createState: dart.fnType(simple_builder._SimpleBuilderState, [])
  }));
  dart.setLibraryUri(simple_builder.SimpleBuilder, I[58]);
  dart.setFieldSignature(simple_builder.SimpleBuilder, () => ({
    __proto__: dart.getFields(simple_builder.SimpleBuilder.__proto__),
    builder: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext]))
  }));
  const State_GetStateUpdaterMixin$36 = class State_GetStateUpdaterMixin extends framework.State$(simple_builder.SimpleBuilder) {};
  (State_GetStateUpdaterMixin$36.new = function() {
    State_GetStateUpdaterMixin$36.__proto__.new.call(this);
  }).prototype = State_GetStateUpdaterMixin$36.prototype;
  dart.applyMixin(State_GetStateUpdaterMixin$36, get_state.GetStateUpdaterMixin$(simple_builder.SimpleBuilder));
  simple_builder._SimpleBuilderState = class _SimpleBuilderState extends State_GetStateUpdaterMixin$36 {
    dispose() {
      super.dispose();
      for (let disposer of this.disposers) {
        disposer();
      }
    }
    build(context) {
      return list_notifier.TaskManager.instance.exchange(this.disposers, dart.bind(this, 'getUpdate'), this.widget.builder, context);
    }
    static ['_#new#tearOff']() {
      return new simple_builder._SimpleBuilderState.new();
    }
  };
  (simple_builder._SimpleBuilderState.new = function() {
    this.disposers = T$.JSArrayOfVoidTovoid().of([]);
    simple_builder._SimpleBuilderState.__proto__.new.call(this);
    ;
  }).prototype = simple_builder._SimpleBuilderState.prototype;
  dart.addTypeTests(simple_builder._SimpleBuilderState);
  dart.addTypeCaches(simple_builder._SimpleBuilderState);
  dart.setMethodSignature(simple_builder._SimpleBuilderState, () => ({
    __proto__: dart.getMethods(simple_builder._SimpleBuilderState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(simple_builder._SimpleBuilderState, I[58]);
  dart.setFieldSignature(simple_builder._SimpleBuilderState, () => ({
    __proto__: dart.getFields(simple_builder._SimpleBuilderState.__proto__),
    disposers: dart.finalFieldType(core.List$(dart.fnType(dart.void, [])))
  }));
  get_utils$.GetUtils = class GetUtils extends core.Object {
    static ['_#_#tearOff']() {
      return new get_utils$.GetUtils.__();
    }
    static isNull(value) {
      return value == null;
    }
    static nil(s) {
      return s == null ? null : s;
    }
    static isNullOrBlank(value) {
      if (get_utils$.GetUtils.isNull(value)) {
        return true;
      }
      return get_utils$._isEmpty(value);
    }
    static isBlank(value) {
      return get_utils$._isEmpty(value);
    }
    static isNum(value) {
      if (get_utils$.GetUtils.isNull(value)) {
        return false;
      }
      return typeof core.num.tryParse(value) == 'number';
    }
    static isNumericOnly(s) {
      return get_utils$.GetUtils.hasMatch(s, "^\\d+$");
    }
    static isAlphabetOnly(s) {
      return get_utils$.GetUtils.hasMatch(s, "^[a-zA-Z]+$");
    }
    static hasCapitalletter(s) {
      return get_utils$.GetUtils.hasMatch(s, "[A-Z]");
    }
    static isBool(value) {
      if (get_utils$.GetUtils.isNull(value)) {
        return false;
      }
      return value === "true" || value === "false";
    }
    static isVideo(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".mp4") || ext[S$0.$endsWith](".avi") || ext[S$0.$endsWith](".wmv") || ext[S$0.$endsWith](".rmvb") || ext[S$0.$endsWith](".mpg") || ext[S$0.$endsWith](".mpeg") || ext[S$0.$endsWith](".3gp");
    }
    static isImage(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".jpg") || ext[S$0.$endsWith](".jpeg") || ext[S$0.$endsWith](".png") || ext[S$0.$endsWith](".gif") || ext[S$0.$endsWith](".bmp");
    }
    static isAudio(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".mp3") || ext[S$0.$endsWith](".wav") || ext[S$0.$endsWith](".wma") || ext[S$0.$endsWith](".amr") || ext[S$0.$endsWith](".ogg");
    }
    static isPPT(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".ppt") || ext[S$0.$endsWith](".pptx");
    }
    static isWord(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".doc") || ext[S$0.$endsWith](".docx");
    }
    static isExcel(filePath) {
      let ext = filePath[S$.$toLowerCase]();
      return ext[S$0.$endsWith](".xls") || ext[S$0.$endsWith](".xlsx");
    }
    static isAPK(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".apk");
    }
    static isPDF(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".pdf");
    }
    static isTxt(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".txt");
    }
    static isChm(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".chm");
    }
    static isVector(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".svg");
    }
    static isHTML(filePath) {
      return filePath[S$.$toLowerCase]()[S$0.$endsWith](".html");
    }
    static isUsername(s) {
      return get_utils$.GetUtils.hasMatch(s, "^[a-zA-Z0-9][a-zA-Z0-9_.]+[a-zA-Z0-9]$");
    }
    static isURL(s) {
      return get_utils$.GetUtils.hasMatch(s, "^((((H|h)(T|t)|(F|f))(T|t)(P|p)((S|s)?))\\://)?(www.|[a-zA-Z0-9].)[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,6}(\\:[0-9]{1,5})*(/($|[a-zA-Z0-9\\.\\,\\;\\?\\'\\\\\\+&amp;%\\$#\\=~_\\-]+))*$");
    }
    static isEmail(s) {
      return get_utils$.GetUtils.hasMatch(s, "^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$");
    }
    static isPhoneNumber(s) {
      if (s.length > 16 || s.length < 9) return false;
      return get_utils$.GetUtils.hasMatch(s, "^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$");
    }
    static isDateTime(s) {
      return get_utils$.GetUtils.hasMatch(s, "^\\d{4}-\\d{2}-\\d{2}[ T]\\d{2}:\\d{2}:\\d{2}.\\d{3}Z?$");
    }
    static isMD5(s) {
      return get_utils$.GetUtils.hasMatch(s, "^[a-f0-9]{32}$");
    }
    static isSHA1(s) {
      return get_utils$.GetUtils.hasMatch(s, "(([A-Fa-f0-9]{2}\\:){19}[A-Fa-f0-9]{2}|[A-Fa-f0-9]{40})");
    }
    static isSHA256(s) {
      return get_utils$.GetUtils.hasMatch(s, "([A-Fa-f0-9]{2}\\:){31}[A-Fa-f0-9]{2}|[A-Fa-f0-9]{64}");
    }
    static isSSN(s) {
      return get_utils$.GetUtils.hasMatch(s, "^(?!0{3}|6{3}|9[0-9]{2})[0-9]{3}-?(?!0{2})[0-9]{2}-?(?!0{4})[0-9]{4}$");
    }
    static isBinary(s) {
      return get_utils$.GetUtils.hasMatch(s, "^[0-1]+$");
    }
    static isIPv4(s) {
      return get_utils$.GetUtils.hasMatch(s, "^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$");
    }
    static isIPv6(s) {
      return get_utils$.GetUtils.hasMatch(s, "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$");
    }
    static isHexadecimal(s) {
      return get_utils$.GetUtils.hasMatch(s, "^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$");
    }
    static isPalindrom(string) {
      let cleanString = string[S$.$toLowerCase]()[S$.$replaceAll](core.RegExp.new("\\s+"), "")[S$.$replaceAll](core.RegExp.new("[^0-9a-zA-Z]+"), "");
      for (let i = 0; i < cleanString.length; i = i + 1) {
        if (cleanString[S$.$_get](i) !== cleanString[S$.$_get](cleanString.length - i - 1)) {
          return false;
        }
      }
      return true;
    }
    static isOneAKind(value) {
      if ((typeof value == 'string' || core.List.is(value)) && !dart.nullCheck(get_utils$.GetUtils.isNullOrBlank(value))) {
        let first = dart.dsend(value, '_get', [0]);
        let len = core.num.as(dart.dload(value, 'length'));
        for (let i = 0; i < len; i = i + 1) {
          if (!dart.equals(dart.dsend(value, '_get', [i]), first)) {
            return false;
          }
        }
        return true;
      }
      if (core.int.is(value)) {
        let stringValue = dart.toString(value);
        let first = stringValue[S$.$_get](0);
        for (let i = 0; i < stringValue.length; i = i + 1) {
          if (stringValue[S$.$_get](i) !== first) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
    static isPassport(s) {
      return get_utils$.GetUtils.hasMatch(s, "^(?!^0+$)[a-zA-Z0-9]{6,9}$");
    }
    static isCurrency(s) {
      return get_utils$.GetUtils.hasMatch(s, "^(S?\\$|\\₩|Rp|\\¥|\\€|\\₹|\\₽|fr|R\\$|R)?[ ]?[-]?([0-9]{1,3}[,.]([0-9]{3}[,.])*[0-9]{3}|[0-9]+)([,.][0-9]{1,2})?( ?(USD?|AUD|NZD|CAD|CHF|GBP|CNY|EUR|JPY|IDR|MXN|NOK|KRW|TRY|INR|RUB|BRL|ZAR|SGD|MYR))?$");
    }
    static isLengthGreaterThan(value, maxLength) {
      let length = get_utils$._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) > maxLength;
    }
    static isLengthGreaterOrEqual(value, maxLength) {
      let length = get_utils$._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) >= maxLength;
    }
    static isLengthLowerThan(value, maxLength) {
      return get_utils$.GetUtils.isLengthLessThan(value, maxLength);
    }
    static isLengthLessThan(value, maxLength) {
      let length = get_utils$._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) < maxLength;
    }
    static isLengthLowerOrEqual(value, maxLength) {
      return get_utils$.GetUtils.isLengthLessOrEqual(value, maxLength);
    }
    static isLengthLessOrEqual(value, maxLength) {
      let length = get_utils$._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return dart.notNull(length) <= maxLength;
    }
    static isLengthEqualTo(value, otherLength) {
      let length = get_utils$._obtainDynamicLength(value);
      if (length == null) {
        return false;
      }
      return length === otherLength;
    }
    static isLengthBetween(value, minLength, maxLength) {
      if (get_utils$.GetUtils.isNull(value)) {
        return false;
      }
      return get_utils$.GetUtils.isLengthGreaterOrEqual(value, minLength) && get_utils$.GetUtils.isLengthLessOrEqual(value, maxLength);
    }
    static isCaseInsensitiveContains(a, b) {
      return a[S$.$toLowerCase]()[S$.$contains](b[S$.$toLowerCase]());
    }
    static isCaseInsensitiveContainsAny(a, b) {
      let lowA = a[S$.$toLowerCase]();
      let lowB = b[S$.$toLowerCase]();
      return lowA[S$.$contains](lowB) || lowB[S$.$contains](lowA);
    }
    static isLowerThan(a, b) {
      return a < b;
    }
    static isGreaterThan(a, b) {
      return a > b;
    }
    static isEqual(a, b) {
      return a === b;
    }
    static isCnpj(cnpj) {
      let t561, t561$;
      let numbers = cnpj[S$.$replaceAll](core.RegExp.new("[^0-9]"), "");
      if (numbers.length !== 14) {
        return false;
      }
      if (core.RegExp.new("^(\\d)\\1*$").hasMatch(numbers)) {
        return false;
      }
      let digits = numbers[S$0.$split]("")[S$.$map](core.int, C[119] || CT.C119)[S$.$toList]();
      let calcDv1 = 0;
      let j = 0;
      let iter = T$.IterableOfint().generate(12, dart.fn(i => i < 4 ? 5 - i : 13 - i, T$.intToint()));
      for (let i of iter) {
        calcDv1 = calcDv1 + digits[S$.$_get]((t561 = j, j = t561 + 1, t561)) * i;
      }
      calcDv1 = calcDv1[S$0.$modulo](11);
      let dv1 = calcDv1 < 2 ? 0 : 11 - calcDv1;
      if (digits[S$.$_get](12) !== dv1) {
        return false;
      }
      let calcDv2 = 0;
      j = 0;
      let iter$ = T$.IterableOfint().generate(13, dart.fn(i => i < 5 ? 6 - i : 14 - i, T$.intToint()));
      for (let i of iter$) {
        calcDv2 = calcDv2 + digits[S$.$_get]((t561$ = j, j = t561$ + 1, t561$)) * i;
      }
      calcDv2 = calcDv2[S$0.$modulo](11);
      let dv2 = calcDv2 < 2 ? 0 : 11 - calcDv2;
      if (digits[S$.$_get](13) !== dv2) {
        return false;
      }
      return true;
    }
    static isCpf(cpf) {
      let numbers = cpf[S$.$replaceAll](core.RegExp.new("[^0-9]"), "");
      if (numbers.length !== 11) {
        return false;
      }
      if (core.RegExp.new("^(\\d)\\1*$").hasMatch(numbers)) {
        return false;
      }
      let digits = numbers[S$0.$split]("")[S$.$map](core.int, C[119] || CT.C119)[S$.$toList]();
      let calcDv1 = 0;
      let iter = T$.IterableOfint().generate(9, dart.fn(i => 10 - i, T$.intToint()));
      for (let i of iter) {
        calcDv1 = calcDv1 + digits[S$.$_get](10 - i) * i;
      }
      calcDv1 = calcDv1[S$0.$modulo](11);
      let dv1 = calcDv1 < 2 ? 0 : 11 - calcDv1;
      if (digits[S$.$_get](9) !== dv1) {
        return false;
      }
      let calcDv2 = 0;
      let iter$ = T$.IterableOfint().generate(10, dart.fn(i => 11 - i, T$.intToint()));
      for (let i of iter$) {
        calcDv2 = calcDv2 + digits[S$.$_get](11 - i) * i;
      }
      calcDv2 = calcDv2[S$0.$modulo](11);
      let dv2 = calcDv2 < 2 ? 0 : 11 - calcDv2;
      if (digits[S$.$_get](10) !== dv2) {
        return false;
      }
      return true;
    }
    static capitalize(value) {
      if (get_utils$.GetUtils.isNull(value)) return null;
      if (dart.nullCheck(get_utils$.GetUtils.isBlank(value))) return value;
      return value[S$0.$split](" ")[S$.$map](T$.StringN(), C[120] || CT.C120)[S$.$join](" ");
    }
    static capitalizeFirst(s) {
      if (get_utils$.GetUtils.isNull(s)) return null;
      if (dart.nullCheck(get_utils$.GetUtils.isBlank(s))) return s;
      return s[S$.$_get](0)[S$0.$toUpperCase]() + s[S$.$substring](1)[S$.$toLowerCase]();
    }
    static removeAllWhitespace(value) {
      return value[S$.$replaceAll](" ", "");
    }
    static camelCase(value) {
      if (dart.nullCheck(get_utils$.GetUtils.isNullOrBlank(value))) {
        return null;
      }
      let separatedWords = value[S$0.$split](core.RegExp.new("[!@#<>?\":`~;[\\]\\\\|=+)(*&^%-\\s_]+"));
      let newString = "";
      for (let word of separatedWords) {
        newString = newString + (word[S$.$_get](0)[S$0.$toUpperCase]() + word[S$.$substring](1)[S$.$toLowerCase]());
      }
      return newString[S$.$_get](0)[S$.$toLowerCase]() + newString[S$.$substring](1);
    }
    static _groupIntoWords(text) {
      let sb = new core.StringBuffer.new();
      let words = T$.JSArrayOfString().of([]);
      let isAllCaps = text[S$0.$toUpperCase]() === text;
      for (let i = 0; i < text.length; i = i + 1) {
        let char = text[S$.$_get](i);
        let nextChar = i + 1 === text.length ? null : text[S$.$_get](i + 1);
        if (get_utils$.GetUtils._symbolSet.contains(char)) {
          continue;
        }
        sb.write(char);
        let isEndOfWord = nextChar == null || get_utils$.GetUtils._upperAlphaRegex.hasMatch(nextChar) && !isAllCaps || get_utils$.GetUtils._symbolSet.contains(nextChar);
        if (isEndOfWord) {
          words[S$.$add](dart.str(sb));
          sb.clear();
        }
      }
      return words;
    }
    static snakeCase(text, opts) {
      let separator = opts && 'separator' in opts ? opts.separator : "_";
      if (dart.nullCheck(get_utils$.GetUtils.isNullOrBlank(text))) {
        return null;
      }
      return get_utils$.GetUtils._groupIntoWords(dart.nullCheck(text))[S$.$map](core.String, dart.fn(word => word[S$.$toLowerCase](), T$.StringToString()))[S$.$join](separator);
    }
    static paramCase(text) {
      return get_utils$.GetUtils.snakeCase(text, {separator: "-"});
    }
    static numericOnly(s, opts) {
      let firstWordOnly = opts && 'firstWordOnly' in opts ? opts.firstWordOnly : false;
      let numericOnlyStr = "";
      for (let i = 0; i < s.length; i = i + 1) {
        if (get_utils$.GetUtils.isNumericOnly(s[S$.$_get](i))) {
          numericOnlyStr = numericOnlyStr + s[S$.$_get](i);
        }
        if (firstWordOnly && numericOnlyStr[S$.$isNotEmpty] && s[S$.$_get](i) === " ") {
          break;
        }
      }
      return numericOnlyStr;
    }
    static hasMatch(value, pattern) {
      return value == null ? false : core.RegExp.new(pattern).hasMatch(value);
    }
    static createPath(path, segments = null) {
      if (segments == null || segments[S$.$isEmpty]) {
        return path;
      }
      let list = segments[S$.$map](core.String, dart.fn(e => "/" + dart.str(e), T$.dynamicToString()));
      return path + list[S$.$join]();
    }
    static printFunction(prefix, value, info, opts) {
      let t563, t562, t561;
      let isError = opts && 'isError' in opts ? opts.isError : false;
      t561 = get_main.Get;
      t562 = (prefix + " " + dart.str(value) + " " + info)[S$0.$trim]();
      t563 = isError;
      t561.log(t562, {isError: t563});
    }
  };
  (get_utils$.GetUtils.__ = function() {
    ;
  }).prototype = get_utils$.GetUtils.prototype;
  dart.addTypeTests(get_utils$.GetUtils);
  dart.addTypeCaches(get_utils$.GetUtils);
  dart.setStaticMethodSignature(get_utils$.GetUtils, () => ['isNull', 'nil', 'isNullOrBlank', 'isBlank', 'isNum', 'isNumericOnly', 'isAlphabetOnly', 'hasCapitalletter', 'isBool', 'isVideo', 'isImage', 'isAudio', 'isPPT', 'isWord', 'isExcel', 'isAPK', 'isPDF', 'isTxt', 'isChm', 'isVector', 'isHTML', 'isUsername', 'isURL', 'isEmail', 'isPhoneNumber', 'isDateTime', 'isMD5', 'isSHA1', 'isSHA256', 'isSSN', 'isBinary', 'isIPv4', 'isIPv6', 'isHexadecimal', 'isPalindrom', 'isOneAKind', 'isPassport', 'isCurrency', 'isLengthGreaterThan', 'isLengthGreaterOrEqual', 'isLengthLowerThan', 'isLengthLessThan', 'isLengthLowerOrEqual', 'isLengthLessOrEqual', 'isLengthEqualTo', 'isLengthBetween', 'isCaseInsensitiveContains', 'isCaseInsensitiveContainsAny', 'isLowerThan', 'isGreaterThan', 'isEqual', 'isCnpj', 'isCpf', 'capitalize', 'capitalizeFirst', 'removeAllWhitespace', 'camelCase', '_groupIntoWords', 'snakeCase', 'paramCase', 'numericOnly', 'hasMatch', 'createPath', 'printFunction']);
  dart.setLibraryUri(get_utils$.GetUtils, I[59]);
  dart.setStaticFieldSignature(get_utils$.GetUtils, () => ['_upperAlphaRegex', '_symbolSet']);
  dart.defineLazy(get_utils$.GetUtils, {
    /*get_utils$.GetUtils._upperAlphaRegex*/get _upperAlphaRegex() {
      return core.RegExp.new("[A-Z]");
    },
    /*get_utils$.GetUtils._symbolSet*/get _symbolSet() {
      return T$.LinkedHashSetOfString().from([" ", ".", "/", "_", "\\", "-"]);
    }
  }, false);
  get_utils$._isEmpty = function _isEmpty(value) {
    if (typeof value == 'string') {
      return dart.toString(value)[S$0.$trim]()[S$.$isEmpty];
    }
    if (core.Iterable.is(value) || core.Map.is(value)) {
      return T$.boolN().as(dart.dload(value, 'isEmpty'));
    }
    return false;
  };
  get_utils$._hasLength = function _hasLength(value) {
    return core.Iterable.is(value) || typeof value == 'string' || core.Map.is(value);
  };
  get_utils$._obtainDynamicLength = function _obtainDynamicLength(value) {
    if (value == null) {
      return null;
    }
    if (get_utils$._hasLength(value)) {
      return T$.intN().as(dart.dload(value, 'length'));
    }
    if (core.int.is(value)) {
      return dart.toString(value).length;
    }
    if (typeof value == 'number') {
      return dart.toString(value)[S$.$replaceAll](".", "").length;
    }
    return null;
  };
  platform$.GetPlatform = class GetPlatform extends core.Object {
    static get isWeb() {
      return platform_web.GeneralPlatform.isWeb;
    }
    static get isMacOS() {
      return platform_web.GeneralPlatform.isMacOS;
    }
    static get isWindows() {
      return platform_web.GeneralPlatform.isWindows;
    }
    static get isLinux() {
      return platform_web.GeneralPlatform.isLinux;
    }
    static get isAndroid() {
      return platform_web.GeneralPlatform.isAndroid;
    }
    static get isIOS() {
      return platform_web.GeneralPlatform.isIOS;
    }
    static get isFuchsia() {
      return platform_web.GeneralPlatform.isFuchsia;
    }
    static get isMobile() {
      return platform$.GetPlatform.isIOS || platform$.GetPlatform.isAndroid;
    }
    static get isDesktop() {
      return platform$.GetPlatform.isMacOS || platform$.GetPlatform.isWindows || platform$.GetPlatform.isLinux;
    }
    static ['_#new#tearOff']() {
      return new platform$.GetPlatform.new();
    }
  };
  (platform$.GetPlatform.new = function() {
    ;
  }).prototype = platform$.GetPlatform.prototype;
  dart.addTypeTests(platform$.GetPlatform);
  dart.addTypeCaches(platform$.GetPlatform);
  dart.setStaticGetterSignature(platform$.GetPlatform, () => ['isWeb', 'isMacOS', 'isWindows', 'isLinux', 'isAndroid', 'isIOS', 'isFuchsia', 'isMobile', 'isDesktop']);
  dart.setLibraryUri(platform$.GetPlatform, I[60]);
  get_queue.GetMicrotask = class GetMicrotask extends core.Object {
    get microtask() {
      return this[S$0._microtask];
    }
    get version() {
      return this[S$0._version];
    }
    exec(callback) {
      if (this[S$0._microtask] === this[S$0._version]) {
        this[S$0._microtask] = this[S$0._microtask] + 1;
        async.scheduleMicrotask(dart.fn(() => {
          this[S$0._version] = this[S$0._version] + 1;
          this[S$0._microtask] = this[S$0._version];
          dart.dcall(callback, []);
        }, T$.VoidTovoid()));
      }
    }
    static ['_#new#tearOff']() {
      return new get_queue.GetMicrotask.new();
    }
  };
  (get_queue.GetMicrotask.new = function() {
    this[S$0._version] = 0;
    this[S$0._microtask] = 0;
    ;
  }).prototype = get_queue.GetMicrotask.prototype;
  dart.addTypeTests(get_queue.GetMicrotask);
  dart.addTypeCaches(get_queue.GetMicrotask);
  dart.setMethodSignature(get_queue.GetMicrotask, () => ({
    __proto__: dart.getMethods(get_queue.GetMicrotask.__proto__),
    exec: dart.fnType(dart.void, [core.Function])
  }));
  dart.setGetterSignature(get_queue.GetMicrotask, () => ({
    __proto__: dart.getGetters(get_queue.GetMicrotask.__proto__),
    microtask: core.int,
    version: core.int
  }));
  dart.setLibraryUri(get_queue.GetMicrotask, I[61]);
  dart.setFieldSignature(get_queue.GetMicrotask, () => ({
    __proto__: dart.getFields(get_queue.GetMicrotask.__proto__),
    [S$0._version]: dart.fieldType(core.int),
    [S$0._microtask]: dart.fieldType(core.int)
  }));
  get_queue.GetQueue = class GetQueue extends core.Object {
    add(T, job) {
      let completer = async.Completer$(T).new();
      this[S$0._queue$1][S$.$add](new get_queue._Item.new(completer, job));
      this[S$0._check]();
      return completer.future;
    }
    cancelAllJobs() {
      this[S$0._queue$1][S$.$clear]();
    }
    [S$0._check]() {
      return async.async(dart.void, (function* _check() {
        if (!this[S$0._active] && this[S$0._queue$1][S$.$isNotEmpty]) {
          this[S$0._active] = true;
          let item = this[S$0._queue$1][S$.$removeAt](0);
          try {
            dart.dsend(item.completer, 'complete', [(yield dart.dsend(item, 'job', []))]);
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Exception.is(e)) {
              dart.dsend(item.completer, 'completeError', [e]);
            } else
              throw e$;
          }
          this[S$0._active] = false;
          this[S$0._check]();
        }
      }).bind(this));
    }
    static ['_#new#tearOff']() {
      return new get_queue.GetQueue.new();
    }
  };
  (get_queue.GetQueue.new = function() {
    this[S$0._queue$1] = T$.JSArrayOf_Item().of([]);
    this[S$0._active] = false;
    ;
  }).prototype = get_queue.GetQueue.prototype;
  dart.addTypeTests(get_queue.GetQueue);
  dart.addTypeCaches(get_queue.GetQueue);
  dart.setMethodSignature(get_queue.GetQueue, () => ({
    __proto__: dart.getMethods(get_queue.GetQueue.__proto__),
    add: dart.gFnType(T => [async.Future$(T), [core.Function]], T => [dart.nullable(core.Object)]),
    cancelAllJobs: dart.fnType(dart.void, []),
    [S$0._check]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(get_queue.GetQueue, I[61]);
  dart.setFieldSignature(get_queue.GetQueue, () => ({
    __proto__: dart.getFields(get_queue.GetQueue.__proto__),
    [S$0._queue$1]: dart.finalFieldType(core.List$(get_queue._Item)),
    [S$0._active]: dart.fieldType(core.bool)
  }));
  get_queue._Item = class _Item extends core.Object {
    static ['_#new#tearOff'](completer, job) {
      return new get_queue._Item.new(completer, job);
    }
  };
  (get_queue._Item.new = function(completer, job) {
    this.completer = completer;
    this.job = job;
    ;
  }).prototype = get_queue._Item.prototype;
  dart.addTypeTests(get_queue._Item);
  dart.addTypeCaches(get_queue._Item);
  dart.setLibraryUri(get_queue._Item, I[61]);
  dart.setFieldSignature(get_queue._Item, () => ({
    __proto__: dart.getFields(get_queue._Item.__proto__),
    completer: dart.finalFieldType(dart.dynamic),
    job: dart.finalFieldType(dart.dynamic)
  }));
  const _is_Request_default = Symbol('_is_Request_default');
  request$.Request$ = dart.generic(T => {
    var __t$dynamicToT = () => (__t$dynamicToT = dart.constFn(dart.fnType(T, [dart.dynamic])))();
    var __t$dynamicToNT = () => (__t$dynamicToNT = dart.constFn(dart.nullable(__t$dynamicToT())))();
    var __t$RequestOfT = () => (__t$RequestOfT = dart.constFn(request$.Request$(T)))();
    class Request extends core.Object {
      get headers() {
        return this[S$0.headers$1];
      }
      set headers(value) {
        super.headers = value;
      }
      get url() {
        return this[S$0.url$1];
      }
      set url(value) {
        super.url = value;
      }
      get decoder() {
        return this[S$0.decoder];
      }
      set decoder(value) {
        super.decoder = value;
      }
      get method() {
        return this[S$0.method];
      }
      set method(value) {
        super.method = value;
      }
      get contentLength() {
        return this[S$0.contentLength];
      }
      set contentLength(value) {
        super.contentLength = value;
      }
      get bodyBytes() {
        return this[S$0.bodyBytes$1];
      }
      set bodyBytes(value) {
        super.bodyBytes = value;
      }
      get followRedirects() {
        return this[S$0.followRedirects$2];
      }
      set followRedirects(value) {
        super.followRedirects = value;
      }
      get maxRedirects() {
        return this[S$0.maxRedirects$2];
      }
      set maxRedirects(value) {
        super.maxRedirects = value;
      }
      get persistentConnection() {
        return this[S$0.persistentConnection];
      }
      set persistentConnection(value) {
        super.persistentConnection = value;
      }
      get files() {
        return this[S$0.files$1];
      }
      set files(value) {
        super.files = value;
      }
      static ['_#_#tearOff'](T, opts) {
        let method = opts && 'method' in opts ? opts.method : null;
        let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
        let url = opts && 'url' in opts ? opts.url : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
        let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
        let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
        let files = opts && 'files' in opts ? opts.files : null;
        let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
        let decoder = opts && 'decoder' in opts ? opts.decoder : null;
        return new (request$.Request$(T)).__({method: method, bodyBytes: bodyBytes, url: url, headers: headers, contentLength: contentLength, followRedirects: followRedirects, maxRedirects: maxRedirects, files: files, persistentConnection: persistentConnection, decoder: decoder});
      }
      static new(opts) {
        let t562;
        let url = opts && 'url' in opts ? opts.url : null;
        let method = opts && 'method' in opts ? opts.method : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
        let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
        let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 4;
        let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
        let files = opts && 'files' in opts ? opts.files : null;
        let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
        let decoder = opts && 'decoder' in opts ? opts.decoder : null;
        if (followRedirects) {
          if (!(maxRedirects > 0)) dart.assertFailed(null, I[62], 62, 14, "maxRedirects > 0");
        }
        return new (request$.Request$(T)).__({url: url, method: method, bodyBytes: (t562 = bodyBytes, t562 == null ? bodyBytes = request$['BodyBytesStream|fromBytes'](C[121] || CT.C121) : t562), headers: T$.LinkedHashMapOfString$String().from(headers), followRedirects: followRedirects, maxRedirects: maxRedirects, contentLength: contentLength, files: files, persistentConnection: persistentConnection, decoder: decoder});
      }
      static ['_#new#tearOff'](T, opts) {
        let url = opts && 'url' in opts ? opts.url : null;
        let method = opts && 'method' in opts ? opts.method : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
        let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : true;
        let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : 4;
        let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
        let files = opts && 'files' in opts ? opts.files : null;
        let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : true;
        let decoder = opts && 'decoder' in opts ? opts.decoder : null;
        return request$.Request$(T).new({url: url, method: method, headers: headers, bodyBytes: bodyBytes, followRedirects: followRedirects, maxRedirects: maxRedirects, contentLength: contentLength, files: files, persistentConnection: persistentConnection, decoder: decoder});
      }
      copyWith(opts) {
        let t562, t562$, t562$0, t562$1, t562$2, t562$3, t562$4, t562$5, t562$6;
        let url = opts && 'url' in opts ? opts.url : null;
        let method = opts && 'method' in opts ? opts.method : null;
        let headers = opts && 'headers' in opts ? opts.headers : null;
        let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
        let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
        let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
        let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
        let files = opts && 'files' in opts ? opts.files : null;
        let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
        let decoder = opts && 'decoder' in opts ? opts.decoder : null;
        __t$dynamicToNT().as(decoder);
        let appendHeader = opts && 'appendHeader' in opts ? opts.appendHeader : true;
        if (appendHeader && headers != null) {
          headers[S$.$addAll](this.headers);
        }
        return new (__t$RequestOfT()).__({url: (t562 = url, t562 == null ? this.url : t562), method: (t562$ = method, t562$ == null ? this.method : t562$), bodyBytes: (t562$0 = bodyBytes, t562$0 == null ? this.bodyBytes : t562$0), headers: headers == null ? this.headers : T$.LinkedHashMapOfString$String().from(headers), followRedirects: (t562$1 = followRedirects, t562$1 == null ? this.followRedirects : t562$1), maxRedirects: (t562$2 = maxRedirects, t562$2 == null ? this.maxRedirects : t562$2), contentLength: (t562$3 = contentLength, t562$3 == null ? this.contentLength : t562$3), files: (t562$4 = files, t562$4 == null ? this.files : t562$4), persistentConnection: (t562$5 = persistentConnection, t562$5 == null ? this.persistentConnection : t562$5), decoder: (t562$6 = decoder, t562$6 == null ? this.decoder : t562$6)});
      }
    }
    (Request.__ = function(opts) {
      let method = opts && 'method' in opts ? opts.method : null;
      let bodyBytes = opts && 'bodyBytes' in opts ? opts.bodyBytes : null;
      let url = opts && 'url' in opts ? opts.url : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let contentLength = opts && 'contentLength' in opts ? opts.contentLength : null;
      let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
      let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
      let files = opts && 'files' in opts ? opts.files : null;
      let persistentConnection = opts && 'persistentConnection' in opts ? opts.persistentConnection : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      this[S$0.method] = method;
      this[S$0.bodyBytes$1] = bodyBytes;
      this[S$0.url$1] = url;
      this[S$0.headers$1] = headers;
      this[S$0.contentLength] = contentLength;
      this[S$0.followRedirects$2] = followRedirects;
      this[S$0.maxRedirects$2] = maxRedirects;
      this[S$0.files$1] = files;
      this[S$0.persistentConnection] = persistentConnection;
      this[S$0.decoder] = decoder;
      ;
    }).prototype = Request.prototype;
    dart.addTypeTests(Request);
    Request.prototype[_is_Request_default] = true;
    dart.addTypeCaches(Request);
    dart.setMethodSignature(Request, () => ({
      __proto__: dart.getMethods(Request.__proto__),
      copyWith: dart.fnType(request$.Request$(T), [], {appendHeader: core.bool, bodyBytes: dart.nullable(async.Stream$(core.List$(core.int))), contentLength: dart.nullable(core.int), decoder: dart.nullable(core.Object), files: dart.nullable(form_data.FormData), followRedirects: dart.nullable(core.bool), headers: dart.nullable(core.Map$(core.String, core.String)), maxRedirects: dart.nullable(core.int), method: dart.nullable(core.String), persistentConnection: dart.nullable(core.bool), url: dart.nullable(core.Uri)}, {})
    }));
    dart.setStaticMethodSignature(Request, () => ['new']);
    dart.setLibraryUri(Request, I[63]);
    dart.setFieldSignature(Request, () => ({
      __proto__: dart.getFields(Request.__proto__),
      headers: dart.finalFieldType(core.Map$(core.String, core.String)),
      url: dart.finalFieldType(core.Uri),
      decoder: dart.finalFieldType(dart.nullable(dart.fnType(T, [dart.dynamic]))),
      method: dart.finalFieldType(core.String),
      contentLength: dart.finalFieldType(dart.nullable(core.int)),
      bodyBytes: dart.finalFieldType(async.Stream$(core.List$(core.int))),
      followRedirects: dart.finalFieldType(core.bool),
      maxRedirects: dart.finalFieldType(core.int),
      persistentConnection: dart.finalFieldType(core.bool),
      files: dart.finalFieldType(dart.nullable(form_data.FormData))
    }));
    return Request;
  });
  request$.Request = request$.Request$();
  dart.addTypeTests(request$.Request, _is_Request_default);
  request$['BodyBytesStream|fromBytes'] = function BodyBytesStream$124fromBytes(bytes) {
    return T$.StreamOfListOfint().fromIterable(T$.JSArrayOfListOfint().of([bytes]));
  };
  request$['BodyBytesStream|toBytes'] = function BodyBytesStream$124toBytes($this) {
    let completer = T$.CompleterOfUint8List().new();
    let sink = new convert._ByteCallbackSink.new(dart.fn(bytes => completer.complete(_native_typed_data.NativeUint8List.fromList(bytes)), T$.ListOfintTovoid()));
    $this.listen(dart.fn(val => sink.add(val), T$.ListOfintTovoid()), {onError: dart.bind(completer, 'completeError'), onDone: dart.bind(sink, 'close'), cancelOnError: true});
    return completer.future;
  };
  request$['BodyBytesStream|get#toBytes'] = function BodyBytesStream$124get$35toBytes($this) {
    return dart.fn(() => request$['BodyBytesStream|toBytes']($this), T$.VoidToFutureOfUint8List());
  };
  request$['BodyBytesStream|bytesToString'] = function BodyBytesStream$124bytesToString($this, encoding = C[4] || CT.C4) {
    return encoding.decodeStream($this);
  };
  request$['BodyBytesStream|get#bytesToString'] = function BodyBytesStream$124get$35bytesToString($this) {
    return dart.fn((encoding = C[4] || CT.C4) => request$['BodyBytesStream|bytesToString']($this, encoding), T$.EncodingToFutureOfString());
  };
  http_status.HttpStatus = class HttpStatus extends core.Object {
    get code() {
      return this[S$0.code$1];
    }
    set code(value) {
      super.code = value;
    }
    static ['_#new#tearOff'](code) {
      return new http_status.HttpStatus.new(code);
    }
    get connectionError() {
      return this.code == null;
    }
    get isUnauthorized() {
      return this.code === 401;
    }
    get isForbidden() {
      return this.code === 403;
    }
    get isNotFound() {
      return this.code === 404;
    }
    get isServerError() {
      return this.between(500, 599);
    }
    between(begin, end) {
      return !this.connectionError && dart.nullCheck(this.code) >= begin && dart.nullCheck(this.code) <= end;
    }
    get isOk() {
      return this.between(200, 299);
    }
    get hasError() {
      return !this.isOk;
    }
  };
  (http_status.HttpStatus.new = function(code) {
    this[S$0.code$1] = code;
    ;
  }).prototype = http_status.HttpStatus.prototype;
  dart.addTypeTests(http_status.HttpStatus);
  dart.addTypeCaches(http_status.HttpStatus);
  dart.setMethodSignature(http_status.HttpStatus, () => ({
    __proto__: dart.getMethods(http_status.HttpStatus.__proto__),
    between: dart.fnType(core.bool, [core.int, core.int])
  }));
  dart.setGetterSignature(http_status.HttpStatus, () => ({
    __proto__: dart.getGetters(http_status.HttpStatus.__proto__),
    connectionError: core.bool,
    isUnauthorized: core.bool,
    isForbidden: core.bool,
    isNotFound: core.bool,
    isServerError: core.bool,
    isOk: core.bool,
    hasError: core.bool
  }));
  dart.setLibraryUri(http_status.HttpStatus, I[64]);
  dart.setFieldSignature(http_status.HttpStatus, () => ({
    __proto__: dart.getFields(http_status.HttpStatus.__proto__),
    code: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.setStaticFieldSignature(http_status.HttpStatus, () => ['continue__', 'switchingProtocols', 'processing', 'earlyHints', 'ok', 'created', 'accepted', 'nonAuthoritativeInformation', 'noContent', 'resetContent', 'partialContent', 'multiStatus', 'alreadyReported', 'imUsed', 'multipleChoices', 'movedPermanently', 'found', 'movedTemporarily', 'seeOther', 'notModified', 'useProxy', 'switchProxy', 'temporaryRedirect', 'permanentRedirect', 'badRequest', 'unauthorized', 'paymentRequired', 'forbidden', 'notFound', 'methodNotAllowed', 'notAcceptable', 'proxyAuthenticationRequired', 'requestTimeout', 'conflict', 'gone', 'lengthRequired', 'preconditionFailed', 'requestEntityTooLarge', 'requestUriTooLong', 'unsupportedMediaType', 'requestedRangeNotSatisfiable', 'expectationFailed', 'imATeapot', 'misdirectedRequest', 'unprocessableEntity', 'locked', 'failedDependency', 'tooEarly', 'upgradeRequired', 'preconditionRequired', 'tooManyRequests', 'requestHeaderFieldsTooLarge', 'connectionClosedWithoutResponse', 'unavailableForLegalReasons', 'clientClosedRequest', 'internalServerError', 'notImplemented', 'badGateway', 'serviceUnavailable', 'gatewayTimeout', 'httpVersionNotSupported', 'variantAlsoNegotiates', 'insufficientStorage', 'loopDetected', 'notExtended', 'networkAuthenticationRequired', 'networkConnectTimeoutError']);
  dart.defineLazy(http_status.HttpStatus, {
    /*http_status.HttpStatus.continue__*/get continue__() {
      return 100;
    },
    /*http_status.HttpStatus.switchingProtocols*/get switchingProtocols() {
      return 101;
    },
    /*http_status.HttpStatus.processing*/get processing() {
      return 102;
    },
    /*http_status.HttpStatus.earlyHints*/get earlyHints() {
      return 103;
    },
    /*http_status.HttpStatus.ok*/get ok() {
      return 200;
    },
    /*http_status.HttpStatus.created*/get created() {
      return 201;
    },
    /*http_status.HttpStatus.accepted*/get accepted() {
      return 202;
    },
    /*http_status.HttpStatus.nonAuthoritativeInformation*/get nonAuthoritativeInformation() {
      return 203;
    },
    /*http_status.HttpStatus.noContent*/get noContent() {
      return 204;
    },
    /*http_status.HttpStatus.resetContent*/get resetContent() {
      return 205;
    },
    /*http_status.HttpStatus.partialContent*/get partialContent() {
      return 206;
    },
    /*http_status.HttpStatus.multiStatus*/get multiStatus() {
      return 207;
    },
    /*http_status.HttpStatus.alreadyReported*/get alreadyReported() {
      return 208;
    },
    /*http_status.HttpStatus.imUsed*/get imUsed() {
      return 226;
    },
    /*http_status.HttpStatus.multipleChoices*/get multipleChoices() {
      return 300;
    },
    /*http_status.HttpStatus.movedPermanently*/get movedPermanently() {
      return 301;
    },
    /*http_status.HttpStatus.found*/get found() {
      return 302;
    },
    /*http_status.HttpStatus.movedTemporarily*/get movedTemporarily() {
      return 302;
    },
    /*http_status.HttpStatus.seeOther*/get seeOther() {
      return 303;
    },
    /*http_status.HttpStatus.notModified*/get notModified() {
      return 304;
    },
    /*http_status.HttpStatus.useProxy*/get useProxy() {
      return 305;
    },
    /*http_status.HttpStatus.switchProxy*/get switchProxy() {
      return 306;
    },
    /*http_status.HttpStatus.temporaryRedirect*/get temporaryRedirect() {
      return 307;
    },
    /*http_status.HttpStatus.permanentRedirect*/get permanentRedirect() {
      return 308;
    },
    /*http_status.HttpStatus.badRequest*/get badRequest() {
      return 400;
    },
    /*http_status.HttpStatus.unauthorized*/get unauthorized() {
      return 401;
    },
    /*http_status.HttpStatus.paymentRequired*/get paymentRequired() {
      return 402;
    },
    /*http_status.HttpStatus.forbidden*/get forbidden() {
      return 403;
    },
    /*http_status.HttpStatus.notFound*/get notFound() {
      return 404;
    },
    /*http_status.HttpStatus.methodNotAllowed*/get methodNotAllowed() {
      return 405;
    },
    /*http_status.HttpStatus.notAcceptable*/get notAcceptable() {
      return 406;
    },
    /*http_status.HttpStatus.proxyAuthenticationRequired*/get proxyAuthenticationRequired() {
      return 407;
    },
    /*http_status.HttpStatus.requestTimeout*/get requestTimeout() {
      return 408;
    },
    /*http_status.HttpStatus.conflict*/get conflict() {
      return 409;
    },
    /*http_status.HttpStatus.gone*/get gone() {
      return 410;
    },
    /*http_status.HttpStatus.lengthRequired*/get lengthRequired() {
      return 411;
    },
    /*http_status.HttpStatus.preconditionFailed*/get preconditionFailed() {
      return 412;
    },
    /*http_status.HttpStatus.requestEntityTooLarge*/get requestEntityTooLarge() {
      return 413;
    },
    /*http_status.HttpStatus.requestUriTooLong*/get requestUriTooLong() {
      return 414;
    },
    /*http_status.HttpStatus.unsupportedMediaType*/get unsupportedMediaType() {
      return 415;
    },
    /*http_status.HttpStatus.requestedRangeNotSatisfiable*/get requestedRangeNotSatisfiable() {
      return 416;
    },
    /*http_status.HttpStatus.expectationFailed*/get expectationFailed() {
      return 417;
    },
    /*http_status.HttpStatus.imATeapot*/get imATeapot() {
      return 418;
    },
    /*http_status.HttpStatus.misdirectedRequest*/get misdirectedRequest() {
      return 421;
    },
    /*http_status.HttpStatus.unprocessableEntity*/get unprocessableEntity() {
      return 422;
    },
    /*http_status.HttpStatus.locked*/get locked() {
      return 423;
    },
    /*http_status.HttpStatus.failedDependency*/get failedDependency() {
      return 424;
    },
    /*http_status.HttpStatus.tooEarly*/get tooEarly() {
      return 425;
    },
    /*http_status.HttpStatus.upgradeRequired*/get upgradeRequired() {
      return 426;
    },
    /*http_status.HttpStatus.preconditionRequired*/get preconditionRequired() {
      return 428;
    },
    /*http_status.HttpStatus.tooManyRequests*/get tooManyRequests() {
      return 429;
    },
    /*http_status.HttpStatus.requestHeaderFieldsTooLarge*/get requestHeaderFieldsTooLarge() {
      return 431;
    },
    /*http_status.HttpStatus.connectionClosedWithoutResponse*/get connectionClosedWithoutResponse() {
      return 444;
    },
    /*http_status.HttpStatus.unavailableForLegalReasons*/get unavailableForLegalReasons() {
      return 451;
    },
    /*http_status.HttpStatus.clientClosedRequest*/get clientClosedRequest() {
      return 499;
    },
    /*http_status.HttpStatus.internalServerError*/get internalServerError() {
      return 500;
    },
    /*http_status.HttpStatus.notImplemented*/get notImplemented() {
      return 501;
    },
    /*http_status.HttpStatus.badGateway*/get badGateway() {
      return 502;
    },
    /*http_status.HttpStatus.serviceUnavailable*/get serviceUnavailable() {
      return 503;
    },
    /*http_status.HttpStatus.gatewayTimeout*/get gatewayTimeout() {
      return 504;
    },
    /*http_status.HttpStatus.httpVersionNotSupported*/get httpVersionNotSupported() {
      return 505;
    },
    /*http_status.HttpStatus.variantAlsoNegotiates*/get variantAlsoNegotiates() {
      return 506;
    },
    /*http_status.HttpStatus.insufficientStorage*/get insufficientStorage() {
      return 507;
    },
    /*http_status.HttpStatus.loopDetected*/get loopDetected() {
      return 508;
    },
    /*http_status.HttpStatus.notExtended*/get notExtended() {
      return 510;
    },
    /*http_status.HttpStatus.networkAuthenticationRequired*/get networkAuthenticationRequired() {
      return 511;
    },
    /*http_status.HttpStatus.networkConnectTimeoutError*/get networkConnectTimeoutError() {
      return 599;
    }
  }, false);
  _http_request_html.HttpRequestImpl = class HttpRequestImpl extends core.Object {
    get withCredentials() {
      return this[S$0.withCredentials$1];
    }
    set withCredentials(value) {
      super.withCredentials = value;
    }
    get timeout() {
      return this[S$0.timeout$2];
    }
    set timeout(value) {
      this[S$0.timeout$2] = value;
    }
    static ['_#new#tearOff'](opts) {
      let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : true;
      let trustedCertificates = opts && 'trustedCertificates' in opts ? opts.trustedCertificates : null;
      let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
      let findProxy = opts && 'findProxy' in opts ? opts.findProxy : null;
      return new _http_request_html.HttpRequestImpl.new({allowAutoSignedCert: allowAutoSignedCert, trustedCertificates: trustedCertificates, withCredentials: withCredentials, findProxy: findProxy});
    }
    send(T, request) {
      return async.async(response$.Response$(T), (function* send() {
        let t567, t566, t566$;
        let bytes = (yield request$['BodyBytesStream|toBytes'](request.bodyBytes));
        let xhr = null;
        xhr = (t566 = html.HttpRequest.new(), (() => {
          t566.timeout = (t567 = this.timeout, t567 == null ? null : t567.inMilliseconds);
          t566.open(request.method, dart.str(request.url), {async: true});
          return t566;
        })());
        this[S$0._xhrs].add(xhr);
        t566$ = xhr;
        (() => {
          t566$[S$0.$responseType] = "blob";
          t566$.withCredentials = this.withCredentials;
          return t566$;
        })();
        request.headers[S$.$forEach](dart.bind(xhr, 'setRequestHeader'));
        let completer = async.Completer$(response$.Response$(T)).new();
        xhr[S$0.$onLoad].first.then(core.Null, dart.fn(_ => {
          let t566;
          let blob = (t566 = T$.BlobN().as(xhr[S$0.$response]), t566 == null ? html.Blob.new([]) : t566);
          let reader = html.FileReader.new();
          reader[S$0.$onLoad].first.then(core.Null, dart.fn(_ => async.async(core.Null, function*() {
            let bodyBytes = request$['BodyBytesStream|fromBytes'](T$.ListOfint().as(reader[S$0.$result]));
            let stringBody = (yield response$.bodyBytesToString(bodyBytes, xhr[S$0.$responseHeaders]));
            let contentType = null;
            if (xhr[S$0.$responseHeaders][S$.$containsKey]("content-type")) {
              contentType = xhr[S$0.$responseHeaders][S$.$_get]("content-type");
            } else {
              contentType = "application/json";
            }
            let body = body_decoder.bodyDecoded(T, request, stringBody, contentType);
            let response = new (response$.Response$(T)).new({bodyBytes: bodyBytes, statusCode: xhr.status, request: request, headers: xhr[S$0.$responseHeaders], statusText: xhr.statusText, body: body, bodyString: stringBody});
            completer.complete(response);
          }), T$.ProgressEventToFutureOfNull()));
          reader[S$.$onError].first.then(core.Null, dart.fn(error => {
            completer.completeError(new exceptions.GetHttpException.new(error[S$.$toString](), request.url), core.StackTrace.current);
          }, T$.ProgressEventToNull()));
          reader.readAsArrayBuffer(blob);
        }, T$.ProgressEventToNull()));
        xhr[S$.$onError].first.then(core.Null, dart.fn(_ => {
          completer.completeError(new exceptions.GetHttpException.new("XMLHttpRequest error.", request.url), core.StackTrace.current);
        }, T$.ProgressEventToNull()));
        xhr.send(bytes);
        try {
          return yield completer.future;
        } finally {
          this[S$0._xhrs].remove(xhr);
        }
      }).bind(this));
    }
    close() {
      for (let xhr of this[S$0._xhrs]) {
        xhr.abort();
      }
    }
  };
  (_http_request_html.HttpRequestImpl.new = function(opts) {
    let allowAutoSignedCert = opts && 'allowAutoSignedCert' in opts ? opts.allowAutoSignedCert : true;
    let trustedCertificates = opts && 'trustedCertificates' in opts ? opts.trustedCertificates : null;
    let withCredentials = opts && 'withCredentials' in opts ? opts.withCredentials : false;
    let findProxy = opts && 'findProxy' in opts ? opts.findProxy : null;
    this[S$0._xhrs] = T$.LinkedHashSetOfHttpRequest().new();
    this[S$0.timeout$2] = null;
    this[S$0.withCredentials$1] = withCredentials;
    ;
  }).prototype = _http_request_html.HttpRequestImpl.prototype;
  dart.addTypeTests(_http_request_html.HttpRequestImpl);
  dart.addTypeCaches(_http_request_html.HttpRequestImpl);
  _http_request_html.HttpRequestImpl[dart.implements] = () => [request_base.HttpRequestBase];
  dart.setMethodSignature(_http_request_html.HttpRequestImpl, () => ({
    __proto__: dart.getMethods(_http_request_html.HttpRequestImpl.__proto__),
    send: dart.gFnType(T => [async.Future$(response$.Response$(T)), [request$.Request$(T)]], T => [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(_http_request_html.HttpRequestImpl, I[65]);
  dart.setFieldSignature(_http_request_html.HttpRequestImpl, () => ({
    __proto__: dart.getFields(_http_request_html.HttpRequestImpl.__proto__),
    [S$0._xhrs]: dart.finalFieldType(core.Set$(html.HttpRequest)),
    withCredentials: dart.finalFieldType(core.bool),
    timeout: dart.fieldType(dart.nullable(core.Duration))
  }));
  request_base.HttpRequestBase = class HttpRequestBase extends core.Object {
    get timeout() {
      return this[S$0.timeout$3];
    }
    set timeout(value) {
      this[S$0.timeout$3] = value;
    }
  };
  (request_base.HttpRequestBase.new = function() {
    this[S$0.timeout$3] = null;
    ;
  }).prototype = request_base.HttpRequestBase.prototype;
  dart.addTypeTests(request_base.HttpRequestBase);
  dart.addTypeCaches(request_base.HttpRequestBase);
  dart.setLibraryUri(request_base.HttpRequestBase, I[66]);
  dart.setFieldSignature(request_base.HttpRequestBase, () => ({
    __proto__: dart.getFields(request_base.HttpRequestBase.__proto__),
    timeout: dart.fieldType(dart.nullable(core.Duration))
  }));
  const _is_GetModifier_default = Symbol('_is_GetModifier_default');
  get_modifiers.GetModifier$ = dart.generic(S => {
    class GetModifier extends core.Object {
      get authenticator() {
        return this[S$0.authenticator];
      }
      set authenticator(value) {
        this[S$0.authenticator] = value;
      }
      addRequestModifier(T, interceptor) {
        this[S$0._requestModifiers][S$.$add](T$.RequestToFutureOrOfRequest().as(interceptor));
      }
      removeRequestModifier(T, interceptor) {
        this[S$0._requestModifiers][S$.$remove](interceptor);
      }
      addResponseModifier(T, interceptor) {
        this[S$0._responseModifiers][S$.$add](T$.RequestAndResponseToFutureOr().as(interceptor));
      }
      removeResponseModifier(T, interceptor) {
        this[S$0._requestModifiers][S$.$remove](interceptor);
      }
      modifyRequest(T, request) {
        return async.async(request$.Request$(T), (function* modifyRequest() {
          let newRequest = request;
          if (this[S$0._requestModifiers][S$.$isNotEmpty]) {
            for (let interceptor of this[S$0._requestModifiers]) {
              newRequest = request$.Request$(T).as(yield interceptor(newRequest));
            }
          }
          return newRequest;
        }).bind(this));
      }
      modifyResponse(T, request, response) {
        return async.async(response$.Response$(T), (function* modifyResponse() {
          let newResponse = response;
          if (this[S$0._responseModifiers][S$.$isNotEmpty]) {
            for (let interceptor of this[S$0._responseModifiers]) {
              newResponse = response$.Response$(T).as(yield interceptor(request, response));
            }
          }
          return newResponse;
        }).bind(this));
      }
      static ['_#new#tearOff'](S) {
        return new (get_modifiers.GetModifier$(S)).new();
      }
    }
    (GetModifier.new = function() {
      this[S$0._requestModifiers] = T$.JSArrayOfRequestToFutureOrOfRequest().of([]);
      this[S$0._responseModifiers] = T$.JSArrayOfRequestAndResponseToFutureOr().of([]);
      this[S$0.authenticator] = null;
      ;
    }).prototype = GetModifier.prototype;
    dart.addTypeTests(GetModifier);
    GetModifier.prototype[_is_GetModifier_default] = true;
    dart.addTypeCaches(GetModifier);
    dart.setMethodSignature(GetModifier, () => ({
      __proto__: dart.getMethods(GetModifier.__proto__),
      addRequestModifier: dart.gFnType(T => [dart.void, [dart.fnType(async.FutureOr$(request$.Request$(T)), [request$.Request$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
      removeRequestModifier: dart.gFnType(T => [dart.void, [dart.fnType(async.FutureOr$(request$.Request$(T)), [request$.Request$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
      addResponseModifier: dart.gFnType(T => [dart.void, [dart.fnType(dart.dynamic, [request$.Request$(dart.nullable(T)), response$.Response$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
      removeResponseModifier: dart.gFnType(T => [dart.void, [dart.fnType(dart.dynamic, [request$.Request$(dart.nullable(T)), response$.Response$(dart.nullable(T))])]], T => [dart.nullable(core.Object)]),
      modifyRequest: dart.gFnType(T => [async.Future$(request$.Request$(T)), [request$.Request$(T)]], T => [dart.nullable(core.Object)]),
      modifyResponse: dart.gFnType(T => [async.Future$(response$.Response$(T)), [request$.Request$(T), response$.Response$(T)]], T => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(GetModifier, I[67]);
    dart.setFieldSignature(GetModifier, () => ({
      __proto__: dart.getFields(GetModifier.__proto__),
      [S$0._requestModifiers]: dart.finalFieldType(core.List$(dart.fnType(async.FutureOr$(request$.Request), [request$.Request]))),
      [S$0._responseModifiers]: dart.finalFieldType(core.List$(dart.fnType(dart.dynamic, [request$.Request, response$.Response]))),
      authenticator: dart.fieldType(dart.nullable(dart.fnType(async.FutureOr$(request$.Request), [request$.Request])))
    }));
    return GetModifier;
  });
  get_modifiers.GetModifier = get_modifiers.GetModifier$();
  dart.addTypeTests(get_modifiers.GetModifier, _is_GetModifier_default);
  sockets_html.ConnectionStatus = class ConnectionStatus extends core._Enum {
    [S$._enumToString]() {
      return "ConnectionStatus." + this[S$._name];
    }
  };
  (sockets_html.ConnectionStatus.new = function(index, name) {
    sockets_html.ConnectionStatus.__proto__.new.call(this, index, name);
    ;
  }).prototype = sockets_html.ConnectionStatus.prototype;
  dart.addTypeTests(sockets_html.ConnectionStatus);
  dart.addTypeCaches(sockets_html.ConnectionStatus);
  dart.setMethodSignature(sockets_html.ConnectionStatus, () => ({
    __proto__: dart.getMethods(sockets_html.ConnectionStatus.__proto__),
    [S$._enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(sockets_html.ConnectionStatus, I[7]);
  dart.setStaticFieldSignature(sockets_html.ConnectionStatus, () => ['values', 'connecting', 'connected', 'closed']);
  dart.defineLazy(sockets_html.ConnectionStatus, {
    /*sockets_html.ConnectionStatus.values*/get values() {
      return C[122] || CT.C122;
    },
    /*sockets_html.ConnectionStatus.connecting*/get connecting() {
      return C[123] || CT.C123;
    },
    /*sockets_html.ConnectionStatus.connected*/get connected() {
      return C[124] || CT.C124;
    },
    /*sockets_html.ConnectionStatus.closed*/get closed() {
      return C[125] || CT.C125;
    }
  }, false);
  utils.CharCode = class CharCode extends core.Object {
    static ['_#new#tearOff']() {
      return new utils.CharCode.new();
    }
  };
  (utils.CharCode.new = function() {
    ;
  }).prototype = utils.CharCode.prototype;
  dart.addTypeTests(utils.CharCode);
  dart.addTypeCaches(utils.CharCode);
  dart.setLibraryUri(utils.CharCode, I[68]);
  dart.setStaticFieldSignature(utils.CharCode, () => ['HT', 'LF', 'CR', 'SP', 'COMMA', 'SLASH', 'ZERO', 'ONE', 'COLON', 'SEMI_COLON']);
  dart.defineLazy(utils.CharCode, {
    /*utils.CharCode.HT*/get HT() {
      return 9;
    },
    /*utils.CharCode.LF*/get LF() {
      return 10;
    },
    /*utils.CharCode.CR*/get CR() {
      return 13;
    },
    /*utils.CharCode.SP*/get SP() {
      return 32;
    },
    /*utils.CharCode.COMMA*/get COMMA() {
      return 44;
    },
    /*utils.CharCode.SLASH*/get SLASH() {
      return 47;
    },
    /*utils.CharCode.ZERO*/get ZERO() {
      return 48;
    },
    /*utils.CharCode.ONE*/get ONE() {
      return 49;
    },
    /*utils.CharCode.COLON*/get COLON() {
      return 58;
    },
    /*utils.CharCode.SEMI_COLON*/get SEMI_COLON() {
      return 59;
    }
  }, false);
  utils.isTokenChar = function isTokenChar(byte) {
    return byte > 31 && byte < 128 && !utils.SEPARATOR_MAP[S$.$_get](byte);
  };
  utils.isValueChar = function isValueChar(byte) {
    return byte > 31 && byte < 128 || byte === 32 || byte === 9;
  };
  utils.validateField = function validateField(field) {
    for (let i = 0; i < field.length; i = i + 1) {
      if (!utils.isTokenChar(field[S$0.$codeUnitAt](i))) {
        dart.throw(new core.FormatException.new("Invalid HTTP header field name: " + convert.json.encode(field), field, i));
      }
    }
    return field[S$.$toLowerCase]();
  };
  utils.isPlainAscii = function isPlainAscii(string) {
    return utils._asciiOnly.hasMatch(string);
  };
  utils.browserEncode = function browserEncode(value) {
    return value[S$.$replaceAll](utils.newlineRegExp, "%0D%0A")[S$.$replaceAll]("\"", "%22");
  };
  dart.defineLazy(utils, {
    /*utils.F*/get F() {
      return false;
    },
    /*utils.T*/get T() {
      return true;
    },
    /*utils.SEPARATOR_MAP*/get SEPARATOR_MAP() {
      return C[126] || CT.C126;
    },
    /*utils._asciiOnly*/get _asciiOnly() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    },
    /*utils.newlineRegExp*/get newlineRegExp() {
      return core.RegExp.new("\\r\\n|\\r|\\n");
    },
    /*utils.GET_BOUNDARY*/get GET_BOUNDARY() {
      return "getx-http-boundary-";
    },
    /*utils.boundaryCharacters*/get boundaryCharacters() {
      return C[127] || CT.C127;
    }
  }, false);
  _file_decoder_html.fileToBytes = function fileToBytes(data) {
    if (T$.ListOfint().is(data)) {
      return data;
    } else {
      dart.throw(C[128] || CT.C128);
    }
  };
  const _is_RouterReportManager_default = Symbol('_is_RouterReportManager_default');
  router_report.RouterReportManager$ = dart.generic(T => {
    class RouterReportManager extends core.Object {
      printInstanceStack() {
        let t569, t568;
        t568 = get_main.Get;
        t569 = router_report.RouterReportManager._routesKey[S$.$toString]();
        t568.log(t569);
      }
      static reportCurrentRoute(newRoute) {
        router_report.RouterReportManager._current = newRoute;
      }
      static reportDependencyLinkedToRoute(depedencyKey) {
        if (router_report.RouterReportManager._current == null) return;
        if (router_report.RouterReportManager._routesKey[S$.$containsKey](router_report.RouterReportManager._current)) {
          dart.nullCheck(router_report.RouterReportManager._routesKey[S$.$_get](dart.nullCheck(router_report.RouterReportManager._current)))[S$.$add](depedencyKey);
        } else {
          router_report.RouterReportManager._routesKey[S$.$_set](router_report.RouterReportManager._current, T$.JSArrayOfString().of([depedencyKey]));
        }
      }
      static clearRouteKeys() {
        router_report.RouterReportManager._routesKey[S$.$clear]();
        router_report.RouterReportManager._routesByCreate[S$.$clear]();
      }
      static appendRouteByCreate(i) {
        let t569, t568, t568$;
        t568 = router_report.RouterReportManager._routesByCreate;
        t569 = router_report.RouterReportManager._current;
        t568[S$.$_get](t569) == null ? t568[S$.$_set](t569, new (T$._HashSetOfFunction()).new()) : null;
        dart.nullCheck(router_report.RouterReportManager._routesByCreate[S$.$_get](router_report.RouterReportManager._current)).add((t568$ = i.onDelete, t568$ === null ? null : dart.bind(t568$, 'call')));
      }
      static reportRouteDispose(disposed) {
        let t568;
        if (get_main.Get.smartManagement !== smart_management.SmartManagement.onlyBuilder) {
          t568 = get_core.ambiguate(binding.WidgetsBinding, binding.WidgetsBinding.instance);
          t568 == null ? null : t568.addPostFrameCallback(dart.fn(_ => {
            router_report.RouterReportManager._removeDependencyByRoute(disposed);
          }, T$.DurationTovoid()));
        }
      }
      static reportRouteWillDispose(disposed) {
        let t568;
        let keysToRemove = T$.JSArrayOfString().of([]);
        t568 = router_report.RouterReportManager._routesKey[S$.$_get](disposed);
        t568 == null ? null : t568[S$.$forEach](T$.StringTovoid().as(dart.bind(keysToRemove, S$.$add)));
        if (router_report.RouterReportManager._routesByCreate[S$.$containsKey](disposed)) {
          for (let onClose of dart.nullCheck(router_report.RouterReportManager._routesByCreate[S$.$_get](disposed))) {
            dart.dcall(onClose, []);
          }
          dart.nullCheck(router_report.RouterReportManager._routesByCreate[S$.$_get](disposed)).clear();
          router_report.RouterReportManager._routesByCreate[S$.$remove](disposed);
        }
        for (let element of keysToRemove) {
          get_instance$.GetInstance.new().markAsDirty(dart.dynamic, {key: element});
        }
        keysToRemove[S$.$clear]();
      }
      static _removeDependencyByRoute(routeName) {
        let t568, t568$;
        let keysToRemove = T$.JSArrayOfString().of([]);
        t568 = router_report.RouterReportManager._routesKey[S$.$_get](routeName);
        t568 == null ? null : t568[S$.$forEach](T$.StringTovoid().as(dart.bind(keysToRemove, S$.$add)));
        if (router_report.RouterReportManager._routesByCreate[S$.$containsKey](routeName)) {
          for (let onClose of dart.nullCheck(router_report.RouterReportManager._routesByCreate[S$.$_get](routeName))) {
            dart.dcall(onClose, []);
          }
          dart.nullCheck(router_report.RouterReportManager._routesByCreate[S$.$_get](routeName)).clear();
          router_report.RouterReportManager._routesByCreate[S$.$remove](routeName);
        }
        for (let element of keysToRemove) {
          let value = get_instance$.GetInstance.new().delete(dart.dynamic, {key: element});
          if (value) {
            t568$ = router_report.RouterReportManager._routesKey[S$.$_get](routeName);
            t568$ == null ? null : t568$[S$.$remove](element);
          }
        }
        keysToRemove[S$.$clear]();
      }
      static ['_#new#tearOff'](T) {
        return new (router_report.RouterReportManager$(T)).new();
      }
    }
    (RouterReportManager.new = function() {
      ;
    }).prototype = RouterReportManager.prototype;
    dart.addTypeTests(RouterReportManager);
    RouterReportManager.prototype[_is_RouterReportManager_default] = true;
    dart.addTypeCaches(RouterReportManager);
    dart.setMethodSignature(RouterReportManager, () => ({
      __proto__: dart.getMethods(RouterReportManager.__proto__),
      printInstanceStack: dart.fnType(dart.void, [])
    }));
    dart.setStaticMethodSignature(RouterReportManager, () => ['reportCurrentRoute', 'reportDependencyLinkedToRoute', 'clearRouteKeys', 'appendRouteByCreate', 'reportRouteDispose', 'reportRouteWillDispose', '_removeDependencyByRoute']);
    dart.setLibraryUri(RouterReportManager, I[69]);
    dart.setStaticFieldSignature(RouterReportManager, () => ['_routesKey', '_routesByCreate', '_current']);
    return RouterReportManager;
  });
  router_report.RouterReportManager = router_report.RouterReportManager$();
  dart.defineLazy(router_report.RouterReportManager, {
    /*router_report.RouterReportManager._routesKey*/get _routesKey() {
      return new (T$.LinkedMapOfRouteN$ListOfString()).new();
    },
    /*router_report.RouterReportManager._routesByCreate*/get _routesByCreate() {
      return new (T$.LinkedMapOfRouteN$HashSetOfFunction()).new();
    },
    /*router_report.RouterReportManager._current*/get _current() {
      return null;
    },
    set _current(value) {}
  }, false);
  dart.addTypeTests(router_report.RouterReportManager, _is_RouterReportManager_default);
  const _is_GetDialogRoute_default = Symbol('_is_GetDialogRoute_default');
  dialog_route.GetDialogRoute$ = dart.generic(T => {
    class GetDialogRoute extends routes.PopupRoute$(T) {
      get widget() {
        return this[S$0.widget];
      }
      set widget(value) {
        super.widget = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
        let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
        let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
        let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[15] || CT.C15;
        let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[13] || CT.C13;
        let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
        let settings = opts && 'settings' in opts ? opts.settings : null;
        return new (dialog_route.GetDialogRoute$(T)).new({pageBuilder: pageBuilder, barrierDismissible: barrierDismissible, barrierLabel: barrierLabel, barrierColor: barrierColor, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder, settings: settings});
      }
      get barrierDismissible() {
        return this[S$0._barrierDismissible];
      }
      dispose() {
        router_report.RouterReportManager.reportRouteDispose(this);
        super.dispose();
      }
      get barrierLabel() {
        return this[S$0._barrierLabel];
      }
      get barrierColor() {
        return this[S$0._barrierColor];
      }
      get transitionDuration() {
        return this[S$0._transitionDuration];
      }
      buildPage(context, animation, secondaryAnimation) {
        let t570, t569, t568;
        return new basic.Semantics.new({scopesRoute: true, explicitChildNodes: true, child: (t568 = context, t569 = animation, t570 = secondaryAnimation, this.widget(t568, t569, t570))});
      }
      buildTransitions(context, animation, secondaryAnimation, child) {
        if (this[S$0._transitionBuilder] == null) {
          return new transitions.FadeTransition.new({opacity: new animations.CurvedAnimation.new({parent: animation, curve: curves.Curves.linear}), child: child});
        }
        return dart.nullCheck(this[S$0._transitionBuilder])(context, animation, secondaryAnimation, child);
      }
    }
    (GetDialogRoute.new = function(opts) {
      let pageBuilder = opts && 'pageBuilder' in opts ? opts.pageBuilder : null;
      let barrierDismissible = opts && 'barrierDismissible' in opts ? opts.barrierDismissible : true;
      let barrierLabel = opts && 'barrierLabel' in opts ? opts.barrierLabel : null;
      let barrierColor = opts && 'barrierColor' in opts ? opts.barrierColor : C[15] || CT.C15;
      let transitionDuration = opts && 'transitionDuration' in opts ? opts.transitionDuration : C[13] || CT.C13;
      let transitionBuilder = opts && 'transitionBuilder' in opts ? opts.transitionBuilder : null;
      let settings = opts && 'settings' in opts ? opts.settings : null;
      this[S$0.widget] = pageBuilder;
      this[S$0._barrierDismissible] = barrierDismissible;
      this[S$0._barrierLabel] = barrierLabel;
      this[S$0._barrierColor] = barrierColor;
      this[S$0._transitionDuration] = transitionDuration;
      this[S$0._transitionBuilder] = transitionBuilder;
      GetDialogRoute.__proto__.new.call(this, {settings: settings});
      router_report.RouterReportManager.reportCurrentRoute(this);
    }).prototype = GetDialogRoute.prototype;
    dart.addTypeTests(GetDialogRoute);
    GetDialogRoute.prototype[_is_GetDialogRoute_default] = true;
    dart.addTypeCaches(GetDialogRoute);
    dart.setMethodSignature(GetDialogRoute, () => ({
      __proto__: dart.getMethods(GetDialogRoute.__proto__),
      buildPage: dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])
    }));
    dart.setGetterSignature(GetDialogRoute, () => ({
      __proto__: dart.getGetters(GetDialogRoute.__proto__),
      barrierDismissible: core.bool,
      barrierLabel: dart.nullable(core.String),
      barrierColor: ui.Color,
      transitionDuration: core.Duration
    }));
    dart.setLibraryUri(GetDialogRoute, I[70]);
    dart.setFieldSignature(GetDialogRoute, () => ({
      __proto__: dart.getFields(GetDialogRoute.__proto__),
      widget: dart.finalFieldType(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double)])),
      [S$0._barrierDismissible]: dart.finalFieldType(core.bool),
      [S$0._barrierLabel]: dart.finalFieldType(dart.nullable(core.String)),
      [S$0._barrierColor]: dart.finalFieldType(ui.Color),
      [S$0._transitionDuration]: dart.finalFieldType(core.Duration),
      [S$0._transitionBuilder]: dart.finalFieldType(dart.nullable(dart.fnType(framework.Widget, [framework.BuildContext, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])))
    }));
    return GetDialogRoute;
  });
  dialog_route.GetDialogRoute = dialog_route.GetDialogRoute$();
  dart.addTypeTests(dialog_route.GetDialogRoute, _is_GetDialogRoute_default);
  parse_route.RouteDecoder = class RouteDecoder extends core.Object {
    get treeBranch() {
      return this[S$0.treeBranch];
    }
    set treeBranch(value) {
      super.treeBranch = value;
    }
    get parameters() {
      return this[S$0.parameters$2];
    }
    set parameters(value) {
      super.parameters = value;
    }
    get arguments() {
      return this[S$0.$arguments$1];
    }
    set arguments(value) {
      super.arguments = value;
    }
    get route() {
      return this.treeBranch[S$.$isEmpty] ? null : this.treeBranch[S$.$last];
    }
    static ['_#new#tearOff'](treeBranch, parameters, $arguments) {
      return new parse_route.RouteDecoder.new(treeBranch, parameters, $arguments);
    }
    replaceArguments($arguments) {
      let _route = this.route;
      if (_route != null) {
        let index = this.treeBranch[S$.$indexOf](_route);
        this.treeBranch[S$.$_set](index, _route.copy({arguments: $arguments}));
      }
    }
    replaceParameters($arguments) {
      let _route = this.route;
      if (_route != null) {
        let index = this.treeBranch[S$.$indexOf](_route);
        this.treeBranch[S$.$_set](index, _route.copy({parameters: this.parameters}));
      }
    }
  };
  (parse_route.RouteDecoder.new = function(treeBranch, parameters, $arguments) {
    this[S$0.treeBranch] = treeBranch;
    this[S$0.parameters$2] = parameters;
    this[S$0.$arguments$1] = $arguments;
    ;
  }).prototype = parse_route.RouteDecoder.prototype;
  dart.addTypeTests(parse_route.RouteDecoder);
  dart.addTypeCaches(parse_route.RouteDecoder);
  dart.setMethodSignature(parse_route.RouteDecoder, () => ({
    __proto__: dart.getMethods(parse_route.RouteDecoder.__proto__),
    replaceArguments: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    replaceParameters: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(parse_route.RouteDecoder, () => ({
    __proto__: dart.getGetters(parse_route.RouteDecoder.__proto__),
    route: dart.nullable(get_route.GetPage)
  }));
  dart.setLibraryUri(parse_route.RouteDecoder, I[71]);
  dart.setFieldSignature(parse_route.RouteDecoder, () => ({
    __proto__: dart.getFields(parse_route.RouteDecoder.__proto__),
    treeBranch: dart.finalFieldType(core.List$(get_route.GetPage)),
    parameters: dart.finalFieldType(core.Map$(core.String, core.String)),
    arguments: dart.finalFieldType(dart.nullable(core.Object))
  }));
  parse_route.ParseRouteTree = class ParseRouteTree extends core.Object {
    get routes() {
      return this[S$0.routes$2];
    }
    set routes(value) {
      super.routes = value;
    }
    static ['_#new#tearOff'](opts) {
      let routes = opts && 'routes' in opts ? opts.routes : null;
      return new parse_route.ParseRouteTree.new({routes: routes});
    }
    matchRoute(name, opts) {
      let $arguments = opts && 'arguments' in opts ? opts.arguments : null;
      let uri = core.Uri.parse(name);
      let split = uri.path[S$0.$split]("/")[S$.$where](dart.fn(element => element[S$.$isNotEmpty], T$.StringTobool()));
      let curPath = "/";
      let cumulativePaths = T$.JSArrayOfString().of(["/"]);
      for (let item of split) {
        if (curPath[S$0.$endsWith]("/")) {
          curPath = curPath + item;
        } else {
          curPath = curPath + ("/" + item);
        }
        cumulativePaths[S$.$add](curPath);
      }
      let treeBranch = cumulativePaths[S$.$map](T$.MapEntryOfString$GetPageN(), dart.fn(e => new (T$.MapEntryOfString$GetPageN()).__(e, this[S$0._findRoute](e)), T$.StringToMapEntryOfString$GetPageN()))[S$.$where](dart.fn(element => element.value != null, T$.MapEntryOfString$GetPageNTobool()))[S$.$map](T$.MapEntryOfString$GetPage(), dart.fn(e => new (T$.MapEntryOfString$GetPage()).__(e.key, dart.nullCheck(e.value)), T$.MapEntryOfString$GetPageNToMapEntryOfString$GetPage()))[S$.$toList]();
      let params = T$.LinkedHashMapOfString$String().from(uri.queryParameters);
      if (treeBranch[S$.$isNotEmpty]) {
        let lastRoute = treeBranch[S$.$last];
        let parsedParams = this[S$0._parseParams](name, lastRoute.value.path);
        if (parsedParams[S$.$isNotEmpty]) {
          params[S$.$addAll](parsedParams);
        }
        let mappedTreeBranch = treeBranch[S$.$map](get_route.GetPage, dart.fn(e => e.value.copy({parameters: (() => {
            let t568 = new (T$.IdentityMapOfString$String()).new();
            if (e.value.parameters != null) t568[S$.$addAll](dart.nullCheck(e.value.parameters));
            t568[S$.$addAll](params);
            return t568;
          })(), name: e.key}), T$.MapEntryOfString$GetPageToGetPage()))[S$.$toList]();
        return new parse_route.RouteDecoder.new(mappedTreeBranch, params, $arguments);
      }
      return new parse_route.RouteDecoder.new(treeBranch[S$.$map](get_route.GetPage, dart.fn(e => e.value, T$.MapEntryOfString$GetPageToGetPage()))[S$.$toList](), params, $arguments);
    }
    addRoutes(getPages) {
      for (let route of getPages) {
        this.addRoute(route);
      }
    }
    addRoute(route) {
      this.routes[S$.$add](route);
      for (let page of this[S$0._flattenPage](route)) {
        this.addRoute(page);
      }
    }
    [S$0._flattenPage](route) {
      let result = T$.JSArrayOfGetPage().of([]);
      if (route.children[S$.$isEmpty]) {
        return result;
      }
      let parentPath = route.name;
      for (let page of route.children) {
        let parentMiddlewares = (() => {
          let t569 = T$.JSArrayOfGetMiddleware().of([]);
          if (page.middlewares != null) t569[S$.$addAll](dart.nullCheck(page.middlewares));
          if (route.middlewares != null) t569[S$.$addAll](dart.nullCheck(route.middlewares));
          return t569;
        })();
        result[S$.$add](this[S$0._addChild](page, parentPath, parentMiddlewares));
        let children = this[S$0._flattenPage](page);
        for (let child of children) {
          result[S$.$add](this[S$0._addChild](child, parentPath, (() => {
            let t570 = T$.ListOfGetMiddleware().of(parentMiddlewares);
            if (child.middlewares != null) t570[S$.$addAll](dart.nullCheck(child.middlewares));
            return t570;
          })()));
        }
      }
      return result;
    }
    [S$0._addChild](origin, parentPath, middlewares) {
      return origin.copy({middlewares: middlewares, name: (parentPath + origin.name)[S$.$replaceAll]("//", "/")});
    }
    [S$0._findRoute](name) {
      return parse_route['FirstWhereExt|firstWhereOrNull'](get_route.GetPage, this.routes, dart.fn(route => route.path.regex.hasMatch(name), T$.GetPageTobool()));
    }
    [S$0._parseParams](path, routePath) {
      let params = new (T$.IdentityMapOfString$String()).new();
      let idx = path[S$.$indexOf]("?");
      if (idx > -1) {
        path = path[S$.$substring](0, idx);
        let uri = core.Uri.tryParse(path);
        if (uri != null) {
          params[S$.$addAll](uri.queryParameters);
        }
      }
      let paramsMatch = routePath.regex.firstMatch(path);
      for (let i = 0; i < routePath.keys[S$.$length]; i = i + 1) {
        let param = core.Uri.decodeQueryComponent(dart.nullCheck(dart.nullCheck(paramsMatch)._get(i + 1)));
        params[S$.$_set](dart.nullCheck(routePath.keys[S$.$_get](i)), param);
      }
      return params;
    }
  };
  (parse_route.ParseRouteTree.new = function(opts) {
    let routes = opts && 'routes' in opts ? opts.routes : null;
    this[S$0.routes$2] = routes;
    ;
  }).prototype = parse_route.ParseRouteTree.prototype;
  dart.addTypeTests(parse_route.ParseRouteTree);
  dart.addTypeCaches(parse_route.ParseRouteTree);
  dart.setMethodSignature(parse_route.ParseRouteTree, () => ({
    __proto__: dart.getMethods(parse_route.ParseRouteTree.__proto__),
    matchRoute: dart.fnType(parse_route.RouteDecoder, [core.String], {arguments: dart.nullable(core.Object)}, {}),
    addRoutes: dart.fnType(dart.void, [core.List$(get_route.GetPage)]),
    addRoute: dart.fnType(dart.void, [get_route.GetPage]),
    [S$0._flattenPage]: dart.fnType(core.List$(get_route.GetPage), [get_route.GetPage]),
    [S$0._addChild]: dart.fnType(get_route.GetPage, [get_route.GetPage, core.String, core.List$(route_middleware.GetMiddleware)]),
    [S$0._findRoute]: dart.fnType(dart.nullable(get_route.GetPage), [core.String]),
    [S$0._parseParams]: dart.fnType(core.Map$(core.String, core.String), [core.String, get_route.PathDecoded])
  }));
  dart.setLibraryUri(parse_route.ParseRouteTree, I[71]);
  dart.setFieldSignature(parse_route.ParseRouteTree, () => ({
    __proto__: dart.getFields(parse_route.ParseRouteTree.__proto__),
    routes: dart.finalFieldType(core.List$(get_route.GetPage))
  }));
  parse_route['FirstWhereExt|firstWhereOrNull'] = function FirstWhereExt$124firstWhereOrNull(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return element;
    }
    return null;
  };
  parse_route['FirstWhereExt|get#firstWhereOrNull'] = function FirstWhereExt$124get$35firstWhereOrNull(T, $this) {
    return dart.fn(test => parse_route['FirstWhereExt|firstWhereOrNull'](T, $this, test), dart.fnType(dart.nullable(T), [dart.fnType(core.bool, [T])]));
  };
  list_notifier.TaskManager = class TaskManager extends core.Object {
    static ['_#_#tearOff']() {
      return new list_notifier.TaskManager.__();
    }
    static get instance() {
      let t573;
      t573 = list_notifier.TaskManager._instance;
      return t573 == null ? list_notifier.TaskManager._instance = new list_notifier.TaskManager.__() : t573;
    }
    notify(_updaters) {
      if (this[S$0._setter] != null) {
        if (!dart.nullCheck(_updaters)[S$.$contains](this[S$0._setter])) {
          _updaters[S$.$add](this[S$0._setter]);
          dart.nullCheck(this[S$0._remove$1])[S$.$add](dart.fn(() => _updaters[S$.$remove](this[S$0._setter]), T$.VoidTovoid()));
        }
      }
    }
    exchange(disposers, setState, builder, context) {
      this[S$0._remove$1] = disposers;
      this[S$0._setter] = setState;
      let result = builder(context);
      this[S$0._remove$1] = null;
      this[S$0._setter] = null;
      return result;
    }
  };
  (list_notifier.TaskManager.__ = function() {
    this[S$0._setter] = null;
    this[S$0._remove$1] = null;
    ;
  }).prototype = list_notifier.TaskManager.prototype;
  dart.addTypeTests(list_notifier.TaskManager);
  dart.addTypeCaches(list_notifier.TaskManager);
  dart.setMethodSignature(list_notifier.TaskManager, () => ({
    __proto__: dart.getMethods(list_notifier.TaskManager.__proto__),
    notify: dart.fnType(dart.void, [dart.nullable(core.List$(dart.nullable(dart.fnType(dart.void, []))))]),
    exchange: dart.fnType(framework.Widget, [core.List$(dart.fnType(dart.void, [])), dart.fnType(dart.void, []), dart.fnType(framework.Widget, [framework.BuildContext]), framework.BuildContext])
  }));
  dart.setStaticGetterSignature(list_notifier.TaskManager, () => ['instance']);
  dart.setLibraryUri(list_notifier.TaskManager, I[21]);
  dart.setFieldSignature(list_notifier.TaskManager, () => ({
    __proto__: dart.getFields(list_notifier.TaskManager.__proto__),
    [S$0._setter]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [S$0._remove$1]: dart.fieldType(dart.nullable(core.List$(dart.fnType(dart.void, []))))
  }));
  dart.setStaticFieldSignature(list_notifier.TaskManager, () => ['_instance']);
  dart.defineLazy(list_notifier.TaskManager, {
    /*list_notifier.TaskManager._instance*/get _instance() {
      return null;
    },
    set _instance(value) {}
  }, false);
  const _is_CupertinoBackGestureController_default = Symbol('_is_CupertinoBackGestureController_default');
  get_transition_mixin.CupertinoBackGestureController$ = dart.generic(T => {
    class CupertinoBackGestureController extends core.Object {
      get controller() {
        return this[S$0.controller$2];
      }
      set controller(value) {
        super.controller = value;
      }
      get navigator() {
        return this[S$0.navigator];
      }
      set navigator(value) {
        super.navigator = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let navigator = opts && 'navigator' in opts ? opts.navigator : null;
        let controller = opts && 'controller' in opts ? opts.controller : null;
        return new (get_transition_mixin.CupertinoBackGestureController$(T)).new({navigator: navigator, controller: controller});
      }
      dragEnd(velocity) {
        let animationCurve = C[129] || CT.C129;
        let animateForward = null;
        if (velocity[S$0.$abs]() >= 1) {
          animateForward = velocity <= 0;
        } else {
          animateForward = this.controller.value > 0.5;
        }
        if (animateForward) {
          let droppedPageForwardAnimationTime = math.min(core.int, dart.nullCheck(ui.lerpDouble(800, 0, this.controller.value))[S$0.$floor](), 300);
          this.controller.animateTo(1, {duration: new core.Duration.new({milliseconds: droppedPageForwardAnimationTime}), curve: animationCurve});
        } else {
          this.navigator.pop(T$.ObjectN());
          if (this.controller.isAnimating) {
            let droppedPageBackAnimationTime = dart.nullCheck(ui.lerpDouble(0, 800, this.controller.value))[S$0.$floor]();
            this.controller.animateBack(0, {duration: new core.Duration.new({milliseconds: droppedPageBackAnimationTime}), curve: animationCurve});
          }
        }
        if (this.controller.isAnimating) {
          let animationStatusCallback = null;
          function animationStatusCallback$35get() {
            let t574;
            t574 = animationStatusCallback;
            return t574 == null ? dart.throw(new _internal.LateError.localNI("animationStatusCallback")) : t574;
          }
          function animationStatusCallback$35set(animationStatusCallback$35param) {
            return animationStatusCallback = animationStatusCallback$35param;
          }
          animationStatusCallback$35set(dart.fn(status => {
            this.navigator.didStopUserGesture();
            this.controller.removeStatusListener(animationStatusCallback$35get());
          }, T$.AnimationStatusTovoid()));
          this.controller.addStatusListener(animationStatusCallback$35get());
        } else {
          this.navigator.didStopUserGesture();
        }
      }
      dragUpdate(delta) {
        let t576;
        t576 = this.controller;
        t576.value = t576.value - delta;
      }
    }
    (CupertinoBackGestureController.new = function(opts) {
      let navigator = opts && 'navigator' in opts ? opts.navigator : null;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      this[S$0.navigator] = navigator;
      this[S$0.controller$2] = controller;
      this.navigator.didStartUserGesture();
    }).prototype = CupertinoBackGestureController.prototype;
    dart.addTypeTests(CupertinoBackGestureController);
    CupertinoBackGestureController.prototype[_is_CupertinoBackGestureController_default] = true;
    dart.addTypeCaches(CupertinoBackGestureController);
    dart.setMethodSignature(CupertinoBackGestureController, () => ({
      __proto__: dart.getMethods(CupertinoBackGestureController.__proto__),
      dragEnd: dart.fnType(dart.void, [core.double]),
      dragUpdate: dart.fnType(dart.void, [core.double])
    }));
    dart.setLibraryUri(CupertinoBackGestureController, I[35]);
    dart.setFieldSignature(CupertinoBackGestureController, () => ({
      __proto__: dart.getFields(CupertinoBackGestureController.__proto__),
      controller: dart.finalFieldType(animation_controller.AnimationController),
      navigator: dart.finalFieldType(navigator.NavigatorState)
    }));
    return CupertinoBackGestureController;
  });
  get_transition_mixin.CupertinoBackGestureController = get_transition_mixin.CupertinoBackGestureController$();
  dart.addTypeTests(get_transition_mixin.CupertinoBackGestureController, _is_CupertinoBackGestureController_default);
  const _is_CupertinoBackGestureDetector_default = Symbol('_is_CupertinoBackGestureDetector_default');
  get_transition_mixin.CupertinoBackGestureDetector$ = dart.generic(T => {
    var __t$CupertinoBackGestureDetectorStateOfT = () => (__t$CupertinoBackGestureDetectorStateOfT = dart.constFn(get_transition_mixin.CupertinoBackGestureDetectorState$(T)))();
    class CupertinoBackGestureDetector extends framework.StatefulWidget {
      get child() {
        return this[S$0.child];
      }
      set child(value) {
        super.child = value;
      }
      get gestureWidth() {
        return this[S$0.gestureWidth$2];
      }
      set gestureWidth(value) {
        super.gestureWidth = value;
      }
      get enabledCallback() {
        return this[S$0.enabledCallback];
      }
      set enabledCallback(value) {
        super.enabledCallback = value;
      }
      get onStartPopGesture() {
        return this[S$0.onStartPopGesture];
      }
      set onStartPopGesture(value) {
        super.onStartPopGesture = value;
      }
      static ['_#new#tearOff'](T, opts) {
        let key = opts && 'key' in opts ? opts.key : null;
        let enabledCallback = opts && 'enabledCallback' in opts ? opts.enabledCallback : null;
        let onStartPopGesture = opts && 'onStartPopGesture' in opts ? opts.onStartPopGesture : null;
        let child = opts && 'child' in opts ? opts.child : null;
        let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
        return new (get_transition_mixin.CupertinoBackGestureDetector$(T)).new({key: key, enabledCallback: enabledCallback, onStartPopGesture: onStartPopGesture, child: child, gestureWidth: gestureWidth});
      }
      createState() {
        return new (__t$CupertinoBackGestureDetectorStateOfT()).new();
      }
    }
    (CupertinoBackGestureDetector.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let enabledCallback = opts && 'enabledCallback' in opts ? opts.enabledCallback : null;
      let onStartPopGesture = opts && 'onStartPopGesture' in opts ? opts.onStartPopGesture : null;
      let child = opts && 'child' in opts ? opts.child : null;
      let gestureWidth = opts && 'gestureWidth' in opts ? opts.gestureWidth : null;
      this[S$0.enabledCallback] = enabledCallback;
      this[S$0.onStartPopGesture] = onStartPopGesture;
      this[S$0.child] = child;
      this[S$0.gestureWidth$2] = gestureWidth;
      CupertinoBackGestureDetector.__proto__.new.call(this, {key: key});
      ;
    }).prototype = CupertinoBackGestureDetector.prototype;
    dart.addTypeTests(CupertinoBackGestureDetector);
    CupertinoBackGestureDetector.prototype[_is_CupertinoBackGestureDetector_default] = true;
    dart.addTypeCaches(CupertinoBackGestureDetector);
    dart.setMethodSignature(CupertinoBackGestureDetector, () => ({
      __proto__: dart.getMethods(CupertinoBackGestureDetector.__proto__),
      createState: dart.fnType(get_transition_mixin.CupertinoBackGestureDetectorState$(T), [])
    }));
    dart.setLibraryUri(CupertinoBackGestureDetector, I[35]);
    dart.setFieldSignature(CupertinoBackGestureDetector, () => ({
      __proto__: dart.getFields(CupertinoBackGestureDetector.__proto__),
      child: dart.finalFieldType(framework.Widget),
      gestureWidth: dart.finalFieldType(core.double),
      enabledCallback: dart.finalFieldType(dart.fnType(core.bool, [])),
      onStartPopGesture: dart.finalFieldType(dart.fnType(get_transition_mixin.CupertinoBackGestureController$(T), []))
    }));
    return CupertinoBackGestureDetector;
  });
  get_transition_mixin.CupertinoBackGestureDetector = get_transition_mixin.CupertinoBackGestureDetector$();
  dart.addTypeTests(get_transition_mixin.CupertinoBackGestureDetector, _is_CupertinoBackGestureDetector_default);
  const _is_CupertinoBackGestureDetectorState_default = Symbol('_is_CupertinoBackGestureDetectorState_default');
  get_transition_mixin.CupertinoBackGestureDetectorState$ = dart.generic(T => {
    class CupertinoBackGestureDetectorState extends framework.State$(get_transition_mixin.CupertinoBackGestureDetector$(T)) {
      get [S$0._recognizer]() {
        let t576;
        t576 = this[S$0.__CupertinoBackGestureDetectorState__recognizer];
        return t576 == null ? dart.throw(new _internal.LateError.fieldNI("_recognizer")) : t576;
      }
      set [S$0._recognizer](_recognizer$35param) {
        this[S$0.__CupertinoBackGestureDetectorState__recognizer] = _recognizer$35param;
      }
      build(context) {
        if (!debug.debugCheckHasDirectionality(context)) dart.assertFailed(null, I[34], 142, 12, "debugCheckHasDirectionality(context)");
        let dragAreaWidth = basic.Directionality.of(context) === ui.TextDirection.ltr ? media_query.MediaQuery.of(context).padding.left : media_query.MediaQuery.of(context).padding.right;
        dragAreaWidth = math.max(core.double, dragAreaWidth, this.widget.gestureWidth);
        return new basic.Stack.new({fit: stack.StackFit.passthrough, children: T$.JSArrayOfWidget().of([this.widget.child, new basic.PositionedDirectional.new({start: 0, width: dragAreaWidth, top: 0, bottom: 0, child: new basic.Listener.new({onPointerDown: dart.bind(this, S$0._handlePointerDown), behavior: proxy_box.HitTestBehavior.translucent})})])});
      }
      dispose() {
        this[S$0._recognizer].dispose();
        super.dispose();
      }
      initState() {
        let t576;
        super.initState();
        this[S$0._recognizer] = (t576 = new monodrag.HorizontalDragGestureRecognizer.new({debugOwner: this}), (() => {
          t576.onStart = dart.bind(this, S$0._handleDragStart);
          t576.onUpdate = dart.bind(this, S$0._handleDragUpdate);
          t576.onEnd = dart.bind(this, S$0._handleDragEnd);
          t576.onCancel = dart.bind(this, S$0._handleDragCancel);
          return t576;
        })());
      }
      [S$0._convertToLogical](value) {
        switch (basic.Directionality.of(this.context)) {
          case C[130] || CT.C130:
            {
              return -value;
            }
          case C[131] || CT.C131:
            {
              return value;
            }
        }
      }
      [S$0._handleDragCancel]() {
        let t576;
        if (!this.mounted) dart.assertFailed(null, I[34], 193, 12, "mounted");
        t576 = this[S$0._backGestureController];
        t576 == null ? null : t576.dragEnd(0);
        this[S$0._backGestureController] = null;
      }
      [S$0._handleDragEnd](details) {
        if (!this.mounted) dart.assertFailed(null, I[34], 202, 12, "mounted");
        if (!(this[S$0._backGestureController] != null)) dart.assertFailed(null, I[34], 203, 12, "_backGestureController != null");
        dart.nullCheck(this[S$0._backGestureController]).dragEnd(this[S$0._convertToLogical](details.velocity.pixelsPerSecond.dx / dart.nullCheck(this.context.size).width));
        this[S$0._backGestureController] = null;
      }
      [S$0._handleDragStart](details) {
        if (!this.mounted) dart.assertFailed(null, I[34], 210, 12, "mounted");
        if (!(this[S$0._backGestureController] == null)) dart.assertFailed(null, I[34], 211, 12, "_backGestureController == null");
        this[S$0._backGestureController] = this.widget.onStartPopGesture();
      }
      [S$0._handleDragUpdate](details) {
        if (!this.mounted) dart.assertFailed(null, I[34], 216, 12, "mounted");
        if (!(this[S$0._backGestureController] != null)) dart.assertFailed(null, I[34], 217, 12, "_backGestureController != null");
        dart.nullCheck(this[S$0._backGestureController]).dragUpdate(this[S$0._convertToLogical](dart.nullCheck(details.primaryDelta) / dart.nullCheck(this.context.size).width));
      }
      [S$0._handlePointerDown](event) {
        if (this.widget.enabledCallback()) this[S$0._recognizer].addPointer(event);
      }
      static ['_#new#tearOff'](T) {
        return new (get_transition_mixin.CupertinoBackGestureDetectorState$(T)).new();
      }
    }
    (CupertinoBackGestureDetectorState.new = function() {
      this[S$0._backGestureController] = null;
      this[S$0.__CupertinoBackGestureDetectorState__recognizer] = null;
      CupertinoBackGestureDetectorState.__proto__.new.call(this);
      ;
    }).prototype = CupertinoBackGestureDetectorState.prototype;
    dart.addTypeTests(CupertinoBackGestureDetectorState);
    CupertinoBackGestureDetectorState.prototype[_is_CupertinoBackGestureDetectorState_default] = true;
    dart.addTypeCaches(CupertinoBackGestureDetectorState);
    dart.setMethodSignature(CupertinoBackGestureDetectorState, () => ({
      __proto__: dart.getMethods(CupertinoBackGestureDetectorState.__proto__),
      build: dart.fnType(framework.Widget, [framework.BuildContext]),
      [S$0._convertToLogical]: dart.fnType(core.double, [core.double]),
      [S$0._handleDragCancel]: dart.fnType(dart.void, []),
      [S$0._handleDragEnd]: dart.fnType(dart.void, [drag_details.DragEndDetails]),
      [S$0._handleDragStart]: dart.fnType(dart.void, [drag_details.DragStartDetails]),
      [S$0._handleDragUpdate]: dart.fnType(dart.void, [drag_details.DragUpdateDetails]),
      [S$0._handlePointerDown]: dart.fnType(dart.void, [events.PointerDownEvent])
    }));
    dart.setGetterSignature(CupertinoBackGestureDetectorState, () => ({
      __proto__: dart.getGetters(CupertinoBackGestureDetectorState.__proto__),
      [S$0._recognizer]: monodrag.HorizontalDragGestureRecognizer
    }));
    dart.setSetterSignature(CupertinoBackGestureDetectorState, () => ({
      __proto__: dart.getSetters(CupertinoBackGestureDetectorState.__proto__),
      [S$0._recognizer]: monodrag.HorizontalDragGestureRecognizer
    }));
    dart.setLibraryUri(CupertinoBackGestureDetectorState, I[35]);
    dart.setFieldSignature(CupertinoBackGestureDetectorState, () => ({
      __proto__: dart.getFields(CupertinoBackGestureDetectorState.__proto__),
      [S$0._backGestureController]: dart.fieldType(dart.nullable(get_transition_mixin.CupertinoBackGestureController$(T))),
      [S$0.__CupertinoBackGestureDetectorState__recognizer]: dart.fieldType(dart.nullable(monodrag.HorizontalDragGestureRecognizer))
    }));
    return CupertinoBackGestureDetectorState;
  });
  get_transition_mixin.CupertinoBackGestureDetectorState = get_transition_mixin.CupertinoBackGestureDetectorState$();
  dart.addTypeTests(get_transition_mixin.CupertinoBackGestureDetectorState, _is_CupertinoBackGestureDetectorState_default);
  dart.defineLazy(get_transition_mixin, {
    /*get_transition_mixin._kBackGestureWidth*/get _kBackGestureWidth() {
      return 20;
    },
    /*get_transition_mixin._kMaxDroppedSwipePageForwardAnimationTime*/get _kMaxDroppedSwipePageForwardAnimationTime() {
      return 800;
    },
    /*get_transition_mixin._kMaxPageBackAnimationTime*/get _kMaxPageBackAnimationTime() {
      return 300;
    },
    /*get_transition_mixin._kMinFlingVelocity*/get _kMinFlingVelocity() {
      return 1;
    }
  }, false);
  debouncer.Debouncer = class Debouncer extends core.Object {
    get delay() {
      return this[S$0.delay];
    }
    set delay(value) {
      super.delay = value;
    }
    static ['_#new#tearOff'](opts) {
      let delay = opts && 'delay' in opts ? opts.delay : null;
      return new debouncer.Debouncer.new({delay: delay});
    }
    call(action) {
      let t576;
      t576 = this[S$0._timer$1];
      t576 == null ? null : t576.cancel();
      this[S$0._timer$1] = async.Timer.new(dart.nullCheck(this.delay), action);
    }
    get isRunning() {
      let t576, t576$;
      t576$ = (t576 = this[S$0._timer$1], t576 == null ? null : t576.isActive);
      return t576$ == null ? false : t576$;
    }
    cancel() {
      let t576;
      t576 = this[S$0._timer$1];
      return t576 == null ? null : t576.cancel();
    }
  };
  (debouncer.Debouncer.new = function(opts) {
    let delay = opts && 'delay' in opts ? opts.delay : null;
    this[S$0._timer$1] = null;
    this[S$0.delay] = delay;
    ;
  }).prototype = debouncer.Debouncer.prototype;
  dart.addTypeTests(debouncer.Debouncer);
  dart.addTypeCaches(debouncer.Debouncer);
  dart.setMethodSignature(debouncer.Debouncer, () => ({
    __proto__: dart.getMethods(debouncer.Debouncer.__proto__),
    call: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    cancel: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(debouncer.Debouncer, () => ({
    __proto__: dart.getGetters(debouncer.Debouncer.__proto__),
    isRunning: core.bool
  }));
  dart.setLibraryUri(debouncer.Debouncer, I[72]);
  dart.setFieldSignature(debouncer.Debouncer, () => ({
    __proto__: dart.getFields(debouncer.Debouncer.__proto__),
    delay: dart.finalFieldType(dart.nullable(core.Duration)),
    [S$0._timer$1]: dart.fieldType(dart.nullable(async.Timer))
  }));
  get_widget_cache.GetWidgetCacheElement = class GetWidgetCacheElement extends framework.ComponentElement {
    get cache() {
      return this[S$0.cache];
    }
    set cache(value) {
      super.cache = value;
    }
    static ['_#new#tearOff'](widget) {
      return new get_widget_cache.GetWidgetCacheElement.new(widget);
    }
    mount(parent, newSlot) {
      this.cache.onInit();
      super.mount(parent, newSlot);
    }
    build() {
      return this.cache.build(this);
    }
    performRebuild() {
      super.performRebuild();
    }
    activate() {
      super.activate();
      this.markNeedsBuild();
    }
    unmount() {
      super.unmount();
      this.cache.onClose();
      this.cache[S$0._element] = null;
    }
  };
  (get_widget_cache.GetWidgetCacheElement.new = function(widget) {
    this[S$0.cache] = widget.createWidgetCache();
    get_widget_cache.GetWidgetCacheElement.__proto__.new.call(this, widget);
    this.cache[S$0._element] = this;
    this.cache[S$0._widget$1] = widget;
  }).prototype = get_widget_cache.GetWidgetCacheElement.prototype;
  dart.addTypeTests(get_widget_cache.GetWidgetCacheElement);
  dart.addTypeCaches(get_widget_cache.GetWidgetCacheElement);
  dart.setMethodSignature(get_widget_cache.GetWidgetCacheElement, () => ({
    __proto__: dart.getMethods(get_widget_cache.GetWidgetCacheElement.__proto__),
    mount: dart.fnType(dart.void, [dart.nullable(framework.Element), dart.dynamic]),
    build: dart.fnType(framework.Widget, [])
  }));
  dart.setLibraryUri(get_widget_cache.GetWidgetCacheElement, I[55]);
  dart.setFieldSignature(get_widget_cache.GetWidgetCacheElement, () => ({
    __proto__: dart.getFields(get_widget_cache.GetWidgetCacheElement.__proto__),
    cache: dart.finalFieldType(get_widget_cache.WidgetCache$(get_widget_cache.GetWidgetCache))
  }));
  context_extensions['ContextExtensionss|get#mediaQuerySize'] = function ContextExtensionss$124get$35mediaQuerySize($this) {
    return media_query.MediaQuery.of($this).size;
  };
  context_extensions['ContextExtensionss|get#height'] = function ContextExtensionss$124get$35height($this) {
    return context_extensions['ContextExtensionss|get#mediaQuerySize']($this).height;
  };
  context_extensions['ContextExtensionss|get#width'] = function ContextExtensionss$124get$35width($this) {
    return context_extensions['ContextExtensionss|get#mediaQuerySize']($this).width;
  };
  context_extensions['ContextExtensionss|heightTransformer'] = function ContextExtensionss$124heightTransformer($this, opts) {
    let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
    let reducedBy = opts && 'reducedBy' in opts ? opts.reducedBy : 0;
    return (context_extensions['ContextExtensionss|get#mediaQuerySize']($this).height - context_extensions['ContextExtensionss|get#mediaQuerySize']($this).height / 100 * reducedBy) / dividedBy;
  };
  context_extensions['ContextExtensionss|get#heightTransformer'] = function ContextExtensionss$124get$35heightTransformer($this) {
    return dart.fn(opts => {
      let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
      let reducedBy = opts && 'reducedBy' in opts ? opts.reducedBy : 0;
      return context_extensions['ContextExtensionss|heightTransformer']($this, {dividedBy: dividedBy, reducedBy: reducedBy});
    }, T$.__Todouble());
  };
  context_extensions['ContextExtensionss|widthTransformer'] = function ContextExtensionss$124widthTransformer($this, opts) {
    let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
    let reducedBy = opts && 'reducedBy' in opts ? opts.reducedBy : 0;
    return (context_extensions['ContextExtensionss|get#mediaQuerySize']($this).width - context_extensions['ContextExtensionss|get#mediaQuerySize']($this).width / 100 * reducedBy) / dividedBy;
  };
  context_extensions['ContextExtensionss|get#widthTransformer'] = function ContextExtensionss$124get$35widthTransformer($this) {
    return dart.fn(opts => {
      let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
      let reducedBy = opts && 'reducedBy' in opts ? opts.reducedBy : 0;
      return context_extensions['ContextExtensionss|widthTransformer']($this, {dividedBy: dividedBy, reducedBy: reducedBy});
    }, T$.__Todouble());
  };
  context_extensions['ContextExtensionss|ratio'] = function ContextExtensionss$124ratio($this, opts) {
    let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
    let reducedByW = opts && 'reducedByW' in opts ? opts.reducedByW : 0;
    let reducedByH = opts && 'reducedByH' in opts ? opts.reducedByH : 0;
    return context_extensions['ContextExtensionss|heightTransformer']($this, {dividedBy: dividedBy, reducedBy: reducedByH}) / context_extensions['ContextExtensionss|widthTransformer']($this, {dividedBy: dividedBy, reducedBy: reducedByW});
  };
  context_extensions['ContextExtensionss|get#ratio'] = function ContextExtensionss$124get$35ratio($this) {
    return dart.fn(opts => {
      let dividedBy = opts && 'dividedBy' in opts ? opts.dividedBy : 1;
      let reducedByW = opts && 'reducedByW' in opts ? opts.reducedByW : 0;
      let reducedByH = opts && 'reducedByH' in opts ? opts.reducedByH : 0;
      return context_extensions['ContextExtensionss|ratio']($this, {dividedBy: dividedBy, reducedByW: reducedByW, reducedByH: reducedByH});
    }, T$.__Todouble$1());
  };
  context_extensions['ContextExtensionss|get#theme'] = function ContextExtensionss$124get$35theme($this) {
    return theme$.Theme.of($this);
  };
  context_extensions['ContextExtensionss|get#isDarkMode'] = function ContextExtensionss$124get$35isDarkMode($this) {
    return context_extensions['ContextExtensionss|get#theme']($this).brightness === ui.Brightness.dark;
  };
  context_extensions['ContextExtensionss|get#iconColor'] = function ContextExtensionss$124get$35iconColor($this) {
    return context_extensions['ContextExtensionss|get#theme']($this).iconTheme.color;
  };
  context_extensions['ContextExtensionss|get#textTheme'] = function ContextExtensionss$124get$35textTheme($this) {
    return theme$.Theme.of($this).textTheme;
  };
  context_extensions['ContextExtensionss|get#mediaQueryPadding'] = function ContextExtensionss$124get$35mediaQueryPadding($this) {
    return media_query.MediaQuery.of($this).padding;
  };
  context_extensions['ContextExtensionss|get#mediaQuery'] = function ContextExtensionss$124get$35mediaQuery($this) {
    return media_query.MediaQuery.of($this);
  };
  context_extensions['ContextExtensionss|get#mediaQueryViewPadding'] = function ContextExtensionss$124get$35mediaQueryViewPadding($this) {
    return media_query.MediaQuery.of($this).viewPadding;
  };
  context_extensions['ContextExtensionss|get#mediaQueryViewInsets'] = function ContextExtensionss$124get$35mediaQueryViewInsets($this) {
    return media_query.MediaQuery.of($this).viewInsets;
  };
  context_extensions['ContextExtensionss|get#orientation'] = function ContextExtensionss$124get$35orientation($this) {
    return media_query.MediaQuery.of($this).orientation;
  };
  context_extensions['ContextExtensionss|get#isLandscape'] = function ContextExtensionss$124get$35isLandscape($this) {
    return context_extensions['ContextExtensionss|get#orientation']($this) === media_query.Orientation.landscape;
  };
  context_extensions['ContextExtensionss|get#isPortrait'] = function ContextExtensionss$124get$35isPortrait($this) {
    return context_extensions['ContextExtensionss|get#orientation']($this) === media_query.Orientation.portrait;
  };
  context_extensions['ContextExtensionss|get#devicePixelRatio'] = function ContextExtensionss$124get$35devicePixelRatio($this) {
    return media_query.MediaQuery.of($this).devicePixelRatio;
  };
  context_extensions['ContextExtensionss|get#textScaleFactor'] = function ContextExtensionss$124get$35textScaleFactor($this) {
    return media_query.MediaQuery.of($this).textScaleFactor;
  };
  context_extensions['ContextExtensionss|get#mediaQueryShortestSide'] = function ContextExtensionss$124get$35mediaQueryShortestSide($this) {
    return context_extensions['ContextExtensionss|get#mediaQuerySize']($this).shortestSide;
  };
  context_extensions['ContextExtensionss|get#showNavbar'] = function ContextExtensionss$124get$35showNavbar($this) {
    return context_extensions['ContextExtensionss|get#width']($this) > 800;
  };
  context_extensions['ContextExtensionss|get#isPhone'] = function ContextExtensionss$124get$35isPhone($this) {
    return context_extensions['ContextExtensionss|get#mediaQueryShortestSide']($this) < 600;
  };
  context_extensions['ContextExtensionss|get#isSmallTablet'] = function ContextExtensionss$124get$35isSmallTablet($this) {
    return context_extensions['ContextExtensionss|get#mediaQueryShortestSide']($this) >= 600;
  };
  context_extensions['ContextExtensionss|get#isLargeTablet'] = function ContextExtensionss$124get$35isLargeTablet($this) {
    return context_extensions['ContextExtensionss|get#mediaQueryShortestSide']($this) >= 720;
  };
  context_extensions['ContextExtensionss|get#isTablet'] = function ContextExtensionss$124get$35isTablet($this) {
    return context_extensions['ContextExtensionss|get#isSmallTablet']($this) || context_extensions['ContextExtensionss|get#isLargeTablet']($this);
  };
  context_extensions['ContextExtensionss|responsiveValue'] = function ContextExtensionss$124responsiveValue(T, $this, opts) {
    let mobile = opts && 'mobile' in opts ? opts.mobile : null;
    let tablet = opts && 'tablet' in opts ? opts.tablet : null;
    let desktop = opts && 'desktop' in opts ? opts.desktop : null;
    let watch = opts && 'watch' in opts ? opts.watch : null;
    let deviceWidth = context_extensions['ContextExtensionss|get#mediaQuerySize']($this).shortestSide;
    if (platform$.GetPlatform.isDesktop) {
      deviceWidth = context_extensions['ContextExtensionss|get#mediaQuerySize']($this).width;
    }
    if (deviceWidth >= 1200 && desktop != null) {
      return desktop;
    } else if (deviceWidth >= 600 && tablet != null) {
      return tablet;
    } else if (deviceWidth < 300 && watch != null) {
      return watch;
    } else {
      return dart.nullCheck(mobile);
    }
  };
  context_extensions['ContextExtensionss|get#responsiveValue'] = function ContextExtensionss$124get$35responsiveValue($this) {
    return dart.fn((T, opts) => {
      let mobile = opts && 'mobile' in opts ? opts.mobile : null;
      let tablet = opts && 'tablet' in opts ? opts.tablet : null;
      let desktop = opts && 'desktop' in opts ? opts.desktop : null;
      let watch = opts && 'watch' in opts ? opts.watch : null;
      return context_extensions['ContextExtensionss|responsiveValue'](T, $this, {mobile: mobile, tablet: tablet, desktop: desktop, watch: watch});
    }, T$.__ToT());
  };
  double_extensions['Precision|toPrecision'] = function Precision$124toPrecision($this, fractionDigits) {
    let mod = math.pow(10, fractionDigits[S$0.$toDouble]())[S$0.$toDouble]();
    return ($this * mod)[S$0.$round]()[S$0.$toDouble]() / mod;
  };
  double_extensions['Precision|get#toPrecision'] = function Precision$124get$35toPrecision($this) {
    return dart.fn(fractionDigits => double_extensions['Precision|toPrecision']($this, fractionDigits), T$.intTodouble());
  };
  duration_extensions['GetDurationUtils|delay'] = function GetDurationUtils$124delay($this, callback = null) {
    return async.async(dart.dynamic, function* GetDurationUtils$124delay() {
      return async.Future.delayed($this, callback);
    });
  };
  duration_extensions['GetDurationUtils|get#delay'] = function GetDurationUtils$124get$35delay($this) {
    return dart.fn((callback = null) => duration_extensions['GetDurationUtils|delay']($this, callback), T$.FnToFuture());
  };
  dynamic_extensions['GetDynamicUtils|get#isNull'] = function GetDynamicUtils$124get$35isNull($this) {
    return get_utils$.GetUtils.isNull($this);
  };
  dynamic_extensions['GetDynamicUtils|get#isBlank'] = function GetDynamicUtils$124get$35isBlank($this) {
    return get_utils$.GetUtils.isBlank($this);
  };
  dynamic_extensions['GetDynamicUtils|get#isNullOrBlank'] = function GetDynamicUtils$124get$35isNullOrBlank($this) {
    return get_utils$.GetUtils.isNullOrBlank($this);
  };
  dynamic_extensions['GetDynamicUtils|printError'] = function GetDynamicUtils$124printError($this, opts) {
    let info = opts && 'info' in opts ? opts.info : "";
    let logFunction = opts && 'logFunction' in opts ? opts.logFunction : C[132] || CT.C132;
    return dart.dcall(logFunction, ["Error: " + dart.str(dart.runtimeType($this)), $this, info], {isError: true});
  };
  dynamic_extensions['GetDynamicUtils|get#printError'] = function GetDynamicUtils$124get$35printError($this) {
    return dart.fn(opts => {
      let info = opts && 'info' in opts ? opts.info : "";
      let logFunction = opts && 'logFunction' in opts ? opts.logFunction : C[132] || CT.C132;
      return dynamic_extensions['GetDynamicUtils|printError']($this, {info: info, logFunction: logFunction});
    }, T$.__Tovoid$5());
  };
  dynamic_extensions['GetDynamicUtils|printInfo'] = function GetDynamicUtils$124printInfo($this, opts) {
    let info = opts && 'info' in opts ? opts.info : "";
    let printFunction = opts && 'printFunction' in opts ? opts.printFunction : C[132] || CT.C132;
    return dart.dcall(printFunction, ["Info: " + dart.str(dart.runtimeType($this)), $this, info]);
  };
  dynamic_extensions['GetDynamicUtils|get#printInfo'] = function GetDynamicUtils$124get$35printInfo($this) {
    return dart.fn(opts => {
      let info = opts && 'info' in opts ? opts.info : "";
      let printFunction = opts && 'printFunction' in opts ? opts.printFunction : C[132] || CT.C132;
      return dynamic_extensions['GetDynamicUtils|printInfo']($this, {info: info, printFunction: printFunction});
    }, T$.__Tovoid$6());
  };
  event_loop_extensions['LoopEventsExt|toEnd'] = function LoopEventsExt$124toEnd(T, $this, computation) {
    return async.async(T, function* LoopEventsExt$124toEnd() {
      yield async.Future.delayed(core.Duration.zero);
      let val = computation();
      return val;
    });
  };
  event_loop_extensions['LoopEventsExt|get#toEnd'] = function LoopEventsExt$124get$35toEnd($this) {
    return dart.fn((T, computation) => event_loop_extensions['LoopEventsExt|toEnd'](T, $this, computation), T$.FnToFutureOfT());
  };
  event_loop_extensions['LoopEventsExt|asap'] = function LoopEventsExt$124asap(T, $this, computation, opts) {
    let condition = opts && 'condition' in opts ? opts.condition : null;
    return async.async(T, function* LoopEventsExt$124asap() {
      let val = null;
      if (condition == null || !condition()) {
        yield async.Future.delayed(core.Duration.zero);
        val = computation();
      } else {
        val = computation();
      }
      return val;
    });
  };
  event_loop_extensions['LoopEventsExt|get#asap'] = function LoopEventsExt$124get$35asap($this) {
    return dart.fn((T, computation, opts) => {
      let condition = opts && 'condition' in opts ? opts.condition : null;
      return event_loop_extensions['LoopEventsExt|asap'](T, $this, computation, {condition: condition});
    }, T$.Fn__ToFutureOrOfT());
  };
  internacionalization$._IntlHost = class _IntlHost extends core.Object {
    static ['_#new#tearOff']() {
      return new internacionalization$._IntlHost.new();
    }
  };
  (internacionalization$._IntlHost.new = function() {
    this.locale = null;
    this.fallbackLocale = null;
    this.translations = new (T$.IdentityMapOfString$MapOfString$String()).new();
    ;
  }).prototype = internacionalization$._IntlHost.prototype;
  dart.addTypeTests(internacionalization$._IntlHost);
  dart.addTypeCaches(internacionalization$._IntlHost);
  dart.setLibraryUri(internacionalization$._IntlHost, I[73]);
  dart.setFieldSignature(internacionalization$._IntlHost, () => ({
    __proto__: dart.getFields(internacionalization$._IntlHost.__proto__),
    locale: dart.fieldType(dart.nullable(ui.Locale)),
    fallbackLocale: dart.fieldType(dart.nullable(ui.Locale)),
    translations: dart.fieldType(core.Map$(core.String, core.Map$(core.String, core.String)))
  }));
  internacionalization$['FirstWhereExt|firstWhereOrNull'] = function FirstWhereExt$124firstWhereOrNull$(T, $this, test) {
    for (let element of $this) {
      if (test(element)) return element;
    }
    return null;
  };
  internacionalization$['FirstWhereExt|get#firstWhereOrNull'] = function FirstWhereExt$124get$35firstWhereOrNull$(T, $this) {
    return dart.fn(test => internacionalization$['FirstWhereExt|firstWhereOrNull'](T, $this, test), dart.fnType(dart.nullable(T), [dart.fnType(core.bool, [T])]));
  };
  internacionalization$['LocalesIntl|get#locale'] = function LocalesIntl$124get$35locale($this) {
    return internacionalization$['LocalesIntl|_intlHost'].locale;
  };
  internacionalization$['LocalesIntl|get#fallbackLocale'] = function LocalesIntl$124get$35fallbackLocale($this) {
    return internacionalization$['LocalesIntl|_intlHost'].fallbackLocale;
  };
  internacionalization$['LocalesIntl|set#locale'] = function LocalesIntl$124set$35locale($this, newLocale) {
    return internacionalization$['LocalesIntl|_intlHost'].locale = newLocale;
  };
  internacionalization$['LocalesIntl|set#fallbackLocale'] = function LocalesIntl$124set$35fallbackLocale($this, newLocale) {
    return internacionalization$['LocalesIntl|_intlHost'].fallbackLocale = newLocale;
  };
  internacionalization$['LocalesIntl|get#translations'] = function LocalesIntl$124get$35translations($this) {
    return internacionalization$['LocalesIntl|_intlHost'].translations;
  };
  internacionalization$['LocalesIntl|addTranslations'] = function LocalesIntl$124addTranslations($this, tr) {
    internacionalization$['LocalesIntl|get#translations']($this)[S$.$addAll](tr);
  };
  internacionalization$['LocalesIntl|get#addTranslations'] = function LocalesIntl$124get$35addTranslations($this) {
    return dart.fn(tr => internacionalization$['LocalesIntl|addTranslations']($this, tr), T$.MapOfString$MapOfString$StringTovoid());
  };
  internacionalization$['LocalesIntl|clearTranslations'] = function LocalesIntl$124clearTranslations($this) {
    internacionalization$['LocalesIntl|get#translations']($this)[S$.$clear]();
  };
  internacionalization$['LocalesIntl|get#clearTranslations'] = function LocalesIntl$124get$35clearTranslations($this) {
    return dart.fn(() => internacionalization$['LocalesIntl|clearTranslations']($this), T$.VoidTovoid());
  };
  internacionalization$['LocalesIntl|appendTranslations'] = function LocalesIntl$124appendTranslations($this, tr) {
    tr[S$.$forEach](dart.fn((key, map) => {
      if (internacionalization$['LocalesIntl|get#translations']($this)[S$.$containsKey](key)) {
        dart.nullCheck(internacionalization$['LocalesIntl|get#translations']($this)[S$.$_get](key))[S$.$addAll](map);
      } else {
        internacionalization$['LocalesIntl|get#translations']($this)[S$.$_set](key, map);
      }
    }, T$.StringAndMapOfString$StringTovoid()));
  };
  internacionalization$['LocalesIntl|get#appendTranslations'] = function LocalesIntl$124get$35appendTranslations($this) {
    return dart.fn(tr => internacionalization$['LocalesIntl|appendTranslations']($this, tr), T$.MapOfString$MapOfString$StringTovoid());
  };
  internacionalization$['Trans|get#_fullLocaleAndKey'] = function Trans$124get$35_fullLocaleAndKey($this) {
    return internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$containsKey](dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).languageCode + "_" + dart.str(dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).countryCode)) && dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).languageCode + "_" + dart.str(dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).countryCode)))[S$.$containsKey]($this);
  };
  internacionalization$['Trans|get#_getSimilarLanguageTranslation'] = function Trans$124get$35_getSimilarLanguageTranslation($this) {
    let translationsWithNoCountry = internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$map](core.String, T$.MapOfString$String(), dart.fn((key, value) => new (T$.MapEntryOfString$MapOfString$String()).__(key[S$0.$split]("_")[S$.$first], value), T$.StringAndMapOfString$StringToMapEntryOfString$MapOfString$String()));
    let containsKey = translationsWithNoCountry[S$.$containsKey](dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).languageCode[S$0.$split]("_")[S$.$first]);
    if (!containsKey) {
      return null;
    }
    return translationsWithNoCountry[S$.$_get](dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).languageCode[S$0.$split]("_")[S$.$first]);
  };
  internacionalization$['Trans|get#tr'] = function Trans$124get$35tr($this) {
    let t637;
    if ((t637 = internacionalization$['LocalesIntl|get#locale'](get_main.Get), t637 == null ? null : t637.languageCode) == null) return $this;
    if (internacionalization$['Trans|get#_fullLocaleAndKey']($this)) {
      return dart.nullCheck(dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).languageCode + "_" + dart.str(dart.nullCheck(internacionalization$['LocalesIntl|get#locale'](get_main.Get)).countryCode)))[S$.$_get]($this));
    }
    let similarTranslation = internacionalization$['Trans|get#_getSimilarLanguageTranslation']($this);
    if (similarTranslation != null && similarTranslation[S$.$containsKey]($this)) {
      return dart.nullCheck(similarTranslation[S$.$_get]($this));
    } else if (internacionalization$['LocalesIntl|get#fallbackLocale'](get_main.Get) != null) {
      let fallback = dart.nullCheck(internacionalization$['LocalesIntl|get#fallbackLocale'](get_main.Get));
      let key = fallback.languageCode + "_" + dart.str(fallback.countryCode);
      if (internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$containsKey](key) && dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](key))[S$.$containsKey]($this)) {
        return dart.nullCheck(dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](key))[S$.$_get]($this));
      }
      if (internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$containsKey](fallback.languageCode) && dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](fallback.languageCode))[S$.$containsKey]($this)) {
        return dart.nullCheck(dart.nullCheck(internacionalization$['LocalesIntl|get#translations'](get_main.Get)[S$.$_get](fallback.languageCode))[S$.$_get]($this));
      }
      return $this;
    } else {
      return $this;
    }
  };
  internacionalization$['Trans|trArgs'] = function Trans$124trArgs($this, args = C[133] || CT.C133) {
    let key = internacionalization$['Trans|get#tr']($this);
    if (args[S$.$isNotEmpty]) {
      for (let arg of args) {
        key = key[S$0.$replaceFirst](core.RegExp.new("%s"), arg[S$.$toString]());
      }
    }
    return key;
  };
  internacionalization$['Trans|get#trArgs'] = function Trans$124get$35trArgs($this) {
    return dart.fn((args = C[133] || CT.C133) => internacionalization$['Trans|trArgs']($this, args), T$.ListOfStringToString());
  };
  internacionalization$['Trans|trPlural'] = function Trans$124trPlural($this, pluralKey = null, i = null, args = C[133] || CT.C133) {
    return i === 1 ? internacionalization$['Trans|trArgs']($this, args) : internacionalization$['Trans|trArgs'](dart.nullCheck(pluralKey), args);
  };
  internacionalization$['Trans|get#trPlural'] = function Trans$124get$35trPlural($this) {
    return dart.fn((pluralKey = null, i = null, args = C[133] || CT.C133) => internacionalization$['Trans|trPlural']($this, pluralKey, i, args), T$.StringNAndintNAndListOfStringToString());
  };
  internacionalization$['Trans|trParams'] = function Trans$124trParams($this, params = C[3] || CT.C3) {
    let trans = internacionalization$['Trans|get#tr']($this);
    if (params[S$.$isNotEmpty]) {
      params[S$.$forEach](dart.fn((key, value) => {
        trans = trans[S$.$replaceAll]("@" + key, value);
      }, T$.StringAndStringTovoid()));
    }
    return trans;
  };
  internacionalization$['Trans|get#trParams'] = function Trans$124get$35trParams($this) {
    return dart.fn((params = C[3] || CT.C3) => internacionalization$['Trans|trParams']($this, params), T$.MapOfString$StringToString());
  };
  internacionalization$['Trans|trPluralParams'] = function Trans$124trPluralParams($this, pluralKey = null, i = null, params = C[3] || CT.C3) {
    return i === 1 ? internacionalization$['Trans|trParams']($this, params) : internacionalization$['Trans|trParams'](dart.nullCheck(pluralKey), params);
  };
  internacionalization$['Trans|get#trPluralParams'] = function Trans$124get$35trPluralParams($this) {
    return dart.fn((pluralKey = null, i = null, params = C[3] || CT.C3) => internacionalization$['Trans|trPluralParams']($this, pluralKey, i, params), T$.StringNAndintNAndMapOfString$StringToString());
  };
  dart.defineLazy(internacionalization$, {
    /*internacionalization$['LocalesIntl|_intlHost']*/get ['LocalesIntl|_intlHost']() {
      return new internacionalization$._IntlHost.new();
    }
  }, false);
  iterable_extensions['IterableExtensions|mapMany'] = function IterableExtensions$124mapMany(T, TRes, $this, selector) {
    return new (_js_helper.SyncIterable$(TRes)).new(function* IterableExtensions$124mapMany() {
      for (let item of $this) {
        let res = selector(item);
        if (res != null) yield* res;
      }
    });
  };
  iterable_extensions['IterableExtensions|get#mapMany'] = function IterableExtensions$124get$35mapMany(T, $this) {
    return dart.fn((TRes, selector) => iterable_extensions['IterableExtensions|mapMany'](T, TRes, $this, selector), dart.gFnType(TRes => {
      var __t$IterableOfTRes = () => (__t$IterableOfTRes = dart.constFn(core.Iterable$(TRes)))();
      var __t$IterableNOfTRes = () => (__t$IterableNOfTRes = dart.constFn(dart.nullable(__t$IterableOfTRes())))();
      return [__t$IterableOfTRes(), [dart.fnType(__t$IterableNOfTRes(), [T])]];
    }, TRes => {
      var __t$IterableOfTRes = () => (__t$IterableOfTRes = dart.constFn(core.Iterable$(TRes)))();
      var __t$IterableNOfTRes = () => (__t$IterableNOfTRes = dart.constFn(dart.nullable(__t$IterableOfTRes())))();
      return [T$.ObjectN()];
    }));
  };
  num_extensions['GetNumUtils|isLowerThan'] = function GetNumUtils$124isLowerThan($this, b) {
    return get_utils$.GetUtils.isLowerThan($this, b);
  };
  num_extensions['GetNumUtils|get#isLowerThan'] = function GetNumUtils$124get$35isLowerThan($this) {
    return dart.fn(b => num_extensions['GetNumUtils|isLowerThan']($this, b), T$.numTobool());
  };
  num_extensions['GetNumUtils|isGreaterThan'] = function GetNumUtils$124isGreaterThan($this, b) {
    return get_utils$.GetUtils.isGreaterThan($this, b);
  };
  num_extensions['GetNumUtils|get#isGreaterThan'] = function GetNumUtils$124get$35isGreaterThan($this) {
    return dart.fn(b => num_extensions['GetNumUtils|isGreaterThan']($this, b), T$.numTobool());
  };
  num_extensions['GetNumUtils|isEqual'] = function GetNumUtils$124isEqual($this, b) {
    return get_utils$.GetUtils.isEqual($this, b);
  };
  num_extensions['GetNumUtils|get#isEqual'] = function GetNumUtils$124get$35isEqual($this) {
    return dart.fn(b => num_extensions['GetNumUtils|isEqual']($this, b), T$.numTobool());
  };
  num_extensions['GetNumUtils|delay'] = function GetNumUtils$124delay($this, callback = null) {
    return async.async(dart.dynamic, function* GetNumUtils$124delay() {
      return async.Future.delayed(new core.Duration.new({milliseconds: ($this * 1000)[S$0.$round]()}), callback);
    });
  };
  num_extensions['GetNumUtils|get#delay'] = function GetNumUtils$124get$35delay($this) {
    return dart.fn((callback = null) => num_extensions['GetNumUtils|delay']($this, callback), T$.FnToFuture());
  };
  num_extensions['GetNumUtils|get#milliseconds'] = function GetNumUtils$124get$35milliseconds($this) {
    return new core.Duration.new({microseconds: ($this * 1000)[S$0.$round]()});
  };
  num_extensions['GetNumUtils|get#seconds'] = function GetNumUtils$124get$35seconds($this) {
    return new core.Duration.new({milliseconds: ($this * 1000)[S$0.$round]()});
  };
  num_extensions['GetNumUtils|get#minutes'] = function GetNumUtils$124get$35minutes($this) {
    return new core.Duration.new({seconds: ($this * 60)[S$0.$round]()});
  };
  num_extensions['GetNumUtils|get#hours'] = function GetNumUtils$124get$35hours($this) {
    return new core.Duration.new({minutes: ($this * 60)[S$0.$round]()});
  };
  num_extensions['GetNumUtils|get#days'] = function GetNumUtils$124get$35days($this) {
    return new core.Duration.new({hours: ($this * 24)[S$0.$round]()});
  };
  string_extensions['GetStringUtils|get#isNum'] = function GetStringUtils$124get$35isNum($this) {
    return get_utils$.GetUtils.isNum($this);
  };
  string_extensions['GetStringUtils|get#isNumericOnly'] = function GetStringUtils$124get$35isNumericOnly($this) {
    return get_utils$.GetUtils.isNumericOnly($this);
  };
  string_extensions['GetStringUtils|get#isAlphabetOnly'] = function GetStringUtils$124get$35isAlphabetOnly($this) {
    return get_utils$.GetUtils.isAlphabetOnly($this);
  };
  string_extensions['GetStringUtils|get#isBool'] = function GetStringUtils$124get$35isBool($this) {
    return get_utils$.GetUtils.isBool($this);
  };
  string_extensions['GetStringUtils|get#isVectorFileName'] = function GetStringUtils$124get$35isVectorFileName($this) {
    return get_utils$.GetUtils.isVector($this);
  };
  string_extensions['GetStringUtils|get#isImageFileName'] = function GetStringUtils$124get$35isImageFileName($this) {
    return get_utils$.GetUtils.isImage($this);
  };
  string_extensions['GetStringUtils|get#isAudioFileName'] = function GetStringUtils$124get$35isAudioFileName($this) {
    return get_utils$.GetUtils.isAudio($this);
  };
  string_extensions['GetStringUtils|get#isVideoFileName'] = function GetStringUtils$124get$35isVideoFileName($this) {
    return get_utils$.GetUtils.isVideo($this);
  };
  string_extensions['GetStringUtils|get#isTxtFileName'] = function GetStringUtils$124get$35isTxtFileName($this) {
    return get_utils$.GetUtils.isTxt($this);
  };
  string_extensions['GetStringUtils|get#isDocumentFileName'] = function GetStringUtils$124get$35isDocumentFileName($this) {
    return get_utils$.GetUtils.isWord($this);
  };
  string_extensions['GetStringUtils|get#isExcelFileName'] = function GetStringUtils$124get$35isExcelFileName($this) {
    return get_utils$.GetUtils.isExcel($this);
  };
  string_extensions['GetStringUtils|get#isPPTFileName'] = function GetStringUtils$124get$35isPPTFileName($this) {
    return get_utils$.GetUtils.isPPT($this);
  };
  string_extensions['GetStringUtils|get#isAPKFileName'] = function GetStringUtils$124get$35isAPKFileName($this) {
    return get_utils$.GetUtils.isAPK($this);
  };
  string_extensions['GetStringUtils|get#isPDFFileName'] = function GetStringUtils$124get$35isPDFFileName($this) {
    return get_utils$.GetUtils.isPDF($this);
  };
  string_extensions['GetStringUtils|get#isHTMLFileName'] = function GetStringUtils$124get$35isHTMLFileName($this) {
    return get_utils$.GetUtils.isHTML($this);
  };
  string_extensions['GetStringUtils|get#isURL'] = function GetStringUtils$124get$35isURL($this) {
    return get_utils$.GetUtils.isURL($this);
  };
  string_extensions['GetStringUtils|get#isEmail'] = function GetStringUtils$124get$35isEmail($this) {
    return get_utils$.GetUtils.isEmail($this);
  };
  string_extensions['GetStringUtils|get#isPhoneNumber'] = function GetStringUtils$124get$35isPhoneNumber($this) {
    return get_utils$.GetUtils.isPhoneNumber($this);
  };
  string_extensions['GetStringUtils|get#isDateTime'] = function GetStringUtils$124get$35isDateTime($this) {
    return get_utils$.GetUtils.isDateTime($this);
  };
  string_extensions['GetStringUtils|get#isMD5'] = function GetStringUtils$124get$35isMD5($this) {
    return get_utils$.GetUtils.isMD5($this);
  };
  string_extensions['GetStringUtils|get#isSHA1'] = function GetStringUtils$124get$35isSHA1($this) {
    return get_utils$.GetUtils.isSHA1($this);
  };
  string_extensions['GetStringUtils|get#isSHA256'] = function GetStringUtils$124get$35isSHA256($this) {
    return get_utils$.GetUtils.isSHA256($this);
  };
  string_extensions['GetStringUtils|get#isBinary'] = function GetStringUtils$124get$35isBinary($this) {
    return get_utils$.GetUtils.isBinary($this);
  };
  string_extensions['GetStringUtils|get#isIPv4'] = function GetStringUtils$124get$35isIPv4($this) {
    return get_utils$.GetUtils.isIPv4($this);
  };
  string_extensions['GetStringUtils|get#isIPv6'] = function GetStringUtils$124get$35isIPv6($this) {
    return get_utils$.GetUtils.isIPv6($this);
  };
  string_extensions['GetStringUtils|get#isHexadecimal'] = function GetStringUtils$124get$35isHexadecimal($this) {
    return get_utils$.GetUtils.isHexadecimal($this);
  };
  string_extensions['GetStringUtils|get#isPalindrom'] = function GetStringUtils$124get$35isPalindrom($this) {
    return get_utils$.GetUtils.isPalindrom($this);
  };
  string_extensions['GetStringUtils|get#isPassport'] = function GetStringUtils$124get$35isPassport($this) {
    return get_utils$.GetUtils.isPassport($this);
  };
  string_extensions['GetStringUtils|get#isCurrency'] = function GetStringUtils$124get$35isCurrency($this) {
    return get_utils$.GetUtils.isCurrency($this);
  };
  string_extensions['GetStringUtils|get#isCpf'] = function GetStringUtils$124get$35isCpf($this) {
    return get_utils$.GetUtils.isCpf($this);
  };
  string_extensions['GetStringUtils|get#isCnpj'] = function GetStringUtils$124get$35isCnpj($this) {
    return get_utils$.GetUtils.isCnpj($this);
  };
  string_extensions['GetStringUtils|isCaseInsensitiveContains'] = function GetStringUtils$124isCaseInsensitiveContains($this, b) {
    return get_utils$.GetUtils.isCaseInsensitiveContains($this, b);
  };
  string_extensions['GetStringUtils|get#isCaseInsensitiveContains'] = function GetStringUtils$124get$35isCaseInsensitiveContains($this) {
    return dart.fn(b => string_extensions['GetStringUtils|isCaseInsensitiveContains']($this, b), T$.StringTobool());
  };
  string_extensions['GetStringUtils|isCaseInsensitiveContainsAny'] = function GetStringUtils$124isCaseInsensitiveContainsAny($this, b) {
    return get_utils$.GetUtils.isCaseInsensitiveContainsAny($this, b);
  };
  string_extensions['GetStringUtils|get#isCaseInsensitiveContainsAny'] = function GetStringUtils$124get$35isCaseInsensitiveContainsAny($this) {
    return dart.fn(b => string_extensions['GetStringUtils|isCaseInsensitiveContainsAny']($this, b), T$.StringTobool());
  };
  string_extensions['GetStringUtils|get#capitalize'] = function GetStringUtils$124get$35capitalize($this) {
    return get_utils$.GetUtils.capitalize($this);
  };
  string_extensions['GetStringUtils|get#capitalizeFirst'] = function GetStringUtils$124get$35capitalizeFirst($this) {
    return get_utils$.GetUtils.capitalizeFirst($this);
  };
  string_extensions['GetStringUtils|get#removeAllWhitespace'] = function GetStringUtils$124get$35removeAllWhitespace($this) {
    return get_utils$.GetUtils.removeAllWhitespace($this);
  };
  string_extensions['GetStringUtils|get#camelCase'] = function GetStringUtils$124get$35camelCase($this) {
    return get_utils$.GetUtils.camelCase($this);
  };
  string_extensions['GetStringUtils|get#paramCase'] = function GetStringUtils$124get$35paramCase($this) {
    return get_utils$.GetUtils.paramCase($this);
  };
  string_extensions['GetStringUtils|numericOnly'] = function GetStringUtils$124numericOnly($this, opts) {
    let firstWordOnly = opts && 'firstWordOnly' in opts ? opts.firstWordOnly : false;
    return get_utils$.GetUtils.numericOnly($this, {firstWordOnly: firstWordOnly});
  };
  string_extensions['GetStringUtils|get#numericOnly'] = function GetStringUtils$124get$35numericOnly($this) {
    return dart.fn(opts => {
      let firstWordOnly = opts && 'firstWordOnly' in opts ? opts.firstWordOnly : false;
      return string_extensions['GetStringUtils|numericOnly']($this, {firstWordOnly: firstWordOnly});
    }, T$.__ToString());
  };
  string_extensions['GetStringUtils|createPath'] = function GetStringUtils$124createPath($this, segments = null) {
    let path = $this[S$.$startsWith]("/") ? $this : "/" + $this;
    return get_utils$.GetUtils.createPath(path, segments);
  };
  string_extensions['GetStringUtils|get#createPath'] = function GetStringUtils$124get$35createPath($this) {
    return dart.fn((segments = null) => string_extensions['GetStringUtils|createPath']($this, segments), T$.IterableNToString());
  };
  widget_extensions['WidgetPaddingX|paddingAll'] = function WidgetPaddingX$124paddingAll($this, padding) {
    return new basic.Padding.new({padding: new edge_insets.EdgeInsets.all(padding), child: $this});
  };
  widget_extensions['WidgetPaddingX|get#paddingAll'] = function WidgetPaddingX$124get$35paddingAll($this) {
    return dart.fn(padding => widget_extensions['WidgetPaddingX|paddingAll']($this, padding), T$.doubleToWidget());
  };
  widget_extensions['WidgetPaddingX|paddingSymmetric'] = function WidgetPaddingX$124paddingSymmetric($this, opts) {
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
    let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
    return new basic.Padding.new({padding: new edge_insets.EdgeInsets.symmetric({horizontal: horizontal, vertical: vertical}), child: $this});
  };
  widget_extensions['WidgetPaddingX|get#paddingSymmetric'] = function WidgetPaddingX$124get$35paddingSymmetric($this) {
    return dart.fn(opts => {
      let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
      let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
      return widget_extensions['WidgetPaddingX|paddingSymmetric']($this, {horizontal: horizontal, vertical: vertical});
    }, T$.__ToWidget());
  };
  widget_extensions['WidgetPaddingX|paddingOnly'] = function WidgetPaddingX$124paddingOnly($this, opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    return new basic.Padding.new({padding: new edge_insets.EdgeInsets.only({top: top, left: left, right: right, bottom: bottom}), child: $this});
  };
  widget_extensions['WidgetPaddingX|get#paddingOnly'] = function WidgetPaddingX$124get$35paddingOnly($this) {
    return dart.fn(opts => {
      let left = opts && 'left' in opts ? opts.left : 0;
      let top = opts && 'top' in opts ? opts.top : 0;
      let right = opts && 'right' in opts ? opts.right : 0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
      return widget_extensions['WidgetPaddingX|paddingOnly']($this, {left: left, top: top, right: right, bottom: bottom});
    }, T$.__ToWidget$1());
  };
  widget_extensions['WidgetPaddingX|get#paddingZero'] = function WidgetPaddingX$124get$35paddingZero($this) {
    return new basic.Padding.new({padding: edge_insets.EdgeInsets.zero, child: $this});
  };
  widget_extensions['WidgetMarginX|marginAll'] = function WidgetMarginX$124marginAll($this, margin) {
    return new container.Container.new({margin: new edge_insets.EdgeInsets.all(margin), child: $this});
  };
  widget_extensions['WidgetMarginX|get#marginAll'] = function WidgetMarginX$124get$35marginAll($this) {
    return dart.fn(margin => widget_extensions['WidgetMarginX|marginAll']($this, margin), T$.doubleToWidget());
  };
  widget_extensions['WidgetMarginX|marginSymmetric'] = function WidgetMarginX$124marginSymmetric($this, opts) {
    let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
    let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
    return new container.Container.new({margin: new edge_insets.EdgeInsets.symmetric({horizontal: horizontal, vertical: vertical}), child: $this});
  };
  widget_extensions['WidgetMarginX|get#marginSymmetric'] = function WidgetMarginX$124get$35marginSymmetric($this) {
    return dart.fn(opts => {
      let horizontal = opts && 'horizontal' in opts ? opts.horizontal : 0;
      let vertical = opts && 'vertical' in opts ? opts.vertical : 0;
      return widget_extensions['WidgetMarginX|marginSymmetric']($this, {horizontal: horizontal, vertical: vertical});
    }, T$.__ToWidget());
  };
  widget_extensions['WidgetMarginX|marginOnly'] = function WidgetMarginX$124marginOnly($this, opts) {
    let left = opts && 'left' in opts ? opts.left : 0;
    let top = opts && 'top' in opts ? opts.top : 0;
    let right = opts && 'right' in opts ? opts.right : 0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
    return new container.Container.new({margin: new edge_insets.EdgeInsets.only({top: top, left: left, right: right, bottom: bottom}), child: $this});
  };
  widget_extensions['WidgetMarginX|get#marginOnly'] = function WidgetMarginX$124get$35marginOnly($this) {
    return dart.fn(opts => {
      let left = opts && 'left' in opts ? opts.left : 0;
      let top = opts && 'top' in opts ? opts.top : 0;
      let right = opts && 'right' in opts ? opts.right : 0;
      let bottom = opts && 'bottom' in opts ? opts.bottom : 0;
      return widget_extensions['WidgetMarginX|marginOnly']($this, {left: left, top: top, right: right, bottom: bottom});
    }, T$.__ToWidget$1());
  };
  widget_extensions['WidgetMarginX|get#marginZero'] = function WidgetMarginX$124get$35marginZero($this) {
    return new container.Container.new({margin: edge_insets.EdgeInsets.zero, child: $this});
  };
  widget_extensions['WidgetSliverBoxX|get#sliverBox'] = function WidgetSliverBoxX$124get$35sliverBox($this) {
    return new basic.SliverToBoxAdapter.new({child: $this});
  };
  platform_web.GeneralPlatform = class GeneralPlatform extends core.Object {
    static get isWeb() {
      return true;
    }
    static get isMacOS() {
      return platform_web._navigator[S$0.$appVersion][S$.$contains]("Mac OS") && !platform_web.GeneralPlatform.isIOS;
    }
    static get isWindows() {
      return platform_web._navigator[S$0.$appVersion][S$.$contains]("Win");
    }
    static get isLinux() {
      return (platform_web._navigator[S$0.$appVersion][S$.$contains]("Linux") || platform_web._navigator[S$0.$appVersion][S$.$contains]("x11")) && !platform_web.GeneralPlatform.isAndroid;
    }
    static get isAndroid() {
      return platform_web._navigator[S$0.$appVersion][S$.$contains]("Android ");
    }
    static get isIOS() {
      return get_utils$.GetUtils.hasMatch(platform_web._navigator.platform, "/iPad|iPhone|iPod/") || platform_web._navigator.platform === "MacIntel" && dart.nullCheck(platform_web._navigator.maxTouchPoints) > 1;
    }
    static get isFuchsia() {
      return false;
    }
    static get isDesktop() {
      return platform_web.GeneralPlatform.isMacOS || platform_web.GeneralPlatform.isWindows || platform_web.GeneralPlatform.isLinux;
    }
    static ['_#new#tearOff']() {
      return new platform_web.GeneralPlatform.new();
    }
  };
  (platform_web.GeneralPlatform.new = function() {
    ;
  }).prototype = platform_web.GeneralPlatform.prototype;
  dart.addTypeTests(platform_web.GeneralPlatform);
  dart.addTypeCaches(platform_web.GeneralPlatform);
  dart.setStaticGetterSignature(platform_web.GeneralPlatform, () => ['isWeb', 'isMacOS', 'isWindows', 'isLinux', 'isAndroid', 'isIOS', 'isFuchsia', 'isDesktop']);
  dart.setLibraryUri(platform_web.GeneralPlatform, I[74]);
  dart.defineLazy(platform_web, {
    /*platform_web._navigator*/get _navigator() {
      return html.window[S$0.$navigator];
    },
    set _navigator(value) {}
  }, false);
  body_decoder.bodyDecoded = function bodyDecoded(T, request, stringBody, mimeType) {
    let t721, t720;
    let body = null;
    let bodyToDecode = null;
    if (mimeType != null && mimeType[S$.$contains]("application/json")) {
      try {
        bodyToDecode = convert.jsonDecode(stringBody);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.FormatException.is(_)) {
          t720 = get_main.Get;
          t721 = "Cannot decode server response to json";
          t720.log(t721);
          bodyToDecode = stringBody;
        } else
          throw e;
      }
    } else {
      bodyToDecode = stringBody;
    }
    try {
      if (stringBody === "") {
        body = null;
      } else if (request.decoder == null) {
        body = dart.nullable(T).as(bodyToDecode);
      } else {
        body = dart.nullCheck(request.decoder)(bodyToDecode);
      }
    } catch (e$) {
      let _ = dart.getThrown(e$);
      if (core.Exception.is(_)) {
        body = T.as(stringBody);
      } else
        throw e$;
    }
    return body;
  };
  socket_notifier.Close = class Close extends core.Object {
    get message() {
      return this[S$0.message$4];
    }
    set message(value) {
      super.message = value;
    }
    get reason() {
      return this[S$0.reason];
    }
    set reason(value) {
      super.reason = value;
    }
    static ['_#new#tearOff'](message, reason) {
      return new socket_notifier.Close.new(message, reason);
    }
    toString() {
      return "Closed by server [" + dart.str(this.reason) + " => " + dart.str(this.message) + "]!";
    }
  };
  (socket_notifier.Close.new = function(message, reason) {
    this[S$0.message$4] = message;
    this[S$0.reason] = reason;
    ;
  }).prototype = socket_notifier.Close.prototype;
  dart.addTypeTests(socket_notifier.Close);
  dart.addTypeCaches(socket_notifier.Close);
  dart.setLibraryUri(socket_notifier.Close, I[75]);
  dart.setFieldSignature(socket_notifier.Close, () => ({
    __proto__: dart.getFields(socket_notifier.Close.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String)),
    reason: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(socket_notifier.Close, ['toString']);
  socket_notifier.SocketNotifier = class SocketNotifier extends core.Object {
    get open() {
      let t721;
      t721 = this[S$0.__SocketNotifier_open];
      return t721 == null ? dart.throw(new _internal.LateError.fieldNI("open")) : t721;
    }
    set open(open$35param) {
      this[S$0.__SocketNotifier_open] = open$35param;
    }
    addCloses(socket) {
      dart.nullCheck(this[S$0._onCloses])[S$.$add](socket);
    }
    addErrors(socket) {
      dart.nullCheck(this[S$0._onErrors])[S$.$add](socket);
    }
    addEvents(event, socket) {
      dart.nullCheck(this[S$0._onEvents])[S$.$_set](event, socket);
    }
    addMessages(socket) {
      dart.nullCheck(this[S$0._onMessages])[S$.$add](socket);
    }
    dispose() {
      this[S$0._onMessages] = null;
      this[S$0._onEvents] = null;
      this[S$0._onCloses] = null;
      this[S$0._onErrors] = null;
    }
    notifyClose(err) {
      for (let item of dart.nullCheck(this[S$0._onCloses])) {
        item(err);
      }
    }
    notifyData(data) {
      for (let item of dart.nullCheck(this[S$0._onMessages])) {
        item(data);
      }
      if (typeof data == 'string') {
        this[S$0._tryOn](data);
      }
    }
    notifyError(err) {
      for (let item of dart.nullCheck(this[S$0._onErrors])) {
        item(err);
      }
    }
    [S$0._tryOn](message) {
      try {
        let msg = convert.jsonDecode(message);
        let event = dart.dsend(msg, '_get', ["type"]);
        let data = dart.dsend(msg, '_get', ["data"]);
        if (dart.nullCheck(this[S$0._onEvents])[S$.$containsKey](event)) {
          dart.nullCheck(dart.nullCheck(this[S$0._onEvents])[S$.$_get](event))(data);
        }
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return;
        } else
          throw e;
      }
    }
    static ['_#new#tearOff']() {
      return new socket_notifier.SocketNotifier.new();
    }
  };
  (socket_notifier.SocketNotifier.new = function() {
    this[S$0._onMessages] = T$.JSArrayOfdynamicTovoid().of([]);
    this[S$0._onEvents] = new (T$.IdentityMapOfString$dynamicTovoid()).new();
    this[S$0._onCloses] = T.JSArrayOfCloseTovoid().of([]);
    this[S$0._onErrors] = T.JSArrayOfCloseTovoid().of([]);
    this[S$0.__SocketNotifier_open] = null;
    ;
  }).prototype = socket_notifier.SocketNotifier.prototype;
  dart.addTypeTests(socket_notifier.SocketNotifier);
  dart.addTypeCaches(socket_notifier.SocketNotifier);
  dart.setMethodSignature(socket_notifier.SocketNotifier, () => ({
    __proto__: dart.getMethods(socket_notifier.SocketNotifier.__proto__),
    addCloses: dart.fnType(dart.void, [dart.fnType(dart.void, [socket_notifier.Close])]),
    addErrors: dart.fnType(dart.void, [dart.fnType(dart.void, [socket_notifier.Close])]),
    addEvents: dart.fnType(dart.void, [core.String, dart.fnType(dart.void, [dart.dynamic])]),
    addMessages: dart.fnType(dart.void, [dart.fnType(dart.void, [dart.dynamic])]),
    dispose: dart.fnType(dart.void, []),
    notifyClose: dart.fnType(dart.void, [socket_notifier.Close]),
    notifyData: dart.fnType(dart.void, [dart.dynamic]),
    notifyError: dart.fnType(dart.void, [socket_notifier.Close]),
    [S$0._tryOn]: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(socket_notifier.SocketNotifier, () => ({
    __proto__: dart.getGetters(socket_notifier.SocketNotifier.__proto__),
    open: dart.fnType(dart.void, [])
  }));
  dart.setSetterSignature(socket_notifier.SocketNotifier, () => ({
    __proto__: dart.getSetters(socket_notifier.SocketNotifier.__proto__),
    open: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(socket_notifier.SocketNotifier, I[75]);
  dart.setFieldSignature(socket_notifier.SocketNotifier, () => ({
    __proto__: dart.getFields(socket_notifier.SocketNotifier.__proto__),
    [S$0._onMessages]: dart.fieldType(dart.nullable(core.List$(dart.fnType(dart.void, [dart.dynamic])))),
    [S$0._onEvents]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.fnType(dart.void, [dart.dynamic])))),
    [S$0._onCloses]: dart.fieldType(dart.nullable(core.List$(dart.fnType(dart.void, [socket_notifier.Close])))),
    [S$0._onErrors]: dart.fieldType(dart.nullable(core.List$(dart.fnType(dart.void, [socket_notifier.Close])))),
    [S$0.__SocketNotifier_open]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [])))
  }));
  default_transitions.LeftToRightFadeTransition = class LeftToRightFadeTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: C[134] || CT.C134, end: ui.Offset.zero}).animate(animation), child: new transitions.FadeTransition.new({opacity: animation, child: new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: ui.Offset.zero, end: C[135] || CT.C135}).animate(secondaryAnimation), child: child})})});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.LeftToRightFadeTransition.new();
    }
  };
  (default_transitions.LeftToRightFadeTransition.new = function() {
    ;
  }).prototype = default_transitions.LeftToRightFadeTransition.prototype;
  dart.addTypeTests(default_transitions.LeftToRightFadeTransition);
  dart.addTypeCaches(default_transitions.LeftToRightFadeTransition);
  dart.setMethodSignature(default_transitions.LeftToRightFadeTransition, () => ({
    __proto__: dart.getMethods(default_transitions.LeftToRightFadeTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.LeftToRightFadeTransition, I[76]);
  default_transitions.RightToLeftFadeTransition = class RightToLeftFadeTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: C[135] || CT.C135, end: ui.Offset.zero}).animate(animation), child: new transitions.FadeTransition.new({opacity: animation, child: new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: ui.Offset.zero, end: C[134] || CT.C134}).animate(secondaryAnimation), child: child})})});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.RightToLeftFadeTransition.new();
    }
  };
  (default_transitions.RightToLeftFadeTransition.new = function() {
    ;
  }).prototype = default_transitions.RightToLeftFadeTransition.prototype;
  dart.addTypeTests(default_transitions.RightToLeftFadeTransition);
  dart.addTypeCaches(default_transitions.RightToLeftFadeTransition);
  dart.setMethodSignature(default_transitions.RightToLeftFadeTransition, () => ({
    __proto__: dart.getMethods(default_transitions.RightToLeftFadeTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.RightToLeftFadeTransition, I[76]);
  default_transitions.NoTransition = class NoTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return child;
    }
    static ['_#new#tearOff']() {
      return new default_transitions.NoTransition.new();
    }
  };
  (default_transitions.NoTransition.new = function() {
    ;
  }).prototype = default_transitions.NoTransition.prototype;
  dart.addTypeTests(default_transitions.NoTransition);
  dart.addTypeCaches(default_transitions.NoTransition);
  dart.setMethodSignature(default_transitions.NoTransition, () => ({
    __proto__: dart.getMethods(default_transitions.NoTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, curves.Curve, alignment$.Alignment, animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.NoTransition, I[76]);
  default_transitions.FadeInTransition = class FadeInTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.FadeTransition.new({opacity: animation, child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.FadeInTransition.new();
    }
  };
  (default_transitions.FadeInTransition.new = function() {
    ;
  }).prototype = default_transitions.FadeInTransition.prototype;
  dart.addTypeTests(default_transitions.FadeInTransition);
  dart.addTypeCaches(default_transitions.FadeInTransition);
  dart.setMethodSignature(default_transitions.FadeInTransition, () => ({
    __proto__: dart.getMethods(default_transitions.FadeInTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.FadeInTransition, I[76]);
  default_transitions.SlideDownTransition = class SlideDownTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: new ui.Offset.new(0, 1), end: ui.Offset.zero}).animate(animation), child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.SlideDownTransition.new();
    }
  };
  (default_transitions.SlideDownTransition.new = function() {
    ;
  }).prototype = default_transitions.SlideDownTransition.prototype;
  dart.addTypeTests(default_transitions.SlideDownTransition);
  dart.addTypeCaches(default_transitions.SlideDownTransition);
  dart.setMethodSignature(default_transitions.SlideDownTransition, () => ({
    __proto__: dart.getMethods(default_transitions.SlideDownTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.SlideDownTransition, I[76]);
  default_transitions.SlideLeftTransition = class SlideLeftTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: new ui.Offset.new(-1, 0), end: ui.Offset.zero}).animate(animation), child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.SlideLeftTransition.new();
    }
  };
  (default_transitions.SlideLeftTransition.new = function() {
    ;
  }).prototype = default_transitions.SlideLeftTransition.prototype;
  dart.addTypeTests(default_transitions.SlideLeftTransition);
  dart.addTypeCaches(default_transitions.SlideLeftTransition);
  dart.setMethodSignature(default_transitions.SlideLeftTransition, () => ({
    __proto__: dart.getMethods(default_transitions.SlideLeftTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.SlideLeftTransition, I[76]);
  default_transitions.SlideRightTransition = class SlideRightTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: new ui.Offset.new(1, 0), end: ui.Offset.zero}).animate(animation), child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.SlideRightTransition.new();
    }
  };
  (default_transitions.SlideRightTransition.new = function() {
    ;
  }).prototype = default_transitions.SlideRightTransition.prototype;
  dart.addTypeTests(default_transitions.SlideRightTransition);
  dart.addTypeCaches(default_transitions.SlideRightTransition);
  dart.setMethodSignature(default_transitions.SlideRightTransition, () => ({
    __proto__: dart.getMethods(default_transitions.SlideRightTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.SlideRightTransition, I[76]);
  default_transitions.SlideTopTransition = class SlideTopTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.SlideTransition.new({position: new (T.TweenOfOffset()).new({begin: new ui.Offset.new(0, -1), end: ui.Offset.zero}).animate(animation), child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.SlideTopTransition.new();
    }
  };
  (default_transitions.SlideTopTransition.new = function() {
    ;
  }).prototype = default_transitions.SlideTopTransition.prototype;
  dart.addTypeTests(default_transitions.SlideTopTransition);
  dart.addTypeCaches(default_transitions.SlideTopTransition);
  dart.setMethodSignature(default_transitions.SlideTopTransition, () => ({
    __proto__: dart.getMethods(default_transitions.SlideTopTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.SlideTopTransition, I[76]);
  default_transitions.ZoomInTransition = class ZoomInTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new transitions.ScaleTransition.new({scale: animation, child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.ZoomInTransition.new();
    }
  };
  (default_transitions.ZoomInTransition.new = function() {
    ;
  }).prototype = default_transitions.ZoomInTransition.prototype;
  dart.addTypeTests(default_transitions.ZoomInTransition);
  dart.addTypeCaches(default_transitions.ZoomInTransition);
  dart.setMethodSignature(default_transitions.ZoomInTransition, () => ({
    __proto__: dart.getMethods(default_transitions.ZoomInTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.ZoomInTransition, I[76]);
  default_transitions.SizeTransitions = class SizeTransitions extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new basic.Align.new({alignment: alignment$.Alignment.center, child: new transitions.SizeTransition.new({sizeFactor: new animations.CurvedAnimation.new({parent: animation, curve: curve}), child: child})});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.SizeTransitions.new();
    }
  };
  (default_transitions.SizeTransitions.new = function() {
    ;
  }).prototype = default_transitions.SizeTransitions.prototype;
  dart.addTypeTests(default_transitions.SizeTransitions);
  dart.addTypeCaches(default_transitions.SizeTransitions);
  dart.setMethodSignature(default_transitions.SizeTransitions, () => ({
    __proto__: dart.getMethods(default_transitions.SizeTransitions.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, curves.Curve, dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.SizeTransitions, I[76]);
  default_transitions.CircularRevealTransition = class CircularRevealTransition extends core.Object {
    buildTransitions(context, curve, alignment, animation, secondaryAnimation, child) {
      return new basic.ClipPath.new({clipper: new circular_reveal_clipper.CircularRevealClipper.new({fraction: animation.value, centerAlignment: alignment$.Alignment.center, centerOffset: ui.Offset.zero, minRadius: 0, maxRadius: 800}), child: child});
    }
    static ['_#new#tearOff']() {
      return new default_transitions.CircularRevealTransition.new();
    }
  };
  (default_transitions.CircularRevealTransition.new = function() {
    ;
  }).prototype = default_transitions.CircularRevealTransition.prototype;
  dart.addTypeTests(default_transitions.CircularRevealTransition);
  dart.addTypeCaches(default_transitions.CircularRevealTransition);
  dart.setMethodSignature(default_transitions.CircularRevealTransition, () => ({
    __proto__: dart.getMethods(default_transitions.CircularRevealTransition.__proto__),
    buildTransitions: dart.fnType(framework.Widget, [framework.BuildContext, dart.nullable(curves.Curve), dart.nullable(alignment$.Alignment), animation.Animation$(core.double), animation.Animation$(core.double), framework.Widget])
  }));
  dart.setLibraryUri(default_transitions.CircularRevealTransition, I[76]);
  circular_reveal_clipper.CircularRevealClipper = class CircularRevealClipper extends proxy_box.CustomClipper$(ui.Path) {
    get fraction() {
      return this[S$0.fraction];
    }
    set fraction(value) {
      super.fraction = value;
    }
    get centerAlignment() {
      return this[S$0.centerAlignment];
    }
    set centerAlignment(value) {
      super.centerAlignment = value;
    }
    get centerOffset() {
      return this[S$0.centerOffset];
    }
    set centerOffset(value) {
      super.centerOffset = value;
    }
    get minRadius() {
      return this[S$0.minRadius];
    }
    set minRadius(value) {
      super.minRadius = value;
    }
    get maxRadius() {
      return this[S$0.maxRadius];
    }
    set maxRadius(value) {
      super.maxRadius = value;
    }
    static ['_#new#tearOff'](opts) {
      let fraction = opts && 'fraction' in opts ? opts.fraction : null;
      let centerAlignment = opts && 'centerAlignment' in opts ? opts.centerAlignment : null;
      let centerOffset = opts && 'centerOffset' in opts ? opts.centerOffset : null;
      let minRadius = opts && 'minRadius' in opts ? opts.minRadius : null;
      let maxRadius = opts && 'maxRadius' in opts ? opts.maxRadius : null;
      return new circular_reveal_clipper.CircularRevealClipper.new({fraction: fraction, centerAlignment: centerAlignment, centerOffset: centerOffset, minRadius: minRadius, maxRadius: maxRadius});
    }
    getClip(size) {
      let t722, t722$, t722$0, t722$1, t722$2, t722$3;
      let center = (t722$0 = (t722$ = (t722 = this.centerAlignment, t722 == null ? null : t722.alongSize(size)), t722$ == null ? this.centerOffset : t722$), t722$0 == null ? new ui.Offset.new(size.width / 2, size.height / 2) : t722$0);
      let minRadius = (t722$1 = this.minRadius, t722$1 == null ? 0 : t722$1);
      let maxRadius = (t722$2 = this.maxRadius, t722$2 == null ? circular_reveal_clipper.CircularRevealClipper.calcMaxRadius(size, center) : t722$2);
      t722$3 = ui.Path.new();
      return (() => {
        t722$3.addOval(new ui.Rect.fromCircle({center: center, radius: dart.nullCheck(ui.lerpDouble(minRadius, maxRadius, this.fraction))}));
        return t722$3;
      })();
    }
    shouldReclip(oldClipper) {
      T.CustomClipperOfPath().as(oldClipper);
      return true;
    }
    static calcMaxRadius(size, center) {
      let w = math.max(core.double, center.dx, size.width - center.dx);
      let h = math.max(core.double, center.dy, size.height - center.dy);
      return math.sqrt(w * w + h * h);
    }
  };
  (circular_reveal_clipper.CircularRevealClipper.new = function(opts) {
    let fraction = opts && 'fraction' in opts ? opts.fraction : null;
    let centerAlignment = opts && 'centerAlignment' in opts ? opts.centerAlignment : null;
    let centerOffset = opts && 'centerOffset' in opts ? opts.centerOffset : null;
    let minRadius = opts && 'minRadius' in opts ? opts.minRadius : null;
    let maxRadius = opts && 'maxRadius' in opts ? opts.maxRadius : null;
    this[S$0.fraction] = fraction;
    this[S$0.centerAlignment] = centerAlignment;
    this[S$0.centerOffset] = centerOffset;
    this[S$0.minRadius] = minRadius;
    this[S$0.maxRadius] = maxRadius;
    circular_reveal_clipper.CircularRevealClipper.__proto__.new.call(this);
    ;
  }).prototype = circular_reveal_clipper.CircularRevealClipper.prototype;
  dart.addTypeTests(circular_reveal_clipper.CircularRevealClipper);
  dart.addTypeCaches(circular_reveal_clipper.CircularRevealClipper);
  dart.setMethodSignature(circular_reveal_clipper.CircularRevealClipper, () => ({
    __proto__: dart.getMethods(circular_reveal_clipper.CircularRevealClipper.__proto__),
    getClip: dart.fnType(ui.Path, [ui.Size]),
    shouldReclip: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setStaticMethodSignature(circular_reveal_clipper.CircularRevealClipper, () => ['calcMaxRadius']);
  dart.setLibraryUri(circular_reveal_clipper.CircularRevealClipper, I[77]);
  dart.setFieldSignature(circular_reveal_clipper.CircularRevealClipper, () => ({
    __proto__: dart.getFields(circular_reveal_clipper.CircularRevealClipper.__proto__),
    fraction: dart.finalFieldType(core.double),
    centerAlignment: dart.finalFieldType(dart.nullable(alignment$.Alignment)),
    centerOffset: dart.finalFieldType(dart.nullable(ui.Offset)),
    minRadius: dart.finalFieldType(dart.nullable(core.double)),
    maxRadius: dart.finalFieldType(dart.nullable(core.double))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:get/get.dart": get,
    "package:get/get_common/get_reset.dart": get_reset,
    "package:get/get_connect/connect.dart": connect,
    "package:get/get_core/get_core.dart": get_core,
    "package:get/get_instance/get_instance.dart": get_instance,
    "package:get/get_navigation/get_navigation.dart": get_navigation,
    "package:get/get_rx/get_rx.dart": get_rx,
    "package:get/get_state_manager/get_state_manager.dart": get_state_manager,
    "package:get/get_utils/get_utils.dart": get_utils,
    "package:get/route_manager.dart": route_manager,
    "package:get/get_instance/src/lifecycle.dart": lifecycle,
    "package:get/get_connect/http/src/certificates/certificates.dart": certificates,
    "package:get/get_connect/http/src/exceptions/exceptions.dart": exceptions,
    "package:get/get_connect/http/src/http.dart": http,
    "package:get/get_connect/http/src/response/response.dart": response$,
    "package:get/get_connect/sockets/sockets.dart": sockets,
    "package:get/get_connect/http/src/multipart/form_data.dart": form_data,
    "package:get/get_connect/http/src/multipart/multipart_file.dart": multipart_file,
    "package:get/get_core/src/get_interface.dart": get_interface,
    "package:get/get_core/src/get_main.dart": get_main,
    "package:get/get_core/src/log.dart": log,
    "package:get/get_core/src/smart_management.dart": smart_management,
    "package:get/get_core/src/typedefs.dart": typedefs,
    "package:get/get_instance/src/bindings_interface.dart": bindings_interface,
    "package:get/get_instance/src/extension_instance.dart": extension_instance,
    "package:get/get_instance/src/get_instance.dart": get_instance$,
    "package:get/get_navigation/src/bottomsheet/bottomsheet.dart": bottomsheet$,
    "package:get/get_navigation/src/extension_navigation.dart": extension_navigation,
    "package:get/get_navigation/src/nav2/get_information_parser.dart": get_information_parser,
    "package:get/get_navigation/src/nav2/get_nav_config.dart": get_nav_config,
    "package:get/get_navigation/src/nav2/get_router_delegate.dart": get_router_delegate,
    "package:get/get_navigation/src/nav2/router_outlet.dart": router_outlet,
    "package:get/get_navigation/src/root/get_cupertino_app.dart": get_cupertino_app,
    "package:get/get_navigation/src/root/get_material_app.dart": get_material_app,
    "package:get/get_navigation/src/root/internacionalization.dart": internacionalization,
    "package:get/get_navigation/src/root/root_controller.dart": root_controller,
    "package:get/get_navigation/src/routes/custom_transition.dart": custom_transition,
    "package:get/get_navigation/src/routes/default_route.dart": default_route,
    "package:get/get_navigation/src/routes/get_route.dart": get_route,
    "package:get/get_navigation/src/routes/observers/route_observer.dart": route_observer,
    "package:get/get_navigation/src/routes/route_middleware.dart": route_middleware,
    "package:get/get_navigation/src/routes/transitions_type.dart": transitions_type,
    "package:get/get_navigation/src/snackbar/snackbar.dart": snackbar,
    "package:get/get_navigation/src/snackbar/snackbar_controller.dart": snackbar_controller,
    "package:get/get_rx/src/rx_stream/rx_stream.dart": rx_stream,
    "package:get/get_rx/src/rx_types/rx_types.dart": rx_types,
    "package:get/get_rx/src/rx_workers/rx_workers.dart": rx_workers,
    "package:get/get_state_manager/src/rx_flutter/rx_disposable.dart": rx_disposable,
    "package:get/get_state_manager/src/rx_flutter/rx_getx_widget.dart": rx_getx_widget,
    "package:get/get_state_manager/src/rx_flutter/rx_notifier.dart": rx_notifier,
    "package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart": rx_obx_widget,
    "package:get/get_state_manager/src/rx_flutter/rx_ticket_provider_mixin.dart": rx_ticket_provider_mixin,
    "package:get/get_state_manager/src/simple/get_controllers.dart": get_controllers,
    "package:get/get_state_manager/src/simple/get_responsive.dart": get_responsive,
    "package:get/get_state_manager/src/simple/get_state.dart": get_state,
    "package:get/get_state_manager/src/simple/get_view.dart": get_view,
    "package:get/get_state_manager/src/simple/mixin_state.dart": mixin_state,
    "package:get/get_state_manager/src/simple/simple_builder.dart": simple_builder,
    "package:get/get_utils/src/extensions/export.dart": $export,
    "package:get/get_utils/src/get_utils/get_utils.dart": get_utils$,
    "package:get/get_utils/src/platform/platform.dart": platform$,
    "package:get/get_utils/src/queue/get_queue.dart": get_queue,
    "package:get/get_connect/http/src/request/request.dart": request$,
    "package:get/get_connect/http/src/status/http_status.dart": http_status,
    "package:get/get_connect/http/src/_http/_html/_http_request_html.dart": _http_request_html,
    "package:get/get_connect/http/src/_http/interface/request_base.dart": request_base,
    "package:get/get_connect/http/src/interceptors/get_modifiers.dart": get_modifiers,
    "package:get/get_connect/sockets/src/sockets_html.dart": sockets_html,
    "package:get/get_connect/http/src/utils/utils.dart": utils,
    "package:get/get_connect/http/src/_http/_html/_file_decoder_html.dart": _file_decoder_html,
    "package:get/get_navigation/src/router_report.dart": router_report,
    "package:get/get_navigation/src/dialog/dialog_route.dart": dialog_route,
    "package:get/get_navigation/src/root/parse_route.dart": parse_route,
    "package:get/get_state_manager/src/simple/list_notifier.dart": list_notifier,
    "package:get/get_navigation/src/routes/get_transition_mixin.dart": get_transition_mixin,
    "package:get/instance_manager.dart": instance_manager,
    "package:get/get_rx/src/rx_typedefs/rx_typedefs.dart": rx_typedefs,
    "package:get/get_rx/src/rx_workers/utils/debouncer.dart": debouncer,
    "package:get/utils.dart": utils$,
    "package:get/get_state_manager/src/simple/get_widget_cache.dart": get_widget_cache,
    "package:get/get_utils/src/extensions/context_extensions.dart": context_extensions,
    "package:get/get_utils/src/extensions/double_extensions.dart": double_extensions,
    "package:get/get_utils/src/extensions/duration_extensions.dart": duration_extensions,
    "package:get/get_utils/src/extensions/dynamic_extensions.dart": dynamic_extensions,
    "package:get/get_utils/src/extensions/event_loop_extensions.dart": event_loop_extensions,
    "package:get/get_utils/src/extensions/internacionalization.dart": internacionalization$,
    "package:get/get_utils/src/extensions/iterable_extensions.dart": iterable_extensions,
    "package:get/get_utils/src/extensions/num_extensions.dart": num_extensions,
    "package:get/get_utils/src/extensions/string_extensions.dart": string_extensions,
    "package:get/get_utils/src/extensions/widget_extensions.dart": widget_extensions,
    "package:get/get_utils/src/platform/platform_web.dart": platform_web,
    "package:get/get_connect/http/src/_http/utils/body_decoder.dart": body_decoder,
    "package:get/get_connect/sockets/src/socket_notifier.dart": socket_notifier,
    "package:get/get_navigation/src/routes/default_transitions.dart": default_transitions,
    "package:get/get_navigation/src/routes/circular_reveal_clipper.dart": circular_reveal_clipper
  }, {
    "package:get/get_rx/src/rx_stream/rx_stream.dart": ["get_stream.dart", "mini_stream.dart"],
    "package:get/get_rx/src/rx_types/rx_types.dart": ["rx_core/rx_impl.dart", "rx_core/rx_interface.dart", "rx_core/rx_num.dart", "rx_core/rx_string.dart", "rx_iterables/rx_list.dart", "rx_iterables/rx_set.dart", "rx_iterables/rx_map.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_common/get_reset.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_instance/src/lifecycle.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/connect.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_core/get_core.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/certificates/certificates.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/exceptions/exceptions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/http.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/response/response.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/sockets/src/sockets_html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/sockets/sockets.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/multipart/form_data.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/multipart/multipart_file.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_core/src/get_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_core/src/get_main.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_core/src/log.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_core/src/smart_management.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_instance/src/bindings_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_instance/src/extension_instance.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_instance/src/get_instance.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/bottomsheet/bottomsheet.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/extension_navigation.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/nav2/get_nav_config.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/nav2/get_information_parser.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/list_notifier.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/nav2/get_router_delegate.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/nav2/router_outlet.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/root/get_cupertino_app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/root/get_material_app.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/root/internacionalization.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_disposable.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/get_controllers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_notifier.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/root/root_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/custom_transition.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/default_route.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/get_transition_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/get_route.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/observers/route_observer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/route_middleware.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/transitions_type.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/snackbar/snackbar.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/snackbar/snackbar_controller.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_stream/get_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_stream/mini_stream.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_core/rx_impl.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_core/rx_interface.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_core/rx_num.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_core/rx_string.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_iterables/rx_list.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_iterables/rx_set.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_types/rx_iterables/rx_map.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_workers/rx_workers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_getx_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_obx_widget.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/rx_flutter/rx_ticket_provider_mixin.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/get_responsive.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/get_view.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/get_widget_cache.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/get_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/mixin_state.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_state_manager/src/simple/simple_builder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/get_utils/get_utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/platform/platform.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/queue/get_queue.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/request/request.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/status/http_status.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/_http/_html/_http_request_html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/_http/interface/request_base.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/interceptors/get_modifiers.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/utils/utils.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/_http/_html/_file_decoder_html.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/router_report.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/dialog/dialog_route.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/root/parse_route.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_rx/src/rx_workers/utils/debouncer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/context_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/double_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/duration_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/dynamic_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/event_loop_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/internacionalization.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/iterable_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/num_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/string_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/extensions/widget_extensions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_utils/src/platform/platform_web.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/http/src/_http/utils/body_decoder.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_connect/sockets/src/socket_notifier.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/default_transitions.dart","/zapp/pub/.pub_cache/hosted/pub.dev/get-4.6.5/lib/get_navigation/src/routes/circular_reveal_clipper.dart"],"names":[],"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AJ,gBACI,6CAAJ,cAAuB,eAAZ,2BACX,oBACS,qBAAP,wDACM,oCAET,AAAS,kCAAU,qBAAY,+CACV,AAAS,AAAQ,yBAAG,oBACxC,yCACA,gDACU,0CAEZ,SADiB,AAAmB,kCACf,oCACjB,mCAAY,sBAAqB,kDAAJ,mBAEZ,oCACjB,mCAAY,sBAAqB,kDAAJ,kBAJjC;AAMA,iCAAyB,eAAlB;;sCACF,gCACF,6BACU,6BACV,qBACY,SAAP,gDAAJ,eAAI,iBAAU,+CACE,2DACM,6DACJ,iDACR,+CACM,4DACO,iEACF,yDACN,wDACK,4CACjB,wCACa;;IAGjC;mBAE8B,SAAiB;;AAClD,YAAO,+CACwB,2BAAd,eACV,AAAa,wDAAa,gDAAJ,8BAAI,OAAQ,sBACf,uBACA,qCACjB,AAAQ,wBACF,QAAN,KAAK,EAAL,gBAAS,uCACH,AAAC,eAAR,cAAS,OAAO,GAAQ,SAAN,KAAK,EAAL,iBAAS;IAErC;cAEuC;AACrC,YAAO,AAA6D,kDAAtC,QAAQ,gBAAgB;IACxD;0BAEkD;AAChD,YAAO,yBACL,AAGE,iDAFU,uCAAoB,IAAI,kBACpB;IAGpB;;;QA9PO;QACA;QACA;QACA;QAC2C;QAE3C;QACA;QACA;QACA;QACwB;QAExB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAjDA;IACA;IACA;IAC2C;IAE3C;IACA;IACA;IACA;IACwB;IAExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACwB,oCAAE;IACJ,oCAAE;IACV,4BAAE;IACI,gCAAE;AACvB,qEAAW,GAAG;;EAAC;;;QAGd;QACA;QACA;QAC2B;QACR;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IA3CA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACc,6BAAiB,OAAf,cAAc,EAAC,eAAf,iBAAuB,iDAAJ,8BACnB,YAAY;IAEN,qCACI,QAAvB,sBAAsB,EAAC,gBAAvB,yBAA+B,0DAAJ,8BACM,gBAArB,QAAQ,iBAAR,OAAU,AAAM,uBAAhB,gBAAwB;IAErB,gCAAE;IACR,wBAAE;IACC,2BAAE;IACb,gBAAE;IACiB,mCAAE;IACX,0BAAE;IACV,kBAAE;IACI,0BAAE;AACf,qEAAW,GAAG;AACiB,IAAnC,AAAI,8BAAiB,cAAc;AACgB,IAAnD,AAAI,sCAAyB,sBAAsB;EACrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IChLiC;;;;;;IAEQ;;;;;;IAC3B;;;;;;IACoB;;;;;;IACpB;;;;;;IACM;;;;;;IACW;;;;;;IACX;;;;;;IACW;;;;;;IACN;;;;;;IACZ;;;;;;IACW;;;;;;IACP;;;;;;IACA;;;;;;IACD;;;;;;IACQ;;;;;;IACX;;;;;;IAC2B;;;;;;IACpB;;;;;;IACC;;;;;;IACP;;;;;;IACA;;;;;;IACkC;;;;;;IACZ;;;;;;IACJ;;;;;;IACT;;;;;;IACZ;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACuB;;;;;;IACZ;;;;;;IACL;;;;;;IACA;;;;;;IACgB;;;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A;QACA;QACA;QACA;QACA;QACA;QACA;IAtDA;IACA;IACA;IAC2C;IAE3C;IACA;IACA;IACA;IACA;IACwB;IAExB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACwB,sCAAE;IACJ,oCAAE;IACV,4BAAE;IACI,kCAAE;AACvB,mEAAW,GAAG;;EAAC;;;QAGd;QACA;QACA;QAC2B;QACR;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAjDA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACc,6BAAiB,OAAf,cAAc,EAAC,eAAf,iBAAuB,iDAAJ,8BACnB,YAAY;IAEN,qCACI,QAAvB,sBAAsB,EAAC,gBAAvB,yBAA+B,0DAAJ,8BACM,gBAArB,QAAQ,iBAAR,OAAU,AAAM,uBAAhB,gBAAwB;IAG3B,0BAAE;IACC,6BAAE;IACb,kBAAE;IACiB,qCAAE;IACX,4BAAE;IACV,oBAAE;IACI,0BAAE;AACf,mEAAW,GAAG;AACiB,IAAnC,AAAI,8BAAiB,cAAc;AACgB,IAAnD,AAAI,sCAAyB,sBAAsB;EACrD;;;;;;;;;;;;;;;;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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    get: get,
    get_common__get_reset: get_reset,
    get_connect__connect: connect,
    get_core__get_core: get_core,
    get_instance__get_instance: get_instance,
    get_navigation__get_navigation: get_navigation,
    get_rx__get_rx: get_rx,
    get_state_manager__get_state_manager: get_state_manager,
    get_utils__get_utils: get_utils,
    route_manager: route_manager,
    get_instance__src__lifecycle: lifecycle,
    get_connect__http__src__certificates__certificates: certificates,
    get_connect__http__src__exceptions__exceptions: exceptions,
    get_connect__http__src__http: http,
    get_connect__http__src__response__response: response$,
    get_connect__sockets__sockets: sockets,
    get_connect__http__src__multipart__form_data: form_data,
    get_connect__http__src__multipart__multipart_file: multipart_file,
    get_core__src__get_interface: get_interface,
    get_core__src__get_main: get_main,
    get_core__src__log: log,
    get_core__src__smart_management: smart_management,
    get_core__src__typedefs: typedefs,
    get_instance__src__bindings_interface: bindings_interface,
    get_instance__src__extension_instance: extension_instance,
    get_instance__src__get_instance: get_instance$,
    get_navigation__src__bottomsheet__bottomsheet: bottomsheet$,
    get_navigation__src__extension_navigation: extension_navigation,
    get_navigation__src__nav2__get_information_parser: get_information_parser,
    get_navigation__src__nav2__get_nav_config: get_nav_config,
    get_navigation__src__nav2__get_router_delegate: get_router_delegate,
    get_navigation__src__nav2__router_outlet: router_outlet,
    get_navigation__src__root__get_cupertino_app: get_cupertino_app,
    get_navigation__src__root__get_material_app: get_material_app,
    get_navigation__src__root__internacionalization: internacionalization,
    get_navigation__src__root__root_controller: root_controller,
    get_navigation__src__routes__custom_transition: custom_transition,
    get_navigation__src__routes__default_route: default_route,
    get_navigation__src__routes__get_route: get_route,
    get_navigation__src__routes__observers__route_observer: route_observer,
    get_navigation__src__routes__route_middleware: route_middleware,
    get_navigation__src__routes__transitions_type: transitions_type,
    get_navigation__src__snackbar__snackbar: snackbar,
    get_navigation__src__snackbar__snackbar_controller: snackbar_controller,
    get_rx__src__rx_stream__rx_stream: rx_stream,
    get_rx__src__rx_types__rx_types: rx_types,
    get_rx__src__rx_workers__rx_workers: rx_workers,
    get_state_manager__src__rx_flutter__rx_disposable: rx_disposable,
    get_state_manager__src__rx_flutter__rx_getx_widget: rx_getx_widget,
    get_state_manager__src__rx_flutter__rx_notifier: rx_notifier,
    get_state_manager__src__rx_flutter__rx_obx_widget: rx_obx_widget,
    get_state_manager__src__rx_flutter__rx_ticket_provider_mixin: rx_ticket_provider_mixin,
    get_state_manager__src__simple__get_controllers: get_controllers,
    get_state_manager__src__simple__get_responsive: get_responsive,
    get_state_manager__src__simple__get_state: get_state,
    get_state_manager__src__simple__get_view: get_view,
    get_state_manager__src__simple__mixin_state: mixin_state,
    get_state_manager__src__simple__simple_builder: simple_builder,
    get_utils__src__extensions__export: $export,
    get_utils__src__get_utils__get_utils: get_utils$,
    get_utils__src__platform__platform: platform$,
    get_utils__src__queue__get_queue: get_queue,
    get_connect__http__src__request__request: request$,
    get_connect__http__src__status__http_status: http_status,
    get_connect__http__src___http___html___http_request_html: _http_request_html,
    get_connect__http__src___http__interface__request_base: request_base,
    get_connect__http__src__interceptors__get_modifiers: get_modifiers,
    get_connect__sockets__src__sockets_html: sockets_html,
    get_connect__http__src__utils__utils: utils,
    get_connect__http__src___http___html___file_decoder_html: _file_decoder_html,
    get_navigation__src__router_report: router_report,
    get_navigation__src__dialog__dialog_route: dialog_route,
    get_navigation__src__root__parse_route: parse_route,
    get_state_manager__src__simple__list_notifier: list_notifier,
    get_navigation__src__routes__get_transition_mixin: get_transition_mixin,
    instance_manager: instance_manager,
    get_rx__src__rx_typedefs__rx_typedefs: rx_typedefs,
    get_rx__src__rx_workers__utils__debouncer: debouncer,
    utils: utils$,
    get_state_manager__src__simple__get_widget_cache: get_widget_cache,
    get_utils__src__extensions__context_extensions: context_extensions,
    get_utils__src__extensions__double_extensions: double_extensions,
    get_utils__src__extensions__duration_extensions: duration_extensions,
    get_utils__src__extensions__dynamic_extensions: dynamic_extensions,
    get_utils__src__extensions__event_loop_extensions: event_loop_extensions,
    get_utils__src__extensions__internacionalization: internacionalization$,
    get_utils__src__extensions__iterable_extensions: iterable_extensions,
    get_utils__src__extensions__num_extensions: num_extensions,
    get_utils__src__extensions__string_extensions: string_extensions,
    get_utils__src__extensions__widget_extensions: widget_extensions,
    get_utils__src__platform__platform_web: platform_web,
    get_connect__http__src___http__utils__body_decoder: body_decoder,
    get_connect__sockets__src__socket_notifier: socket_notifier,
    get_navigation__src__routes__default_transitions: default_transitions,
    get_navigation__src__routes__circular_reveal_clipper: circular_reveal_clipper
  };
}));

//# sourceMappingURL=main.js.map
